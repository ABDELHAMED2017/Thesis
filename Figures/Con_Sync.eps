%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Con_Sync.pdf
%%Creator: Adobe Acrobat 8.0
%%For: asian
%%CreationDate: 30/6/13, 4:21:55 PM
%%BoundingBox: 0 0 576 315
%%HiResBoundingBox: 0 0 575.8690 314.7812
%%CropBox: 0 0 575.8690 314.7812
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.30 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.30 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}				if				end		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:08:23">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xap:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -314.781 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 314.781 li
575.869 314.781 li
575.869 0 li
cp
clp
[1 0 0 1 0 0 ]ct
388.809 117.504 mo
388.59 117.605 388.332 117.687 388.035 117.746 cv
387.73 117.808 387.418 117.84 387.094 117.84 cv
386.105 117.828 385.344 117.535 384.809 116.961 cv
384.273 116.386 384.004 115.593 383.996 114.586 cv
384.008 113.519 384.297 112.699 384.863 112.121 cv
385.426 111.547 386.188 111.258 387.152 111.25 cv
387.488 111.258 387.793 111.289 388.07 111.347 cv
388.34 111.41 388.574 111.488 388.773 111.586 cv
389.035 110.734 li
388.895 110.66 388.664 110.582 388.344 110.5 cv
388.023 110.426 387.613 110.383 387.117 110.375 cv
385.84 110.394 384.82 110.785 384.063 111.547 cv
383.297 112.308 382.91 113.332 382.895 114.621 cv
382.898 115.511 383.07 116.261 383.418 116.871 cv
383.758 117.48 384.23 117.941 384.828 118.254 cv
385.426 118.566 386.105 118.722 386.875 118.726 cv
387.367 118.718 387.801 118.679 388.172 118.605 cv
388.539 118.531 388.82 118.445 389.012 118.34 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0.137255 0.121569 0.12549 rgb
f
392.625 112.668 mo
392.082 112.672 391.598 112.793 391.168 113.035 cv
390.734 113.281 390.391 113.633 390.137 114.086 cv
389.879 114.547 389.75 115.097 389.746 115.738 cv
389.762 116.668 390.027 117.394 390.551 117.922 cv
391.066 118.449 391.727 118.715 392.527 118.726 cv
393 118.722 393.457 118.617 393.895 118.402 cv
394.332 118.187 394.691 117.851 394.98 117.398 cv
395.262 116.945 395.41 116.359 395.422 115.64 cv
395.406 114.746 395.148 114.031 394.648 113.492 cv
394.145 112.957 393.469 112.683 392.625 112.668 cv
cp
392.602 113.457 mo
393.012 113.468 393.348 113.59 393.605 113.816 cv
393.859 114.047 394.047 114.328 394.168 114.664 cv
394.281 115.004 394.34 115.343 394.344 115.679 cv
394.328 116.347 394.16 116.886 393.836 117.297 cv
393.508 117.715 393.086 117.926 392.578 117.933 cv
392.047 117.922 391.625 117.711 391.313 117.297 cv
390.992 116.886 390.832 116.355 390.824 115.703 cv
390.824 115.336 390.887 114.98 391.012 114.636 cv
391.137 114.301 391.328 114.019 391.59 113.797 cv
391.852 113.582 392.188 113.468 392.602 113.457 cv
cp
f
400.836 115.031 mo
400.84 114.64 400.777 114.265 400.656 113.906 cv
400.527 113.547 400.305 113.254 399.988 113.023 cv
399.664 112.797 399.211 112.679 398.625 112.668 cv
398.254 112.672 397.902 112.715 397.57 112.804 cv
397.238 112.898 396.949 113.019 396.707 113.168 cv
396.945 113.879 li
397.152 113.742 397.387 113.636 397.652 113.558 cv
397.914 113.488 398.188 113.449 398.473 113.445 cv
398.859 113.449 399.148 113.527 399.34 113.679 cv
399.527 113.836 399.652 114.015 399.711 114.222 cv
399.77 114.429 399.797 114.617 399.793 114.777 cv
399.793 114.898 li
398.664 114.898 397.801 115.082 397.203 115.449 cv
396.605 115.82 396.305 116.355 396.301 117.058 cv
396.301 117.496 396.449 117.879 396.746 118.207 cv
397.043 118.535 397.484 118.707 398.074 118.726 cv
398.488 118.715 398.848 118.629 399.152 118.465 cv
399.453 118.301 399.688 118.101 399.852 117.863 cv
399.887 117.863 li
399.973 118.593 li
400.918 118.593 li
400.887 118.394 400.863 118.176 400.852 117.937 cv
400.836 117.703 400.832 117.457 400.836 117.199 cv
cp
399.816 116.636 mo
399.816 116.687 399.813 116.742 399.805 116.797 cv
399.797 116.855 399.785 116.914 399.77 116.972 cv
399.684 117.234 399.52 117.461 399.277 117.648 cv
399.035 117.843 398.723 117.941 398.34 117.945 cv
398.066 117.949 397.836 117.867 397.648 117.703 cv
397.461 117.539 397.363 117.285 397.355 116.937 cv
397.363 116.566 397.488 116.285 397.734 116.093 cv
397.98 115.902 398.289 115.773 398.664 115.707 cv
399.035 115.644 399.422 115.617 399.816 115.629 cv
cp
f
402.535 118.593 mo
403.59 118.593 li
403.59 115.496 li
403.586 115.414 403.59 115.328 403.598 115.242 cv
403.602 115.156 403.613 115.078 403.629 115.004 cv
403.703 114.605 403.863 114.285 404.109 114.039 cv
404.355 113.797 404.664 113.668 405.043 113.66 cv
405.109 113.66 405.176 113.664 405.234 113.664 cv
405.293 113.672 405.348 113.676 405.402 113.683 cv
405.402 112.691 li
405.352 112.687 405.305 112.679 405.262 112.676 cv
405.215 112.672 405.168 112.672 405.117 112.668 cv
404.754 112.676 404.426 112.789 404.137 113.011 cv
403.844 113.238 403.629 113.547 403.496 113.937 cv
403.461 113.937 li
403.41 112.785 li
402.488 112.785 li
402.504 113.058 402.52 113.343 402.527 113.64 cv
402.535 113.941 402.535 114.258 402.535 114.597 cv
cp
f
406.066 118.316 mo
406.27 118.441 406.512 118.535 406.793 118.609 cv
407.074 118.683 407.375 118.722 407.699 118.726 cv
408.379 118.715 408.906 118.554 409.285 118.238 cv
409.656 117.922 409.848 117.5 409.855 116.972 cv
409.852 116.547 409.723 116.195 409.469 115.918 cv
409.207 115.644 408.828 115.418 408.336 115.234 cv
407.953 115.093 407.676 114.949 407.504 114.804 cv
407.324 114.66 407.238 114.472 407.242 114.238 cv
407.238 114.019 407.32 113.832 407.484 113.679 cv
407.648 113.531 407.887 113.453 408.203 113.445 cv
408.473 113.453 408.711 113.492 408.914 113.566 cv
409.117 113.64 409.273 113.718 409.391 113.793 cv
409.641 113.027 li
409.48 112.926 409.277 112.84 409.035 112.769 cv
408.789 112.703 408.52 112.672 408.227 112.668 cv
407.598 112.683 407.109 112.847 406.758 113.168 cv
406.406 113.488 406.227 113.89 406.223 114.371 cv
406.219 114.722 406.344 115.035 406.598 115.308 cv
406.852 115.586 407.242 115.82 407.77 116.015 cv
408.148 116.156 408.422 116.304 408.59 116.461 cv
408.758 116.621 408.84 116.824 408.84 117.07 cv
408.836 117.32 408.746 117.527 408.563 117.687 cv
408.379 117.847 408.098 117.929 407.723 117.933 cv
407.449 117.929 407.188 117.886 406.941 117.804 cv
406.691 117.722 406.484 117.629 406.32 117.527 cv
cp
f
415.883 115.883 mo
415.895 115.824 415.902 115.754 415.91 115.672 cv
415.914 115.593 415.918 115.5 415.918 115.39 cv
415.922 115.023 415.855 114.629 415.719 114.211 cv
415.582 113.793 415.336 113.437 414.988 113.136 cv
414.637 112.84 414.148 112.683 413.52 112.668 cv
412.953 112.676 412.469 112.812 412.063 113.086 cv
411.656 113.359 411.344 113.73 411.125 114.199 cv
410.906 114.668 410.797 115.199 410.797 115.785 cv
410.805 116.679 411.055 117.386 411.555 117.914 cv
412.047 118.441 412.746 118.711 413.652 118.726 cv
414.109 118.718 414.504 118.676 414.828 118.601 cv
415.152 118.523 415.406 118.445 415.594 118.355 cv
415.402 117.597 li
415.215 117.683 414.992 117.758 414.738 117.812 cv
414.48 117.871 414.168 117.898 413.797 117.898 cv
413.246 117.906 412.781 117.75 412.406 117.426 cv
412.027 117.109 411.828 116.593 411.805 115.883 cv
cp
411.816 115.125 mo
411.84 114.875 411.91 114.621 412.031 114.359 cv
412.148 114.101 412.324 113.883 412.555 113.703 cv
412.781 113.527 413.074 113.433 413.438 113.422 cv
413.824 113.433 414.125 113.531 414.344 113.718 cv
414.555 113.906 414.703 114.133 414.789 114.39 cv
414.867 114.656 414.906 114.898 414.902 115.125 cv
cp
f
420.852 118.593 mo
421.906 118.593 li
421.906 111.394 li
424.379 111.394 li
424.379 110.508 li
418.391 110.508 li
418.391 111.394 li
420.852 111.394 li
cp
f
426.152 118.593 mo
426.152 112.785 li
425.098 112.785 li
425.098 118.593 li
cp
425.625 110.508 mo
425.422 110.515 425.266 110.582 425.148 110.703 cv
425.031 110.828 424.969 110.98 424.969 111.164 cv
424.969 111.351 425.027 111.508 425.141 111.625 cv
425.254 111.75 425.406 111.812 425.602 111.812 cv
425.813 111.812 425.977 111.75 426.094 111.625 cv
426.207 111.508 426.27 111.351 426.273 111.164 cv
426.27 110.976 426.207 110.82 426.094 110.695 cv
425.973 110.574 425.816 110.511 425.625 110.508 cv
cp
f
427.906 118.593 mo
428.938 118.593 li
428.938 115.101 li
428.934 115.011 428.941 114.922 428.957 114.832 cv
428.969 114.742 428.992 114.66 429.023 114.586 cv
429.109 114.312 429.266 114.07 429.496 113.859 cv
429.723 113.652 430 113.543 430.332 113.527 cv
430.73 113.539 431.035 113.687 431.238 113.976 cv
431.441 114.265 431.543 114.644 431.543 115.113 cv
431.543 118.593 li
432.574 118.593 li
432.574 115.004 li
432.574 114.91 432.582 114.816 432.598 114.726 cv
432.613 114.64 432.633 114.558 432.66 114.476 cv
432.754 114.218 432.91 113.996 433.129 113.812 cv
433.344 113.633 433.605 113.539 433.918 113.527 cv
434.336 113.535 434.652 113.691 434.863 114 cv
435.07 114.312 435.176 114.754 435.18 115.316 cv
435.18 118.593 li
436.211 118.593 li
436.211 115.183 li
436.199 114.519 436.09 114.004 435.887 113.636 cv
435.676 113.269 435.426 113.015 435.137 112.871 cv
434.84 112.73 434.559 112.664 434.293 112.668 cv
434.016 112.672 433.777 112.707 433.578 112.773 cv
433.371 112.843 433.188 112.941 433.02 113.074 cv
432.895 113.164 432.773 113.273 432.664 113.394 cv
432.547 113.519 432.445 113.664 432.359 113.828 cv
432.336 113.828 li
432.203 113.484 431.996 113.203 431.715 112.992 cv
431.43 112.781 431.094 112.676 430.703 112.668 cv
430.219 112.679 429.832 112.785 429.539 112.992 cv
429.246 113.203 429.02 113.453 428.867 113.734 cv
428.832 113.734 li
428.781 112.785 li
427.859 112.785 li
427.867 113.027 427.879 113.273 427.891 113.523 cv
427.898 113.781 427.902 114.058 427.906 114.359 cv
cp
f
442.582 115.883 mo
442.594 115.824 442.602 115.754 442.609 115.672 cv
442.613 115.593 442.617 115.5 442.617 115.39 cv
442.621 115.023 442.555 114.629 442.418 114.211 cv
442.281 113.793 442.035 113.437 441.688 113.136 cv
441.336 112.84 440.848 112.683 440.219 112.668 cv
439.652 112.676 439.168 112.812 438.762 113.086 cv
438.355 113.359 438.043 113.73 437.824 114.199 cv
437.605 114.668 437.496 115.199 437.496 115.785 cv
437.504 116.679 437.754 117.386 438.254 117.914 cv
438.746 118.441 439.445 118.711 440.352 118.726 cv
440.809 118.718 441.203 118.676 441.527 118.601 cv
441.852 118.523 442.105 118.445 442.293 118.355 cv
442.102 117.597 li
441.914 117.683 441.691 117.758 441.438 117.812 cv
441.18 117.871 440.867 117.898 440.496 117.898 cv
439.945 117.906 439.48 117.75 439.105 117.426 cv
438.727 117.109 438.527 116.593 438.504 115.883 cv
cp
438.516 115.125 mo
438.539 114.875 438.609 114.621 438.73 114.359 cv
438.848 114.101 439.023 113.883 439.254 113.703 cv
439.48 113.527 439.773 113.433 440.137 113.422 cv
440.523 113.433 440.824 113.531 441.043 113.718 cv
441.254 113.906 441.402 114.133 441.488 114.39 cv
441.566 114.656 441.605 114.898 441.602 115.125 cv
cp
f
388.5 28.3402 mo
389.555 28.3402 li
389.555 24.6793 li
392.602 24.6793 li
392.602 23.8163 li
389.555 23.8163 li
389.555 21.1292 li
392.852 21.1292 li
392.852 20.2542 li
388.5 20.2542 li
cp
f
394.004 28.3402 mo
395.059 28.3402 li
395.059 25.2422 li
395.055 25.1602 395.059 25.0742 395.066 24.9883 cv
395.07 24.9023 395.082 24.8242 395.098 24.7502 cv
395.172 24.3513 395.332 24.0313 395.578 23.7852 cv
395.824 23.5432 396.133 23.4142 396.512 23.4063 cv
396.578 23.4063 396.645 23.4102 396.703 23.4102 cv
396.762 23.4182 396.816 23.4222 396.871 23.4293 cv
396.871 22.4373 li
396.82 22.4333 396.773 22.4262 396.73 22.4222 cv
396.684 22.4182 396.637 22.4182 396.586 22.4142 cv
396.223 22.4222 395.895 22.5352 395.605 22.7582 cv
395.313 22.9843 395.098 23.2932 394.965 23.6833 cv
394.93 23.6833 li
394.879 22.5313 li
393.957 22.5313 li
393.973 22.8043 393.988 23.0902 393.996 23.3863 cv
394.004 23.6873 394.004 24.0042 394.004 24.3433 cv
cp
f
402.477 25.6292 mo
402.488 25.5703 402.496 25.5002 402.504 25.4182 cv
402.508 25.3402 402.512 25.2462 402.512 25.1363 cv
402.516 24.7693 402.449 24.3752 402.313 23.9572 cv
402.176 23.5392 401.93 23.1833 401.582 22.8832 cv
401.23 22.5862 400.742 22.4293 400.113 22.4142 cv
399.547 22.4222 399.063 22.5583 398.656 22.8322 cv
398.25 23.1053 397.938 23.4763 397.719 23.9453 cv
397.5 24.4142 397.391 24.9453 397.391 25.5313 cv
397.398 26.4262 397.648 27.1332 398.148 27.6602 cv
398.641 28.1873 399.34 28.4572 400.246 28.4723 cv
400.703 28.4652 401.098 28.4222 401.422 28.3473 cv
401.746 28.2693 402 28.1913 402.188 28.1013 cv
401.996 27.3433 li
401.809 27.4293 401.586 27.5042 401.332 27.5583 cv
401.074 27.6172 400.762 27.6443 400.391 27.6443 cv
399.84 27.6523 399.375 27.4962 399 27.1722 cv
398.621 26.8553 398.422 26.3402 398.398 25.6292 cv
cp
398.41 24.8712 mo
398.434 24.6212 398.504 24.3672 398.625 24.1053 cv
398.742 23.8473 398.918 23.6292 399.148 23.4492 cv
399.375 23.2733 399.668 23.1793 400.031 23.1682 cv
400.418 23.1793 400.719 23.2773 400.938 23.4652 cv
401.148 23.6523 401.297 23.8792 401.383 24.1363 cv
401.461 24.4023 401.5 24.6443 401.496 24.8712 cv
cp
f
404.121 28.4723 mo
404.34 28.4652 404.52 28.3943 404.652 28.2582 cv
404.781 28.1172 404.848 27.9373 404.852 27.7152 cv
404.848 27.4922 404.781 27.3123 404.656 27.1722 cv
404.527 27.0392 404.355 26.9683 404.145 26.9612 cv
403.926 26.9683 403.754 27.0392 403.625 27.1793 cv
403.492 27.3203 403.426 27.5002 403.426 27.7152 cv
403.426 27.9373 403.488 28.1172 403.617 28.2582 cv
403.742 28.3943 403.91 28.4652 404.121 28.4723 cv
cp
f
412.004 20.1093 mo
411.273 20.1172 410.629 20.2932 410.07 20.6403 cv
409.508 20.9883 409.066 21.4803 408.75 22.1133 cv
408.426 22.7502 408.266 23.4962 408.262 24.3553 cv
408.277 25.5973 408.613 26.5902 409.27 27.3322 cv
409.926 28.0742 410.801 28.4532 411.895 28.4723 cv
412.59 28.4683 413.219 28.3083 413.785 27.9843 cv
414.348 27.6602 414.797 27.1833 415.137 26.5512 cv
415.469 25.9222 415.641 25.1403 415.652 24.2112 cv
415.645 23.4023 415.496 22.6913 415.199 22.0782 cv
414.902 21.4652 414.48 20.9843 413.938 20.6363 cv
413.391 20.2932 412.746 20.1172 412.004 20.1093 cv
cp
411.969 20.9612 mo
412.543 20.9763 413.023 21.1403 413.41 21.4572 cv
413.789 21.7773 414.074 22.1873 414.266 22.6833 cv
414.453 23.1873 414.547 23.7112 414.551 24.2613 cv
414.543 24.8792 414.441 25.4413 414.242 25.9492 cv
414.039 26.4572 413.746 26.8633 413.363 27.1602 cv
412.977 27.4652 412.508 27.6172 411.957 27.6212 cv
411.398 27.6172 410.93 27.4612 410.547 27.1563 cv
410.16 26.8553 409.867 26.4572 409.668 25.9612 cv
409.465 25.4652 409.363 24.9222 409.363 24.3322 cv
409.363 23.7383 409.457 23.1873 409.652 22.6762 cv
409.84 22.1682 410.129 21.7582 410.52 21.4413 cv
410.902 21.1332 411.387 20.9723 411.969 20.9612 cv
cp
f
418.316 28.3402 mo
418.316 23.3362 li
419.719 23.3362 li
419.719 22.5313 li
418.316 22.5313 li
418.316 22.2183 li
418.305 21.7582 418.379 21.3672 418.539 21.0432 cv
418.699 20.7223 419 20.5543 419.445 20.5392 cv
419.598 20.5432 419.727 20.5543 419.836 20.5782 cv
419.941 20.6053 420.035 20.6363 420.117 20.6722 cv
420.262 19.8553 li
420.156 19.8123 420.027 19.7773 419.875 19.7422 cv
419.723 19.7112 419.551 19.6913 419.359 19.6873 cv
419.109 19.6913 418.859 19.7343 418.613 19.8163 cv
418.367 19.9023 418.145 20.0392 417.945 20.2263 cv
417.707 20.4683 417.535 20.7653 417.43 21.1133 cv
417.32 21.4652 417.27 21.8433 417.273 22.2582 cv
417.273 22.5313 li
416.469 22.5313 li
416.469 23.3362 li
417.273 23.3362 li
417.273 28.3402 li
cp
f
423.66 28.0623 mo
423.863 28.1873 424.105 28.2813 424.387 28.3553 cv
424.668 28.4293 424.969 28.4683 425.293 28.4723 cv
425.973 28.4612 426.5 28.3012 426.879 27.9843 cv
427.25 27.6682 427.441 27.2462 427.449 26.7183 cv
427.445 26.2932 427.316 25.9413 427.063 25.6642 cv
426.801 25.3903 426.422 25.1642 425.93 24.9803 cv
425.547 24.8402 425.27 24.6953 425.098 24.5512 cv
424.918 24.4063 424.832 24.2183 424.836 23.9843 cv
424.832 23.7653 424.914 23.5782 425.078 23.4262 cv
425.242 23.2773 425.48 23.1992 425.797 23.1913 cv
426.066 23.1992 426.305 23.2383 426.508 23.3123 cv
426.711 23.3863 426.867 23.4652 426.984 23.5392 cv
427.234 22.7733 li
427.074 22.6722 426.871 22.5862 426.629 22.5153 cv
426.383 22.4492 426.113 22.4182 425.82 22.4142 cv
425.191 22.4293 424.703 22.5933 424.352 22.9142 cv
424 23.2343 423.82 23.6363 423.816 24.1172 cv
423.813 24.4683 423.938 24.7813 424.191 25.0543 cv
424.445 25.3322 424.836 25.5663 425.363 25.7613 cv
425.742 25.9023 426.016 26.0512 426.184 26.2072 cv
426.352 26.3672 426.434 26.5703 426.434 26.8163 cv
426.43 27.0663 426.34 27.2733 426.156 27.4333 cv
425.973 27.5933 425.691 27.6762 425.316 27.6793 cv
425.043 27.6762 424.781 27.6332 424.535 27.5512 cv
424.285 27.4683 424.078 27.3752 423.914 27.2733 cv
cp
f
433.473 25.6292 mo
433.484 25.5703 433.492 25.5002 433.5 25.4182 cv
433.504 25.3402 433.508 25.2462 433.508 25.1363 cv
433.512 24.7693 433.445 24.3752 433.309 23.9572 cv
433.172 23.5392 432.926 23.1833 432.578 22.8832 cv
432.227 22.5862 431.738 22.4293 431.109 22.4142 cv
430.543 22.4222 430.059 22.5583 429.652 22.8322 cv
429.246 23.1053 428.934 23.4763 428.715 23.9453 cv
428.496 24.4142 428.387 24.9453 428.387 25.5313 cv
428.395 26.4262 428.645 27.1332 429.145 27.6602 cv
429.637 28.1873 430.336 28.4572 431.242 28.4723 cv
431.699 28.4652 432.094 28.4222 432.418 28.3473 cv
432.742 28.2693 432.996 28.1913 433.184 28.1013 cv
432.992 27.3433 li
432.805 27.4293 432.582 27.5042 432.328 27.5583 cv
432.07 27.6172 431.758 27.6443 431.387 27.6443 cv
430.836 27.6523 430.371 27.4962 429.996 27.1722 cv
429.617 26.8553 429.418 26.3402 429.395 25.6292 cv
cp
429.406 24.8712 mo
429.43 24.6212 429.5 24.3672 429.621 24.1053 cv
429.738 23.8473 429.914 23.6292 430.145 23.4492 cv
430.371 23.2733 430.664 23.1793 431.027 23.1682 cv
431.414 23.1793 431.715 23.2773 431.934 23.4652 cv
432.145 23.6523 432.293 23.8792 432.379 24.1363 cv
432.457 24.4023 432.496 24.6443 432.492 24.8712 cv
cp
f
435.059 21.4532 mo
435.059 22.5313 li
434.156 22.5313 li
434.156 23.3362 li
435.059 23.3362 li
435.059 26.5113 li
435.055 26.8513 435.086 27.1483 435.152 27.4023 cv
435.215 27.6602 435.32 27.8712 435.465 28.0273 cv
435.59 28.1722 435.75 28.2773 435.945 28.3513 cv
436.137 28.4293 436.355 28.4683 436.605 28.4723 cv
436.805 28.4683 436.984 28.4532 437.148 28.4262 cv
437.305 28.3943 437.438 28.3633 437.539 28.3282 cv
437.492 27.5233 li
437.414 27.5543 437.328 27.5742 437.234 27.5822 cv
437.141 27.5973 437.02 27.6013 436.879 27.5973 cv
436.586 27.5973 436.383 27.5002 436.262 27.3043 cv
436.141 27.1133 436.082 26.8362 436.09 26.4683 cv
436.09 23.3362 li
437.602 23.3362 li
437.602 22.5313 li
436.09 22.5313 li
436.09 21.1403 li
cp
f
386.91 38.0862 mo
383.781 38.0862 li
383.781 35.5313 li
387.102 35.5313 li
387.102 34.6563 li
382.727 34.6563 li
382.727 42.7422 li
387.285 42.7422 li
387.285 41.8672 li
383.781 41.8672 li
383.781 38.9492 li
386.91 38.9492 li
cp
f
388.211 42.4652 mo
388.414 42.5902 388.656 42.6833 388.938 42.7582 cv
389.219 42.8322 389.52 42.8712 389.844 42.8752 cv
390.523 42.8633 391.051 42.7032 391.43 42.3863 cv
391.801 42.0703 391.992 41.6483 392 41.1212 cv
391.996 40.6953 391.867 40.3433 391.613 40.0663 cv
391.352 39.7932 390.973 39.5663 390.48 39.3832 cv
390.098 39.2422 389.82 39.0973 389.648 38.9532 cv
389.469 38.8083 389.383 38.6212 389.387 38.3863 cv
389.383 38.1682 389.465 37.9803 389.629 37.8282 cv
389.793 37.6793 390.031 37.6013 390.348 37.5933 cv
390.617 37.6013 390.855 37.6403 391.059 37.7152 cv
391.262 37.7892 391.418 37.8672 391.535 37.9413 cv
391.785 37.1762 li
391.625 37.0742 391.422 36.9883 391.18 36.9182 cv
390.934 36.8513 390.664 36.8203 390.371 36.8163 cv
389.742 36.8322 389.254 36.9962 388.902 37.3163 cv
388.551 37.6363 388.371 38.0392 388.367 38.5193 cv
388.363 38.8712 388.488 39.1833 388.742 39.4572 cv
388.996 39.7343 389.387 39.9683 389.914 40.1642 cv
390.293 40.3043 390.566 40.4532 390.734 40.6093 cv
390.902 40.7693 390.984 40.9723 390.984 41.2183 cv
390.98 41.4683 390.891 41.6762 390.707 41.8362 cv
390.523 41.9962 390.242 42.0782 389.867 42.0822 cv
389.594 42.0782 389.332 42.0352 389.086 41.9532 cv
388.836 41.8712 388.629 41.7773 388.465 41.6762 cv
cp
f
393.598 35.8553 mo
393.598 36.9333 li
392.695 36.9333 li
392.695 37.7383 li
393.598 37.7383 li
393.598 40.9142 li
393.594 41.2542 393.625 41.5512 393.691 41.8043 cv
393.754 42.0623 393.859 42.2733 394.004 42.4293 cv
394.129 42.5742 394.289 42.6793 394.484 42.7542 cv
394.676 42.8322 394.895 42.8712 395.145 42.8752 cv
395.344 42.8712 395.523 42.8553 395.688 42.8282 cv
395.844 42.7972 395.977 42.7653 396.078 42.7303 cv
396.031 41.9262 li
395.953 41.9572 395.867 41.9763 395.773 41.9843 cv
395.68 42.0002 395.559 42.0042 395.418 42.0002 cv
395.125 42.0002 394.922 41.9023 394.801 41.7072 cv
394.68 41.5153 394.621 41.2383 394.629 40.8712 cv
394.629 37.7383 li
396.141 37.7383 li
396.141 36.9333 li
394.629 36.9333 li
394.629 35.5432 li
cp
f
397.355 44.1443 mo
397.469 43.9453 397.594 43.6873 397.738 43.3633 cv
397.875 43.0392 398.016 42.6913 398.152 42.3163 cv
398.285 41.9413 398.402 41.5782 398.504 41.2303 cv
397.332 41.3473 li
397.285 41.6483 397.219 41.9763 397.141 42.3282 cv
397.059 42.6793 396.973 43.0193 396.883 43.3553 cv
396.789 43.6873 396.699 43.9803 396.609 44.2303 cv
cp
f
408.668 42.7422 mo
408.43 42.4843 408.203 42.2383 407.984 42.0042 cv
407.766 41.7693 407.547 41.5352 407.336 41.3012 cv
407.629 40.9492 407.871 40.5233 408.063 40.0193 cv
408.246 39.5233 408.395 38.9532 408.5 38.3123 cv
407.539 38.3123 li
407.461 38.8242 407.355 39.2773 407.23 39.6682 cv
407.098 40.0623 406.941 40.3983 406.762 40.6762 cv
406.492 40.3832 406.188 40.0352 405.84 39.6363 cv
405.488 39.2383 405.137 38.8402 404.793 38.4333 cv
404.793 38.3863 li
405.426 38.0742 405.883 37.7383 406.16 37.3863 cv
406.438 37.0352 406.574 36.6483 406.57 36.2263 cv
406.555 35.6953 406.383 35.2773 406.051 34.9723 cv
405.719 34.6722 405.293 34.5193 404.781 34.5113 cv
404.328 34.5193 403.953 34.6172 403.652 34.8083 cv
403.344 35.0042 403.113 35.2542 402.961 35.5543 cv
402.805 35.8593 402.727 36.1793 402.73 36.5113 cv
402.73 36.8012 402.789 37.0862 402.906 37.3752 cv
403.02 37.6642 403.188 37.9413 403.402 38.2072 cv
403.402 38.2422 li
402.93 38.4922 402.547 38.8123 402.262 39.1992 cv
401.973 39.5902 401.824 40.0583 401.816 40.6053 cv
401.816 41.2343 402.035 41.7653 402.469 42.1953 cv
402.895 42.6292 403.504 42.8513 404.301 42.8752 cv
404.746 42.8712 405.168 42.8012 405.559 42.6563 cv
405.949 42.5113 406.316 42.2813 406.664 41.9652 cv
406.816 42.1212 406.953 42.2613 407.074 42.3863 cv
407.191 42.5153 407.309 42.6332 407.422 42.7422 cv
cp
404.492 42.0822 mo
403.992 42.0742 403.59 41.9182 403.289 41.6133 cv
402.984 41.3123 402.828 40.9262 402.824 40.4492 cv
402.836 40.0273 402.957 39.6793 403.18 39.4063 cv
403.398 39.1403 403.625 38.9333 403.867 38.7932 cv
404.324 39.3242 404.758 39.8163 405.168 40.2653 cv
405.57 40.7183 405.898 41.0822 406.148 41.3513 cv
405.953 41.5703 405.715 41.7422 405.434 41.8752 cv
405.148 42.0113 404.836 42.0822 404.492 42.0822 cv
cp
404.699 35.2303 mo
405.027 35.2462 405.27 35.3593 405.422 35.5703 cv
405.57 35.7813 405.645 36.0153 405.645 36.2733 cv
405.637 36.6172 405.516 36.9142 405.277 37.1563 cv
405.039 37.4063 404.711 37.6443 404.301 37.8712 cv
404.125 37.6602 403.98 37.4333 403.867 37.1992 cv
403.75 36.9652 403.691 36.7032 403.688 36.4063 cv
403.688 36.0862 403.773 35.8123 403.945 35.5862 cv
404.113 35.3633 404.363 35.2422 404.699 35.2303 cv
cp
f
417.598 41.6523 mo
417.379 41.7542 417.121 41.8362 416.824 41.8943 cv
416.52 41.9572 416.207 41.9883 415.883 41.9883 cv
414.895 41.9763 414.133 41.6833 413.598 41.1093 cv
413.063 40.5352 412.793 39.7422 412.785 38.7343 cv
412.797 37.6682 413.086 36.8473 413.652 36.2693 cv
414.215 35.6953 414.977 35.4063 415.941 35.3983 cv
416.277 35.4063 416.582 35.4373 416.859 35.4962 cv
417.129 35.5583 417.363 35.6363 417.563 35.7343 cv
417.824 34.8832 li
417.684 34.8083 417.453 34.7303 417.133 34.6483 cv
416.813 34.5742 416.402 34.5313 415.906 34.5233 cv
414.629 34.5432 413.609 34.9333 412.852 35.6953 cv
412.086 36.4572 411.699 37.4803 411.684 38.7693 cv
411.688 39.6602 411.859 40.4102 412.207 41.0193 cv
412.547 41.6292 413.02 42.0902 413.617 42.4023 cv
414.215 42.7152 414.895 42.8712 415.664 42.8752 cv
416.156 42.8672 416.59 42.8282 416.961 42.7542 cv
417.328 42.6793 417.609 42.5933 417.801 42.4883 cv
cp
f
421.414 36.8163 mo
420.871 36.8203 420.387 36.9413 419.957 37.1833 cv
419.523 37.4293 419.18 37.7813 418.926 38.2343 cv
418.668 38.6953 418.539 39.2462 418.535 39.8863 cv
418.551 40.8163 418.816 41.5432 419.34 42.0703 cv
419.855 42.5973 420.516 42.8633 421.316 42.8752 cv
421.789 42.8712 422.246 42.7653 422.684 42.5512 cv
423.121 42.3362 423.48 42.0002 423.77 41.5472 cv
424.051 41.0933 424.199 40.5082 424.211 39.7892 cv
424.195 38.8943 423.938 38.1793 423.438 37.6403 cv
422.934 37.1053 422.258 36.8322 421.414 36.8163 cv
cp
421.391 37.6053 mo
421.801 37.6172 422.137 37.7383 422.395 37.9652 cv
422.648 38.1953 422.836 38.4763 422.957 38.8123 cv
423.07 39.1523 423.129 39.4922 423.133 39.8282 cv
423.117 40.4962 422.949 41.0352 422.625 41.4453 cv
422.297 41.8633 421.875 42.0742 421.367 42.0822 cv
420.836 42.0703 420.414 41.8593 420.102 41.4453 cv
419.781 41.0352 419.621 40.5042 419.613 39.8513 cv
419.613 39.4843 419.676 39.1292 419.801 38.7852 cv
419.926 38.4492 420.117 38.1682 420.379 37.9453 cv
420.641 37.7303 420.977 37.6172 421.391 37.6053 cv
cp
f
425.543 42.7422 mo
426.574 42.7422 li
426.574 39.2502 li
426.57 39.1602 426.578 39.0703 426.594 38.9803 cv
426.605 38.8903 426.629 38.8083 426.66 38.7343 cv
426.746 38.4612 426.902 38.2183 427.133 38.0082 cv
427.359 37.8012 427.637 37.6913 427.969 37.6762 cv
428.367 37.6873 428.672 37.8362 428.875 38.1252 cv
429.078 38.4142 429.18 38.7932 429.18 39.2613 cv
429.18 42.7422 li
430.211 42.7422 li
430.211 39.1523 li
430.211 39.0583 430.219 38.9652 430.234 38.8752 cv
430.25 38.7892 430.27 38.7072 430.297 38.6252 cv
430.391 38.3672 430.547 38.1443 430.766 37.9612 cv
430.98 37.7813 431.242 37.6873 431.555 37.6762 cv
431.973 37.6833 432.289 37.8402 432.5 38.1483 cv
432.707 38.4612 432.813 38.9023 432.816 39.4652 cv
432.816 42.7422 li
433.848 42.7422 li
433.848 39.3322 li
433.836 38.6682 433.727 38.1523 433.523 37.7852 cv
433.313 37.4182 433.063 37.1642 432.773 37.0193 cv
432.477 36.8792 432.195 36.8123 431.93 36.8163 cv
431.652 36.8203 431.414 36.8553 431.215 36.9222 cv
431.008 36.9922 430.824 37.0902 430.656 37.2223 cv
430.531 37.3123 430.41 37.4222 430.301 37.5432 cv
430.184 37.6682 430.082 37.8123 429.996 37.9763 cv
429.973 37.9763 li
429.84 37.6332 429.633 37.3513 429.352 37.1403 cv
429.066 36.9293 428.73 36.8242 428.34 36.8163 cv
427.855 36.8282 427.469 36.9333 427.176 37.1403 cv
426.883 37.3513 426.656 37.6013 426.504 37.8832 cv
426.469 37.8832 li
426.418 36.9333 li
425.496 36.9333 li
425.504 37.1762 425.516 37.4222 425.527 37.6722 cv
425.535 37.9293 425.539 38.2072 425.543 38.5082 cv
cp
f
435.551 45.1172 mo
436.594 45.1172 li
436.594 41.9652 li
436.617 41.9652 li
436.793 42.2582 437.039 42.4803 437.355 42.6363 cv
437.664 42.7932 438.016 42.8712 438.406 42.8752 cv
438.867 42.8712 439.301 42.7582 439.703 42.5313 cv
440.102 42.3012 440.426 41.9572 440.676 41.4922 cv
440.922 41.0313 441.047 40.4492 441.059 39.7542 cv
441.043 38.8672 440.809 38.1602 440.355 37.6292 cv
439.895 37.1013 439.309 36.8322 438.59 36.8163 cv
438.113 36.8203 437.699 36.9142 437.355 37.1053 cv
437.008 37.3012 436.73 37.5782 436.523 37.9293 cv
436.5 37.9293 li
436.438 36.9333 li
435.504 36.9333 li
435.512 37.2152 435.523 37.5082 435.535 37.8123 cv
435.543 38.1252 435.547 38.4652 435.551 38.8322 cv
cp
436.594 39.3712 mo
436.594 39.3083 436.602 39.2383 436.617 39.1602 cv
436.629 39.0902 436.648 39.0193 436.668 38.9492 cv
436.77 38.5512 436.969 38.2343 437.266 38.0042 cv
437.563 37.7773 437.895 37.6602 438.266 37.6523 cv
438.824 37.6722 439.25 37.8863 439.547 38.2972 cv
439.836 38.7072 439.984 39.2072 439.992 39.8012 cv
439.984 40.4803 439.832 41.0233 439.527 41.4262 cv
439.223 41.8322 438.789 42.0392 438.227 42.0472 cv
437.84 42.0432 437.504 41.9293 437.223 41.7032 cv
436.938 41.4843 436.746 41.1833 436.645 40.8083 cv
436.625 40.7462 436.609 40.6793 436.605 40.6053 cv
436.594 40.5352 436.59 40.4612 436.594 40.3792 cv
cp
f
442.535 42.8752 mo
442.754 42.8672 442.934 42.7972 443.066 42.6602 cv
443.195 42.5193 443.262 42.3402 443.266 42.1172 cv
443.262 41.8943 443.195 41.7152 443.07 41.5742 cv
442.941 41.4413 442.77 41.3712 442.559 41.3633 cv
442.34 41.3712 442.168 41.4413 442.039 41.5822 cv
441.906 41.7223 441.84 41.9023 441.84 42.1172 cv
441.84 42.3402 441.902 42.5193 442.031 42.6602 cv
442.156 42.7972 442.324 42.8672 442.535 42.8752 cv
cp
f
270.617 253.59 mo
275.824 247.301 li
270.879 241.062 li
270.879 240.965 li
279.063 240.965 li
279.063 239.238 li
268.172 239.238 li
268.172 240.629 li
273.496 247.375 li
267.883 254.168 li
267.883 255.414 li
279.832 255.414 li
279.832 253.664 li
270.617 253.664 li
cp
f
270.617 108.246 mo
275.824 101.957 li
270.879 95.7182 li
270.879 95.6212 li
279.063 95.6212 li
279.063 93.8943 li
268.172 93.8943 li
268.172 95.2852 li
273.496 102.031 li
267.883 108.824 li
267.883 110.07 li
279.832 110.07 li
279.832 108.32 li
270.617 108.32 li
cp
f
239.379 164.742 mo
240.422 164.742 li
240.422 161.238 li
241.406 161.238 li
241.871 161.25 242.23 161.379 242.484 161.617 cv
242.738 161.863 242.922 162.258 243.039 162.808 cv
243.145 163.316 243.242 163.738 243.332 164.066 cv
243.418 164.398 243.496 164.621 243.566 164.742 cv
244.645 164.742 li
244.559 164.586 244.465 164.32 244.367 163.937 cv
244.266 163.562 244.152 163.09 244.02 162.519 cv
243.926 162.101 243.781 161.75 243.59 161.472 cv
243.395 161.195 243.145 161.004 242.844 160.89 cv
242.844 160.855 li
243.273 160.715 243.633 160.468 243.914 160.117 cv
244.195 159.773 244.34 159.332 244.355 158.801 cv
244.348 158.48 244.293 158.191 244.184 157.926 cv
244.074 157.664 243.918 157.437 243.723 157.254 cv
243.473 157.035 243.16 156.871 242.785 156.758 cv
242.402 156.652 241.934 156.597 241.379 156.593 cv
241.016 156.597 240.66 156.613 240.309 156.644 cv
239.953 156.676 239.645 156.715 239.379 156.761 cv
cp
240.422 157.492 mo
240.508 157.472 240.637 157.453 240.813 157.433 cv
240.984 157.422 241.199 157.414 241.453 157.41 cv
242.012 157.41 242.457 157.527 242.797 157.769 cv
243.129 158.011 243.301 158.394 243.313 158.91 cv
243.305 159.383 243.141 159.754 242.82 160.027 cv
242.492 160.304 242.051 160.445 241.488 160.445 cv
240.422 160.445 li
cp
f
250.512 162.031 mo
250.523 161.972 250.531 161.902 250.539 161.82 cv
250.543 161.742 250.547 161.648 250.547 161.539 cv
250.551 161.172 250.484 160.777 250.348 160.359 cv
250.211 159.941 249.965 159.586 249.617 159.285 cv
249.266 158.988 248.777 158.832 248.148 158.816 cv
247.582 158.824 247.098 158.961 246.691 159.234 cv
246.285 159.508 245.973 159.879 245.754 160.347 cv
245.535 160.816 245.426 161.347 245.426 161.933 cv
245.434 162.828 245.684 163.535 246.184 164.062 cv
246.676 164.59 247.375 164.859 248.281 164.875 cv
248.738 164.867 249.133 164.824 249.457 164.75 cv
249.781 164.672 250.035 164.593 250.223 164.504 cv
250.031 163.746 li
249.844 163.832 249.621 163.906 249.367 163.961 cv
249.109 164.019 248.797 164.047 248.426 164.047 cv
247.875 164.054 247.41 163.898 247.035 163.574 cv
246.656 163.258 246.457 162.742 246.434 162.031 cv
cp
246.445 161.273 mo
246.469 161.023 246.539 160.769 246.66 160.508 cv
246.777 160.25 246.953 160.031 247.184 159.851 cv
247.41 159.676 247.703 159.582 248.066 159.57 cv
248.453 159.582 248.754 159.679 248.973 159.867 cv
249.184 160.054 249.332 160.281 249.418 160.539 cv
249.496 160.804 249.535 161.047 249.531 161.273 cv
cp
f
256.824 160.519 mo
256.82 160.176 256.824 159.875 256.832 159.621 cv
256.836 159.367 256.848 159.14 256.871 158.933 cv
255.938 158.933 li
255.902 159.808 li
255.879 159.808 li
255.746 159.558 255.535 159.336 255.25 159.133 cv
254.957 158.937 254.563 158.832 254.063 158.816 cv
253.605 158.82 253.18 158.937 252.785 159.176 cv
252.387 159.414 252.063 159.761 251.82 160.215 cv
251.57 160.672 251.445 161.23 251.438 161.886 cv
251.449 162.711 251.68 163.383 252.133 163.906 cv
252.582 164.433 253.176 164.703 253.91 164.718 cv
254.359 164.711 254.738 164.617 255.051 164.433 cv
255.359 164.254 255.594 164.023 255.758 163.746 cv
255.781 163.746 li
255.781 164.383 li
255.766 165.113 255.59 165.633 255.25 165.953 cv
254.902 166.269 254.457 166.426 253.91 166.422 cv
253.543 166.418 253.215 166.371 252.93 166.281 cv
252.637 166.191 252.395 166.082 252.203 165.953 cv
251.941 166.769 li
252.18 166.926 252.473 167.043 252.82 167.125 cv
253.164 167.207 253.512 167.25 253.871 167.25 cv
254.242 167.25 254.617 167.195 254.992 167.093 cv
255.363 166.984 255.699 166.804 255.996 166.554 cv
256.27 166.297 256.477 165.957 256.617 165.531 cv
256.754 165.101 256.82 164.558 256.824 163.89 cv
cp
255.77 162.269 mo
255.766 162.363 255.762 162.461 255.75 162.554 cv
255.734 162.656 255.711 162.75 255.684 162.836 cv
255.57 163.179 255.383 163.441 255.121 163.629 cv
254.855 163.816 254.555 163.914 254.219 163.914 cv
253.652 163.902 253.227 163.695 252.938 163.301 cv
252.648 162.906 252.504 162.418 252.504 161.828 cv
252.512 161.148 252.672 160.613 252.988 160.222 cv
253.301 159.84 253.715 159.64 254.234 159.629 cv
254.621 159.64 254.941 159.75 255.191 159.961 cv
255.438 160.172 255.609 160.437 255.711 160.758 cv
255.73 160.824 255.746 160.898 255.758 160.972 cv
255.762 161.054 255.766 161.136 255.77 161.226 cv
cp
f
259.547 164.742 mo
259.547 158.933 li
258.492 158.933 li
258.492 164.742 li
cp
259.02 156.656 mo
258.816 156.664 258.66 156.73 258.543 156.851 cv
258.426 156.976 258.363 157.129 258.363 157.312 cv
258.363 157.5 258.422 157.656 258.535 157.773 cv
258.648 157.898 258.801 157.961 258.996 157.961 cv
259.207 157.961 259.371 157.898 259.488 157.773 cv
259.602 157.656 259.664 157.5 259.668 157.312 cv
259.664 157.125 259.602 156.968 259.488 156.843 cv
259.367 156.722 259.211 156.66 259.02 156.656 cv
cp
f
260.906 164.465 mo
261.109 164.59 261.352 164.683 261.633 164.758 cv
261.914 164.832 262.215 164.871 262.539 164.875 cv
263.219 164.863 263.746 164.703 264.125 164.386 cv
264.496 164.07 264.688 163.648 264.695 163.121 cv
264.691 162.695 264.563 162.343 264.309 162.066 cv
264.047 161.793 263.668 161.566 263.176 161.383 cv
262.793 161.242 262.516 161.097 262.344 160.953 cv
262.164 160.808 262.078 160.621 262.082 160.386 cv
262.078 160.168 262.16 159.98 262.324 159.828 cv
262.488 159.679 262.727 159.601 263.043 159.593 cv
263.313 159.601 263.551 159.64 263.754 159.715 cv
263.957 159.789 264.113 159.867 264.23 159.941 cv
264.48 159.176 li
264.32 159.074 264.117 158.988 263.875 158.918 cv
263.629 158.851 263.359 158.82 263.066 158.816 cv
262.438 158.832 261.949 158.996 261.598 159.316 cv
261.246 159.636 261.066 160.039 261.063 160.519 cv
261.059 160.871 261.184 161.183 261.438 161.457 cv
261.691 161.734 262.082 161.968 262.609 162.164 cv
262.988 162.304 263.262 162.453 263.43 162.609 cv
263.598 162.769 263.68 162.972 263.68 163.218 cv
263.676 163.468 263.586 163.676 263.402 163.836 cv
263.219 163.996 262.938 164.078 262.563 164.082 cv
262.289 164.078 262.027 164.035 261.781 163.953 cv
261.531 163.871 261.324 163.777 261.16 163.676 cv
cp
f
266.293 157.855 mo
266.293 158.933 li
265.391 158.933 li
265.391 159.738 li
266.293 159.738 li
266.293 162.914 li
266.289 163.254 266.32 163.551 266.387 163.804 cv
266.449 164.062 266.555 164.273 266.699 164.429 cv
266.824 164.574 266.984 164.679 267.18 164.754 cv
267.371 164.832 267.59 164.871 267.84 164.875 cv
268.039 164.871 268.219 164.855 268.383 164.828 cv
268.539 164.797 268.672 164.765 268.773 164.73 cv
268.727 163.926 li
268.648 163.957 268.563 163.976 268.469 163.984 cv
268.375 164 268.254 164.004 268.113 164 cv
267.82 164 267.617 163.902 267.496 163.707 cv
267.375 163.515 267.316 163.238 267.324 162.871 cv
267.324 159.738 li
268.836 159.738 li
268.836 158.933 li
267.324 158.933 li
267.324 157.543 li
cp
f
274.617 162.031 mo
274.629 161.972 274.637 161.902 274.645 161.82 cv
274.648 161.742 274.652 161.648 274.652 161.539 cv
274.656 161.172 274.59 160.777 274.453 160.359 cv
274.316 159.941 274.07 159.586 273.723 159.285 cv
273.371 158.988 272.883 158.832 272.254 158.816 cv
271.688 158.824 271.203 158.961 270.797 159.234 cv
270.391 159.508 270.078 159.879 269.859 160.347 cv
269.641 160.816 269.531 161.347 269.531 161.933 cv
269.539 162.828 269.789 163.535 270.289 164.062 cv
270.781 164.59 271.48 164.859 272.387 164.875 cv
272.844 164.867 273.238 164.824 273.563 164.75 cv
273.887 164.672 274.141 164.593 274.328 164.504 cv
274.137 163.746 li
273.949 163.832 273.727 163.906 273.473 163.961 cv
273.215 164.019 272.902 164.047 272.531 164.047 cv
271.98 164.054 271.516 163.898 271.141 163.574 cv
270.762 163.258 270.563 162.742 270.539 162.031 cv
cp
270.551 161.273 mo
270.574 161.023 270.645 160.769 270.766 160.508 cv
270.883 160.25 271.059 160.031 271.289 159.851 cv
271.516 159.676 271.809 159.582 272.172 159.57 cv
272.559 159.582 272.859 159.679 273.078 159.867 cv
273.289 160.054 273.438 160.281 273.523 160.539 cv
273.602 160.804 273.641 161.047 273.637 161.273 cv
cp
f
275.965 164.742 mo
277.02 164.742 li
277.02 161.644 li
277.016 161.562 277.02 161.476 277.027 161.39 cv
277.031 161.304 277.043 161.226 277.059 161.152 cv
277.133 160.754 277.293 160.433 277.539 160.187 cv
277.785 159.945 278.094 159.816 278.473 159.808 cv
278.539 159.808 278.605 159.812 278.664 159.812 cv
278.723 159.82 278.777 159.824 278.832 159.832 cv
278.832 158.84 li
278.781 158.836 278.734 158.828 278.691 158.824 cv
278.645 158.82 278.598 158.82 278.547 158.816 cv
278.184 158.824 277.855 158.937 277.566 159.16 cv
277.273 159.386 277.059 159.695 276.926 160.086 cv
276.891 160.086 li
276.84 158.933 li
275.918 158.933 li
275.934 159.207 275.949 159.492 275.957 159.789 cv
275.965 160.09 275.965 160.406 275.965 160.746 cv
cp
f
239.379 309.207 mo
240.422 309.207 li
240.422 305.703 li
241.406 305.703 li
241.871 305.715 242.23 305.843 242.484 306.082 cv
242.738 306.328 242.922 306.722 243.039 307.273 cv
243.145 307.781 243.242 308.203 243.332 308.531 cv
243.418 308.863 243.496 309.086 243.566 309.207 cv
244.645 309.207 li
244.559 309.051 244.465 308.785 244.367 308.402 cv
244.266 308.027 244.152 307.554 244.02 306.984 cv
243.926 306.566 243.781 306.215 243.59 305.937 cv
243.395 305.66 243.145 305.468 242.844 305.355 cv
242.844 305.32 li
243.273 305.179 243.633 304.933 243.914 304.582 cv
244.195 304.238 244.34 303.797 244.355 303.265 cv
244.348 302.945 244.293 302.656 244.184 302.39 cv
244.074 302.129 243.918 301.902 243.723 301.718 cv
243.473 301.5 243.16 301.336 242.785 301.222 cv
242.402 301.117 241.934 301.062 241.379 301.058 cv
241.016 301.062 240.66 301.078 240.309 301.109 cv
239.953 301.14 239.645 301.179 239.379 301.226 cv
cp
240.422 301.957 mo
240.508 301.937 240.637 301.918 240.813 301.898 cv
240.984 301.886 241.199 301.879 241.453 301.875 cv
242.012 301.875 242.457 301.992 242.797 302.234 cv
243.129 302.476 243.301 302.859 243.313 303.375 cv
243.305 303.847 243.141 304.218 242.82 304.492 cv
242.492 304.769 242.051 304.91 241.488 304.91 cv
240.422 304.91 li
cp
f
250.512 306.496 mo
250.523 306.437 250.531 306.367 250.539 306.285 cv
250.543 306.207 250.547 306.113 250.547 306.004 cv
250.551 305.636 250.484 305.242 250.348 304.824 cv
250.211 304.406 249.965 304.051 249.617 303.75 cv
249.266 303.453 248.777 303.297 248.148 303.281 cv
247.582 303.289 247.098 303.426 246.691 303.699 cv
246.285 303.972 245.973 304.343 245.754 304.812 cv
245.535 305.281 245.426 305.812 245.426 306.398 cv
245.434 307.293 245.684 308 246.184 308.527 cv
246.676 309.054 247.375 309.324 248.281 309.34 cv
248.738 309.332 249.133 309.289 249.457 309.215 cv
249.781 309.136 250.035 309.058 250.223 308.968 cv
250.031 308.211 li
249.844 308.297 249.621 308.371 249.367 308.426 cv
249.109 308.484 248.797 308.511 248.426 308.511 cv
247.875 308.519 247.41 308.363 247.035 308.039 cv
246.656 307.722 246.457 307.207 246.434 306.496 cv
cp
246.445 305.738 mo
246.469 305.488 246.539 305.234 246.66 304.972 cv
246.777 304.715 246.953 304.496 247.184 304.316 cv
247.41 304.14 247.703 304.047 248.066 304.035 cv
248.453 304.047 248.754 304.144 248.973 304.332 cv
249.184 304.519 249.332 304.746 249.418 305.004 cv
249.496 305.269 249.535 305.511 249.531 305.738 cv
cp
f
256.824 304.984 mo
256.82 304.64 256.824 304.34 256.832 304.086 cv
256.836 303.832 256.848 303.605 256.871 303.398 cv
255.938 303.398 li
255.902 304.273 li
255.879 304.273 li
255.746 304.023 255.535 303.801 255.25 303.597 cv
254.957 303.402 254.563 303.297 254.063 303.281 cv
253.605 303.285 253.18 303.402 252.785 303.64 cv
252.387 303.879 252.063 304.226 251.82 304.679 cv
251.57 305.136 251.445 305.695 251.438 306.351 cv
251.449 307.176 251.68 307.847 252.133 308.371 cv
252.582 308.898 253.176 309.168 253.91 309.183 cv
254.359 309.176 254.738 309.082 255.051 308.898 cv
255.359 308.718 255.594 308.488 255.758 308.211 cv
255.781 308.211 li
255.781 308.847 li
255.766 309.578 255.59 310.097 255.25 310.418 cv
254.902 310.734 254.457 310.89 253.91 310.886 cv
253.543 310.883 253.215 310.836 252.93 310.746 cv
252.637 310.656 252.395 310.547 252.203 310.418 cv
251.941 311.234 li
252.18 311.39 252.473 311.508 252.82 311.59 cv
253.164 311.672 253.512 311.715 253.871 311.715 cv
254.242 311.715 254.617 311.66 254.992 311.558 cv
255.363 311.449 255.699 311.269 255.996 311.019 cv
256.27 310.761 256.477 310.422 256.617 309.996 cv
256.754 309.566 256.82 309.023 256.824 308.355 cv
cp
255.77 306.734 mo
255.766 306.828 255.762 306.926 255.75 307.019 cv
255.734 307.121 255.711 307.215 255.684 307.301 cv
255.57 307.644 255.383 307.906 255.121 308.093 cv
254.855 308.281 254.555 308.379 254.219 308.379 cv
253.652 308.367 253.227 308.16 252.938 307.765 cv
252.648 307.371 252.504 306.883 252.504 306.293 cv
252.512 305.613 252.672 305.078 252.988 304.687 cv
253.301 304.304 253.715 304.105 254.234 304.093 cv
254.621 304.105 254.941 304.215 255.191 304.426 cv
255.438 304.636 255.609 304.902 255.711 305.222 cv
255.73 305.289 255.746 305.363 255.758 305.437 cv
255.762 305.519 255.766 305.601 255.77 305.691 cv
cp
f
259.547 309.207 mo
259.547 303.398 li
258.492 303.398 li
258.492 309.207 li
cp
259.02 301.121 mo
258.816 301.129 258.66 301.195 258.543 301.316 cv
258.426 301.441 258.363 301.593 258.363 301.777 cv
258.363 301.965 258.422 302.121 258.535 302.238 cv
258.648 302.363 258.801 302.426 258.996 302.426 cv
259.207 302.426 259.371 302.363 259.488 302.238 cv
259.602 302.121 259.664 301.965 259.668 301.777 cv
259.664 301.59 259.602 301.433 259.488 301.308 cv
259.367 301.187 259.211 301.125 259.02 301.121 cv
cp
f
260.906 308.929 mo
261.109 309.054 261.352 309.148 261.633 309.222 cv
261.914 309.297 262.215 309.336 262.539 309.34 cv
263.219 309.328 263.746 309.168 264.125 308.851 cv
264.496 308.535 264.688 308.113 264.695 307.586 cv
264.691 307.16 264.563 306.808 264.309 306.531 cv
264.047 306.258 263.668 306.031 263.176 305.847 cv
262.793 305.707 262.516 305.562 262.344 305.418 cv
262.164 305.273 262.078 305.086 262.082 304.851 cv
262.078 304.633 262.16 304.445 262.324 304.293 cv
262.488 304.144 262.727 304.066 263.043 304.058 cv
263.313 304.066 263.551 304.105 263.754 304.179 cv
263.957 304.254 264.113 304.332 264.23 304.406 cv
264.48 303.64 li
264.32 303.539 264.117 303.453 263.875 303.383 cv
263.629 303.316 263.359 303.285 263.066 303.281 cv
262.438 303.297 261.949 303.461 261.598 303.781 cv
261.246 304.101 261.066 304.504 261.063 304.984 cv
261.059 305.336 261.184 305.648 261.438 305.922 cv
261.691 306.199 262.082 306.433 262.609 306.629 cv
262.988 306.769 263.262 306.918 263.43 307.074 cv
263.598 307.234 263.68 307.437 263.68 307.683 cv
263.676 307.933 263.586 308.14 263.402 308.301 cv
263.219 308.461 262.938 308.543 262.563 308.547 cv
262.289 308.543 262.027 308.5 261.781 308.418 cv
261.531 308.336 261.324 308.242 261.16 308.14 cv
cp
f
266.293 302.32 mo
266.293 303.398 li
265.391 303.398 li
265.391 304.203 li
266.293 304.203 li
266.293 307.379 li
266.289 307.718 266.32 308.015 266.387 308.269 cv
266.449 308.527 266.555 308.738 266.699 308.894 cv
266.824 309.039 266.984 309.144 267.18 309.218 cv
267.371 309.297 267.59 309.336 267.84 309.34 cv
268.039 309.336 268.219 309.32 268.383 309.293 cv
268.539 309.261 268.672 309.23 268.773 309.195 cv
268.727 308.39 li
268.648 308.422 268.563 308.441 268.469 308.449 cv
268.375 308.465 268.254 308.468 268.113 308.465 cv
267.82 308.465 267.617 308.367 267.496 308.172 cv
267.375 307.98 267.316 307.703 267.324 307.336 cv
267.324 304.203 li
268.836 304.203 li
268.836 303.398 li
267.324 303.398 li
267.324 302.008 li
cp
f
274.617 306.496 mo
274.629 306.437 274.637 306.367 274.645 306.285 cv
274.648 306.207 274.652 306.113 274.652 306.004 cv
274.656 305.636 274.59 305.242 274.453 304.824 cv
274.316 304.406 274.07 304.051 273.723 303.75 cv
273.371 303.453 272.883 303.297 272.254 303.281 cv
271.688 303.289 271.203 303.426 270.797 303.699 cv
270.391 303.972 270.078 304.343 269.859 304.812 cv
269.641 305.281 269.531 305.812 269.531 306.398 cv
269.539 307.293 269.789 308 270.289 308.527 cv
270.781 309.054 271.48 309.324 272.387 309.34 cv
272.844 309.332 273.238 309.289 273.563 309.215 cv
273.887 309.136 274.141 309.058 274.328 308.968 cv
274.137 308.211 li
273.949 308.297 273.727 308.371 273.473 308.426 cv
273.215 308.484 272.902 308.511 272.531 308.511 cv
271.98 308.519 271.516 308.363 271.141 308.039 cv
270.762 307.722 270.563 307.207 270.539 306.496 cv
cp
270.551 305.738 mo
270.574 305.488 270.645 305.234 270.766 304.972 cv
270.883 304.715 271.059 304.496 271.289 304.316 cv
271.516 304.14 271.809 304.047 272.172 304.035 cv
272.559 304.047 272.859 304.144 273.078 304.332 cv
273.289 304.519 273.438 304.746 273.523 305.004 cv
273.602 305.269 273.641 305.511 273.637 305.738 cv
cp
f
275.965 309.207 mo
277.02 309.207 li
277.02 306.109 li
277.016 306.027 277.02 305.941 277.027 305.855 cv
277.031 305.769 277.043 305.691 277.059 305.617 cv
277.133 305.218 277.293 304.898 277.539 304.652 cv
277.785 304.41 278.094 304.281 278.473 304.273 cv
278.539 304.273 278.605 304.277 278.664 304.277 cv
278.723 304.285 278.777 304.289 278.832 304.297 cv
278.832 303.304 li
278.781 303.301 278.734 303.293 278.691 303.289 cv
278.645 303.285 278.598 303.285 278.547 303.281 cv
278.184 303.289 277.855 303.402 277.566 303.625 cv
277.273 303.851 277.059 304.16 276.926 304.551 cv
276.891 304.551 li
276.84 303.398 li
275.918 303.398 li
275.934 303.672 275.949 303.957 275.957 304.254 cv
275.965 304.554 275.965 304.871 275.965 305.211 cv
cp
f
0.004 46.4572 mo
1.047 46.4572 li
1.047 42.9532 li
2.031 42.9532 li
2.496 42.9652 2.855 43.0933 3.109 43.3322 cv
3.363 43.5782 3.547 43.9723 3.664 44.5233 cv
3.77 45.0313 3.867 45.4532 3.957 45.7813 cv
4.043 46.1133 4.121 46.3362 4.191 46.4572 cv
5.27 46.4572 li
5.184 46.3012 5.09 46.0352 4.992 45.6523 cv
4.891 45.2773 4.777 44.8043 4.645 44.2343 cv
4.551 43.8163 4.406 43.4652 4.215 43.1873 cv
4.02 42.9102 3.77 42.7183 3.469 42.6053 cv
3.469 42.5703 li
3.898 42.4293 4.258 42.1833 4.539 41.8322 cv
4.82 41.4883 4.965 41.0472 4.98 40.5153 cv
4.973 40.1953 4.918 39.9063 4.809 39.6403 cv
4.699 39.3792 4.543 39.1523 4.348 38.9683 cv
4.098 38.7502 3.785 38.5862 3.41 38.4723 cv
3.027 38.3672 2.559 38.3123 2.004 38.3083 cv
1.641 38.3123 1.285 38.3282 0.934 38.3593 cv
0.578 38.3903 0.27 38.4293 0.004 38.4763 cv
cp
1.047 39.2072 mo
1.133 39.1873 1.262 39.1682 1.438 39.1483 cv
1.609 39.1363 1.824 39.1292 2.078 39.1252 cv
2.637 39.1252 3.082 39.2422 3.422 39.4843 cv
3.754 39.7263 3.926 40.1093 3.938 40.6252 cv
3.93 41.0973 3.766 41.4683 3.445 41.7422 cv
3.117 42.0193 2.676 42.1602 2.113 42.1602 cv
1.047 42.1602 li
cp
f
5.734 40.6483 mo
7.703 43.4922 li
5.641 46.4572 li
6.805 46.4572 li
7.645 45.1483 li
7.754 44.9803 7.859 44.8123 7.961 44.6443 cv
8.059 44.4843 8.156 44.3163 8.254 44.1403 cv
8.277 44.1403 li
8.375 44.3203 8.477 44.4883 8.582 44.6523 cv
8.68 44.8163 8.785 44.9843 8.902 45.1483 cv
9.766 46.4572 li
10.953 46.4572 li
8.926 43.4572 li
10.906 40.6483 li
9.754 40.6483 li
8.949 41.8863 li
8.844 42.0432 8.746 42.1992 8.652 42.3513 cv
8.555 42.5082 8.457 42.6682 8.363 42.8322 cv
8.34 42.8322 li
8.238 42.6762 8.145 42.5193 8.051 42.3672 cv
7.957 42.2152 7.852 42.0583 7.738 41.8983 cv
6.91 40.6483 li
cp
f
11.102 47.3593 mo
11.102 47.9572 li
17.102 47.9572 li
17.102 47.3593 li
cp
f
19.031 46.4572 mo
19.031 40.6483 li
17.977 40.6483 li
17.977 46.4572 li
cp
18.504 38.3712 mo
18.301 38.3792 18.145 38.4453 18.027 38.5663 cv
17.91 38.6913 17.848 38.8433 17.848 39.0273 cv
17.848 39.2152 17.906 39.3712 18.02 39.4883 cv
18.133 39.6133 18.285 39.6762 18.48 39.6762 cv
18.691 39.6762 18.855 39.6133 18.973 39.4883 cv
19.086 39.3712 19.148 39.2152 19.152 39.0273 cv
19.148 38.8402 19.086 38.6833 18.973 38.5583 cv
18.852 38.4373 18.695 38.3752 18.504 38.3712 cv
cp
f
20.781 46.4572 mo
21.836 46.4572 li
21.836 42.9652 li
21.832 42.8752 21.84 42.7892 21.855 42.7032 cv
21.867 42.6212 21.887 42.5432 21.91 42.4723 cv
22.008 42.1722 22.18 41.9222 22.434 41.7152 cv
22.68 41.5113 22.98 41.4023 23.328 41.3903 cv
23.816 41.4063 24.164 41.5742 24.371 41.8983 cv
24.574 42.2263 24.672 42.6332 24.672 43.1093 cv
24.672 46.4572 li
25.727 46.4572 li
25.727 43.0002 li
25.711 42.3433 25.594 41.8362 25.371 41.4763 cv
25.145 41.1172 24.875 40.8672 24.563 40.7263 cv
24.246 40.5902 23.949 40.5273 23.676 40.5313 cv
23.188 40.5472 22.785 40.6563 22.461 40.8672 cv
22.133 41.0822 21.895 41.3322 21.754 41.6093 cv
21.73 41.6093 li
21.668 40.6483 li
20.734 40.6483 li
20.75 40.8903 20.766 41.1363 20.773 41.3863 cv
20.781 41.6443 20.781 41.9222 20.781 42.2223 cv
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
148.238 62.926 mo
126.746 85.766 li
147.512 86.246 mo
126.746 62.926 li
154.492 74.344 mo
154.492 82.484 146.883 89.082 137.492 89.082 cv
128.102 89.082 120.492 82.484 120.492 74.344 cv
120.492 66.207 128.102 59.609 137.492 59.609 cv
146.883 59.609 154.492 66.207 154.492 74.344 cv
cp
@
108.09 97.027 mo
125.965 97.027 li
@
154.492 74.348 mo
254.555 74.348 li
@
260.59 74.348 mo
257.75 75.398 254.227 77.199 252.043 79.102 cv
253.762 74.348 li
252.043 69.59 li
254.227 71.496 257.75 73.293 260.59 74.348 cv
f
16.922 52.055 mo
125.965 52.055 li
@
125.965 52.055 mo
128.387 54.812 li
@
133.043 60.121 mo
123.426 55.324 li
128.039 54.414 li
129.535 49.961 li
cp
f
125.965 97.027 mo
128.512 93.984 li
@
133.043 88.57 mo
129.773 98.809 li
128.172 94.391 li
123.539 93.59 li
cp
f
288.09 75.312 mo
260.59 60.305 li
288.09 75.312 mo
288.09 127.559 li
260.59 141.805 mo
288.09 127.559 li
260.59 60.305 mo
260.59 141.805 li
@
162.59 74.348 mo
162.59 101.824 li
@
180.09 88.344 mo
233.59 88.344 li
233.59 114.449 li
180.09 114.449 li
cp
@
330.129 250.332 mo
330.391 250.324 330.598 250.242 330.75 250.082 cv
330.898 249.922 330.977 249.711 330.984 249.453 cv
330.977 249.191 330.898 248.98 330.754 248.82 cv
330.602 248.66 330.402 248.578 330.156 248.57 cv
329.906 248.578 329.707 248.664 329.555 248.824 cv
329.398 248.988 329.32 249.195 329.32 249.453 cv
329.32 249.711 329.395 249.922 329.543 250.082 cv
329.688 250.242 329.883 250.324 330.129 250.332 cv
cp
f
335.379 250.726 mo
339.297 240.578 li
338.332 240.578 li
334.441 250.726 li
cp
f
345.695 250.179 mo
345.695 249.16 li
341.625 249.16 li
341.625 249.129 li
342.34 248.457 li
343.309 247.551 344.07 246.718 344.625 245.953 cv
345.18 245.191 345.461 244.394 345.473 243.57 cv
345.473 243.129 345.379 242.711 345.188 242.308 cv
344.992 241.91 344.688 241.582 344.281 241.324 cv
343.867 241.07 343.336 240.937 342.688 240.926 cv
342.164 240.937 341.688 241.027 341.25 241.195 cv
340.813 241.371 340.438 241.586 340.125 241.847 cv
340.52 242.718 li
340.727 242.535 341 242.359 341.332 242.199 cv
341.66 242.043 342.031 241.961 342.449 241.945 cv
343.117 241.968 343.586 242.148 343.855 242.492 cv
344.121 242.836 344.25 243.25 344.242 243.726 cv
344.242 244.179 344.121 244.629 343.879 245.078 cv
343.633 245.531 343.262 246.031 342.766 246.574 cv
342.262 247.121 341.625 247.758 340.855 248.488 cv
339.891 249.426 li
339.891 250.179 li
cp
f
331.457 94.6832 mo
331.457 108.683 li
332.395 108.683 li
332.395 94.6832 li
cp
f
338.109 105.336 mo
338.371 105.328 338.578 105.246 338.73 105.086 cv
338.879 104.926 338.957 104.715 338.965 104.457 cv
338.957 104.195 338.879 103.984 338.734 103.824 cv
338.582 103.664 338.383 103.582 338.137 103.574 cv
337.887 103.582 337.688 103.668 337.535 103.828 cv
337.379 103.992 337.301 104.199 337.301 104.457 cv
337.301 104.715 337.375 104.926 337.523 105.086 cv
337.668 105.246 337.863 105.328 338.109 105.336 cv
cp
f
343.637 94.6832 mo
343.637 108.683 li
344.574 108.683 li
344.574 94.6832 li
cp
f
324.59 88.344 mo
351.34 88.344 li
351.34 114.449 li
324.59 114.449 li
cp
@
323.965 233.172 mo
350.715 233.172 li
350.715 259.277 li
323.965 259.277 li
cp
@
185.754 250.156 mo
186.012 250.183 186.297 250.203 186.613 250.222 cv
186.922 250.238 187.266 250.25 187.648 250.25 cv
188.434 250.25 189.133 250.152 189.742 249.953 cv
190.348 249.758 190.848 249.468 191.238 249.09 cv
191.609 248.715 191.895 248.265 192.094 247.734 cv
192.293 247.207 192.395 246.609 192.398 245.945 cv
192.395 245.293 192.293 244.726 192.098 244.25 cv
191.898 243.773 191.617 243.371 191.25 243.039 cv
190.895 242.715 190.445 242.465 189.906 242.293 cv
189.363 242.121 188.719 242.035 187.973 242.031 cv
187.555 242.035 187.16 242.051 186.789 242.082 cv
186.414 242.113 186.07 242.156 185.754 242.211 cv
cp
186.797 242.968 mo
186.934 242.941 187.102 242.914 187.309 242.89 cv
187.508 242.871 187.746 242.863 188.02 242.859 cv
189.121 242.875 189.945 243.156 190.492 243.703 cv
191.035 244.258 191.305 245.015 191.297 245.98 cv
191.293 247.082 190.996 247.926 190.414 248.515 cv
189.828 249.109 188.977 249.41 187.852 249.414 cv
187.645 249.418 187.449 249.414 187.27 249.402 cv
187.086 249.398 186.93 249.386 186.797 249.363 cv
cp
f
198.422 247.468 mo
198.434 247.41 198.441 247.34 198.449 247.258 cv
198.453 247.179 198.457 247.086 198.457 246.976 cv
198.461 246.609 198.395 246.215 198.258 245.797 cv
198.121 245.379 197.875 245.023 197.527 244.722 cv
197.176 244.426 196.688 244.269 196.059 244.254 cv
195.492 244.261 195.008 244.398 194.602 244.672 cv
194.195 244.945 193.883 245.316 193.664 245.785 cv
193.445 246.254 193.336 246.785 193.336 247.371 cv
193.344 248.265 193.594 248.972 194.094 249.5 cv
194.586 250.027 195.285 250.297 196.191 250.312 cv
196.648 250.304 197.043 250.261 197.367 250.187 cv
197.691 250.109 197.945 250.031 198.133 249.941 cv
197.941 249.183 li
197.754 249.269 197.531 249.343 197.277 249.398 cv
197.02 249.457 196.707 249.484 196.336 249.484 cv
195.785 249.492 195.32 249.336 194.945 249.011 cv
194.566 248.695 194.367 248.179 194.344 247.468 cv
cp
194.355 246.711 mo
194.379 246.461 194.449 246.207 194.57 245.945 cv
194.688 245.687 194.863 245.468 195.094 245.289 cv
195.32 245.113 195.613 245.019 195.977 245.008 cv
196.363 245.019 196.664 245.117 196.883 245.304 cv
197.094 245.492 197.242 245.718 197.328 245.976 cv
197.406 246.242 197.445 246.484 197.441 246.711 cv
cp
f
199.766 241.66 mo
200.821 241.66 li
200.821 250.18 li
199.766 250.18 li
cp
f
206.68 246.617 mo
206.684 246.226 206.621 245.851 206.5 245.492 cv
206.371 245.133 206.148 244.84 205.832 244.609 cv
205.508 244.383 205.055 244.265 204.469 244.254 cv
204.098 244.258 203.746 244.301 203.414 244.39 cv
203.082 244.484 202.793 244.605 202.551 244.754 cv
202.789 245.465 li
202.996 245.328 203.23 245.222 203.496 245.144 cv
203.758 245.074 204.031 245.035 204.316 245.031 cv
204.703 245.035 204.992 245.113 205.184 245.265 cv
205.371 245.422 205.496 245.601 205.555 245.808 cv
205.613 246.015 205.641 246.203 205.637 246.363 cv
205.637 246.484 li
204.508 246.484 203.645 246.668 203.047 247.035 cv
202.449 247.406 202.148 247.941 202.145 248.644 cv
202.145 249.082 202.293 249.465 202.59 249.793 cv
202.887 250.121 203.328 250.293 203.918 250.312 cv
204.332 250.301 204.691 250.215 204.996 250.051 cv
205.297 249.886 205.531 249.687 205.695 249.449 cv
205.73 249.449 li
205.816 250.179 li
206.762 250.179 li
206.73 249.98 206.707 249.761 206.695 249.523 cv
206.68 249.289 206.676 249.043 206.68 248.785 cv
cp
205.66 248.222 mo
205.66 248.273 205.656 248.328 205.648 248.383 cv
205.641 248.441 205.629 248.5 205.613 248.558 cv
205.527 248.82 205.363 249.047 205.121 249.234 cv
204.879 249.429 204.566 249.527 204.184 249.531 cv
203.91 249.535 203.68 249.453 203.492 249.289 cv
203.305 249.125 203.207 248.871 203.199 248.523 cv
203.207 248.152 203.332 247.871 203.578 247.679 cv
203.824 247.488 204.133 247.359 204.508 247.293 cv
204.879 247.23 205.266 247.203 205.66 247.215 cv
cp
f
207.52 244.371 mo
209.656 249.722 li
209.68 249.789 209.703 249.847 209.719 249.89 cv
209.73 249.937 209.734 249.972 209.738 250 cv
209.734 250.031 209.727 250.066 209.715 250.109 cv
209.695 250.152 209.676 250.199 209.656 250.25 cv
209.523 250.519 209.379 250.754 209.223 250.953 cv
209.063 251.152 208.91 251.308 208.766 251.426 cv
208.602 251.554 208.441 251.664 208.285 251.75 cv
208.121 251.836 207.977 251.898 207.844 251.941 cv
208.105 252.82 li
208.242 252.793 208.426 252.73 208.656 252.629 cv
208.883 252.527 209.133 252.367 209.402 252.148 cv
209.754 251.84 210.078 251.402 210.383 250.836 cv
210.684 250.269 211.023 249.496 211.395 248.511 cv
212.977 244.371 li
211.863 244.371 li
210.711 247.781 li
210.633 247.996 210.566 248.207 210.508 248.414 cv
210.445 248.625 210.391 248.816 210.34 248.992 cv
210.313 248.992 li
210.262 248.816 210.207 248.625 210.141 248.414 cv
210.07 248.207 210 248.004 209.93 247.804 cv
208.672 244.371 li
cp
f
220.598 242.261 mo
220.5 242.261 220.387 242.265 220.258 242.273 cv
220.129 242.285 219.984 242.301 219.828 242.32 cv
219.332 242.383 218.875 242.508 218.453 242.703 cv
218.031 242.898 217.656 243.156 217.332 243.472 cv
216.934 243.859 216.617 244.347 216.379 244.941 cv
216.141 245.535 216.02 246.218 216.016 246.988 cv
216.023 248.015 216.273 248.824 216.766 249.41 cv
217.258 250 217.922 250.297 218.762 250.312 cv
219.305 250.301 219.77 250.172 220.16 249.918 cv
220.543 249.664 220.84 249.328 221.051 248.906 cv
221.254 248.492 221.359 248.039 221.363 247.551 cv
221.352 246.789 221.133 246.179 220.707 245.726 cv
220.277 245.273 219.711 245.043 219.012 245.031 cv
218.574 245.043 218.199 245.133 217.879 245.301 cv
217.559 245.472 217.305 245.687 217.117 245.941 cv
217.094 245.941 li
217.18 245.281 217.445 244.691 217.891 244.176 cv
218.336 243.664 218.973 243.332 219.805 243.183 cv
219.953 243.16 220.094 243.144 220.23 243.133 cv
220.363 243.121 220.488 243.117 220.598 243.121 cv
cp
218.785 249.496 mo
218.223 249.484 217.797 249.269 217.504 248.855 cv
217.211 248.441 217.063 247.906 217.059 247.25 cv
217.059 247.156 217.066 247.074 217.086 246.996 cv
217.105 246.926 217.133 246.859 217.164 246.797 cv
217.313 246.508 217.523 246.273 217.797 246.097 cv
218.066 245.929 218.363 245.843 218.691 245.836 cv
219.18 245.843 219.57 246 219.859 246.312 cv
220.145 246.625 220.289 247.062 220.297 247.625 cv
220.289 248.191 220.148 248.644 219.879 248.98 cv
219.605 249.32 219.242 249.492 218.785 249.496 cv
cp
f
226.563 250.179 mo
226.563 248.043 li
227.652 248.043 li
227.652 247.226 li
226.563 247.226 li
226.563 242.379 li
225.422 242.379 li
221.941 247.359 li
221.941 248.043 li
225.566 248.043 li
225.566 250.179 li
cp
223.008 247.226 mo
223.008 247.203 li
224.918 244.551 li
225.023 244.375 225.129 244.195 225.23 244.011 cv
225.332 243.832 225.441 243.629 225.566 243.398 cv
225.602 243.398 li
225.574 243.812 225.563 244.218 225.566 244.625 cv
225.566 247.226 li
cp
f
187.758 105.16 mo
188.016 105.187 188.301 105.207 188.617 105.226 cv
188.926 105.242 189.27 105.254 189.652 105.254 cv
190.438 105.254 191.137 105.156 191.746 104.957 cv
192.352 104.761 192.852 104.472 193.242 104.093 cv
193.613 103.718 193.898 103.269 194.098 102.738 cv
194.297 102.211 194.398 101.613 194.402 100.949 cv
194.398 100.297 194.297 99.7303 194.102 99.2543 cv
193.902 98.7773 193.621 98.3752 193.254 98.0432 cv
192.898 97.7182 192.449 97.4682 191.91 97.2973 cv
191.367 97.1252 190.723 97.0392 189.977 97.0352 cv
189.559 97.0392 189.164 97.0542 188.793 97.0862 cv
188.418 97.1172 188.074 97.1602 187.758 97.2153 cv
cp
188.801 97.9722 mo
188.938 97.9453 189.105 97.9182 189.313 97.8943 cv
189.512 97.8752 189.75 97.8672 190.023 97.8633 cv
191.125 97.8793 191.949 98.1602 192.496 98.7072 cv
193.039 99.2612 193.309 100.019 193.301 100.984 cv
193.297 102.086 193 102.929 192.418 103.519 cv
191.832 104.113 190.98 104.414 189.855 104.418 cv
189.648 104.422 189.453 104.418 189.273 104.406 cv
189.09 104.402 188.934 104.39 188.801 104.367 cv
cp
f
200.426 102.472 mo
200.438 102.414 200.445 102.343 200.453 102.261 cv
200.457 102.183 200.461 102.09 200.461 101.98 cv
200.465 101.613 200.398 101.218 200.262 100.801 cv
200.125 100.383 199.879 100.027 199.531 99.7263 cv
199.18 99.4292 198.691 99.2733 198.063 99.2583 cv
197.496 99.2652 197.012 99.4023 196.605 99.6763 cv
196.199 99.9492 195.887 100.32 195.668 100.789 cv
195.449 101.258 195.34 101.789 195.34 102.375 cv
195.348 103.269 195.598 103.976 196.098 104.504 cv
196.59 105.031 197.289 105.301 198.195 105.316 cv
198.652 105.308 199.047 105.265 199.371 105.191 cv
199.695 105.113 199.949 105.035 200.137 104.945 cv
199.945 104.187 li
199.758 104.273 199.535 104.347 199.281 104.402 cv
199.023 104.461 198.711 104.488 198.34 104.488 cv
197.789 104.496 197.324 104.34 196.949 104.015 cv
196.57 103.699 196.371 103.183 196.348 102.472 cv
cp
196.359 101.715 mo
196.383 101.465 196.453 101.211 196.574 100.949 cv
196.691 100.691 196.867 100.472 197.098 100.293 cv
197.324 100.117 197.617 100.023 197.98 100.011 cv
198.367 100.023 198.668 100.121 198.887 100.308 cv
199.098 100.496 199.246 100.722 199.332 100.98 cv
199.41 101.246 199.449 101.488 199.445 101.715 cv
cp
f
201.77 96.6642 mo
202.825 96.6642 li
202.825 105.184 li
201.77 105.184 li
cp
f
208.684 101.621 mo
208.688 101.23 208.625 100.855 208.504 100.496 cv
208.375 100.136 208.152 99.8432 207.836 99.6133 cv
207.512 99.3862 207.059 99.2693 206.473 99.2583 cv
206.102 99.2612 205.75 99.3042 205.418 99.3943 cv
205.086 99.4883 204.797 99.6093 204.555 99.7583 cv
204.793 100.468 li
205 100.332 205.234 100.226 205.5 100.148 cv
205.762 100.078 206.035 100.039 206.32 100.035 cv
206.707 100.039 206.996 100.117 207.188 100.269 cv
207.375 100.426 207.5 100.605 207.559 100.812 cv
207.617 101.019 207.645 101.207 207.641 101.367 cv
207.641 101.488 li
206.512 101.488 205.648 101.672 205.051 102.039 cv
204.453 102.41 204.152 102.945 204.148 103.648 cv
204.148 104.086 204.297 104.468 204.594 104.797 cv
204.891 105.125 205.332 105.297 205.922 105.316 cv
206.336 105.304 206.695 105.218 207 105.054 cv
207.301 104.89 207.535 104.691 207.699 104.453 cv
207.734 104.453 li
207.82 105.183 li
208.766 105.183 li
208.734 104.984 208.711 104.765 208.699 104.527 cv
208.684 104.293 208.68 104.047 208.684 103.789 cv
cp
207.664 103.226 mo
207.664 103.277 207.66 103.332 207.652 103.386 cv
207.645 103.445 207.633 103.504 207.617 103.562 cv
207.531 103.824 207.367 104.051 207.125 104.238 cv
206.883 104.433 206.57 104.531 206.188 104.535 cv
205.914 104.539 205.684 104.457 205.496 104.293 cv
205.309 104.129 205.211 103.875 205.203 103.527 cv
205.211 103.156 205.336 102.875 205.582 102.683 cv
205.828 102.492 206.137 102.363 206.512 102.297 cv
206.883 102.234 207.27 102.207 207.664 102.218 cv
cp
f
209.523 99.3752 mo
211.66 104.726 li
211.684 104.793 211.707 104.851 211.723 104.894 cv
211.734 104.941 211.738 104.976 211.742 105.004 cv
211.738 105.035 211.73 105.07 211.719 105.113 cv
211.699 105.156 211.68 105.203 211.66 105.254 cv
211.527 105.523 211.383 105.758 211.227 105.957 cv
211.066 106.156 210.914 106.312 210.77 106.429 cv
210.605 106.558 210.445 106.668 210.289 106.754 cv
210.125 106.84 209.98 106.902 209.848 106.945 cv
210.109 107.824 li
210.246 107.797 210.43 107.734 210.66 107.633 cv
210.887 107.531 211.137 107.371 211.406 107.152 cv
211.758 106.843 212.082 106.406 212.387 105.84 cv
212.688 105.273 213.027 104.5 213.398 103.515 cv
214.98 99.3752 li
213.867 99.3752 li
212.715 102.785 li
212.637 103 212.57 103.211 212.512 103.418 cv
212.449 103.629 212.395 103.82 212.344 103.996 cv
212.316 103.996 li
212.266 103.82 212.211 103.629 212.145 103.418 cv
212.074 103.211 212.004 103.008 211.934 102.808 cv
210.676 99.3752 li
cp
f
222.602 97.2652 mo
222.504 97.2652 222.391 97.2693 222.262 97.2773 cv
222.133 97.2892 221.988 97.3042 221.832 97.3242 cv
221.336 97.3862 220.879 97.5112 220.457 97.7072 cv
220.035 97.9023 219.66 98.1602 219.336 98.4763 cv
218.938 98.8633 218.621 99.3513 218.383 99.9453 cv
218.145 100.539 218.023 101.222 218.02 101.992 cv
218.027 103.019 218.277 103.828 218.77 104.414 cv
219.262 105.004 219.926 105.301 220.766 105.316 cv
221.309 105.304 221.773 105.176 222.164 104.922 cv
222.547 104.668 222.844 104.332 223.055 103.91 cv
223.258 103.496 223.363 103.043 223.367 102.554 cv
223.355 101.793 223.137 101.183 222.711 100.73 cv
222.281 100.277 221.715 100.047 221.016 100.035 cv
220.578 100.047 220.203 100.136 219.883 100.304 cv
219.563 100.476 219.309 100.691 219.121 100.945 cv
219.098 100.945 li
219.184 100.285 219.449 99.6953 219.895 99.1792 cv
220.34 98.6682 220.977 98.3362 221.809 98.1873 cv
221.957 98.1642 222.098 98.1483 222.234 98.1362 cv
222.367 98.1252 222.492 98.1212 222.602 98.1252 cv
cp
220.789 104.5 mo
220.227 104.488 219.801 104.273 219.508 103.859 cv
219.215 103.445 219.066 102.91 219.063 102.254 cv
219.063 102.16 219.07 102.078 219.09 102 cv
219.109 101.929 219.137 101.863 219.168 101.801 cv
219.316 101.511 219.527 101.277 219.801 101.101 cv
220.07 100.933 220.367 100.847 220.695 100.84 cv
221.184 100.847 221.574 101.004 221.863 101.316 cv
222.148 101.629 222.293 102.066 222.301 102.629 cv
222.293 103.195 222.152 103.648 221.883 103.984 cv
221.609 104.324 221.246 104.496 220.789 104.5 cv
cp
f
228.566 105.183 mo
228.566 103.047 li
229.656 103.047 li
229.656 102.23 li
228.566 102.23 li
228.566 97.3833 li
227.426 97.3833 li
223.945 102.363 li
223.945 103.047 li
227.57 103.047 li
227.57 105.183 li
cp
225.012 102.23 mo
225.012 102.207 li
226.922 99.5542 li
227.027 99.3793 227.133 99.1992 227.234 99.0152 cv
227.336 98.8362 227.445 98.6333 227.57 98.4023 cv
227.605 98.4023 li
227.578 98.8163 227.566 99.2222 227.57 99.6293 cv
227.57 102.23 li
cp
f
306.742 237.636 mo
308.059 237.636 li
308.059 233.547 li
309.305 233.547 li
309.895 233.562 310.348 233.711 310.672 233.992 cv
310.988 234.277 311.223 234.742 311.367 235.383 cv
311.504 235.976 311.629 236.465 311.742 236.847 cv
311.852 237.234 311.949 237.496 312.035 237.636 cv
313.398 237.636 li
313.289 237.453 313.172 237.14 313.047 236.699 cv
312.918 236.261 312.773 235.711 312.609 235.047 cv
312.488 234.554 312.305 234.148 312.066 233.824 cv
311.82 233.5 311.508 233.273 311.125 233.144 cv
311.125 233.101 li
311.668 232.933 312.117 232.648 312.477 232.242 cv
312.832 231.84 313.02 231.328 313.035 230.707 cv
313.031 230.336 312.961 229.996 312.82 229.683 cv
312.68 229.379 312.48 229.117 312.23 228.898 cv
311.918 228.644 311.523 228.453 311.047 228.324 cv
310.563 228.199 309.973 228.133 309.273 228.133 cv
308.816 228.133 308.367 228.152 307.922 228.187 cv
307.477 228.226 307.082 228.273 306.742 228.328 cv
cp
308.059 229.179 mo
308.168 229.156 308.336 229.133 308.559 229.109 cv
308.773 229.093 309.043 229.082 309.363 229.082 cv
310.074 229.082 310.641 229.222 311.063 229.5 cv
311.484 229.785 311.699 230.23 311.715 230.832 cv
311.703 231.383 311.496 231.816 311.09 232.133 cv
310.68 232.457 310.121 232.621 309.41 232.625 cv
308.059 232.625 li
cp
f
297.566 95.1053 mo
298.883 95.1053 li
298.883 91.3242 li
299.031 91.3633 299.199 91.3862 299.379 91.3943 cv
299.559 91.4102 299.746 91.4142 299.945 91.4102 cv
300.594 91.4102 301.188 91.3242 301.723 91.1483 cv
302.258 90.9763 302.707 90.7182 303.07 90.3752 cv
303.328 90.1333 303.523 89.8403 303.656 89.5043 cv
303.789 89.1682 303.855 88.7852 303.859 88.3553 cv
303.852 87.9332 303.77 87.5582 303.613 87.2222 cv
303.453 86.8943 303.238 86.6133 302.965 86.3833 cv
302.66 86.1333 302.27 85.9413 301.793 85.8042 cv
301.316 85.6723 300.75 85.6013 300.098 85.6013 cv
299.566 85.6013 299.09 85.6212 298.672 85.6563 cv
298.25 85.6913 297.883 85.7343 297.566 85.7813 cv
cp
298.883 86.6642 mo
298.996 86.6362 299.16 86.6133 299.375 86.5932 cv
299.586 86.5782 299.84 86.5703 300.129 86.5663 cv
300.859 86.5663 301.441 86.7182 301.875 87.0233 cv
302.305 87.3362 302.523 87.8013 302.539 88.4263 cv
302.531 89.0703 302.305 89.5663 301.855 89.9102 cv
301.406 90.2583 300.781 90.4292 299.977 90.4292 cv
299.758 90.4292 299.555 90.4223 299.375 90.4063 cv
299.188 90.3902 299.023 90.3672 298.883 90.3322 cv
cp
f
346.063 175.738 mo
345.844 175.84 345.586 175.922 345.289 175.98 cv
344.984 176.043 344.672 176.074 344.348 176.074 cv
343.359 176.062 342.598 175.769 342.063 175.195 cv
341.527 174.621 341.258 173.828 341.25 172.82 cv
341.262 171.754 341.551 170.933 342.117 170.355 cv
342.68 169.781 343.441 169.492 344.406 169.484 cv
344.742 169.492 345.047 169.523 345.324 169.582 cv
345.594 169.644 345.828 169.722 346.027 169.82 cv
346.289 168.968 li
346.148 168.894 345.918 168.816 345.598 168.734 cv
345.277 168.66 344.867 168.617 344.371 168.609 cv
343.094 168.629 342.074 169.019 341.316 169.781 cv
340.551 170.543 340.164 171.566 340.148 172.855 cv
340.152 173.746 340.324 174.496 340.672 175.105 cv
341.012 175.715 341.484 176.176 342.082 176.488 cv
342.68 176.801 343.359 176.957 344.129 176.961 cv
344.621 176.953 345.055 176.914 345.426 176.84 cv
345.793 176.765 346.074 176.679 346.266 176.574 cv
cp
f
349.879 170.902 mo
349.336 170.906 348.852 171.027 348.422 171.269 cv
347.988 171.515 347.645 171.867 347.391 172.32 cv
347.133 172.781 347.004 173.332 347 173.972 cv
347.016 174.902 347.281 175.629 347.805 176.156 cv
348.32 176.683 348.98 176.949 349.781 176.961 cv
350.254 176.957 350.711 176.851 351.148 176.636 cv
351.586 176.422 351.945 176.086 352.234 175.633 cv
352.516 175.179 352.664 174.593 352.676 173.875 cv
352.66 172.98 352.402 172.265 351.902 171.726 cv
351.398 171.191 350.723 170.918 349.879 170.902 cv
cp
349.855 171.691 mo
350.266 171.703 350.602 171.824 350.859 172.051 cv
351.113 172.281 351.301 172.562 351.422 172.898 cv
351.535 173.238 351.594 173.578 351.598 173.914 cv
351.582 174.582 351.414 175.121 351.09 175.531 cv
350.762 175.949 350.34 176.16 349.832 176.168 cv
349.301 176.156 348.879 175.945 348.566 175.531 cv
348.246 175.121 348.086 174.59 348.078 173.937 cv
348.078 173.57 348.141 173.215 348.266 172.871 cv
348.391 172.535 348.582 172.254 348.844 172.031 cv
349.105 171.816 349.441 171.703 349.855 171.691 cv
cp
f
354.004 176.828 mo
355.035 176.828 li
355.035 173.336 li
355.031 173.246 355.039 173.156 355.055 173.066 cv
355.066 172.976 355.09 172.894 355.121 172.82 cv
355.207 172.547 355.363 172.304 355.594 172.093 cv
355.82 171.886 356.098 171.777 356.43 171.761 cv
356.828 171.773 357.133 171.922 357.336 172.211 cv
357.539 172.5 357.641 172.879 357.641 173.347 cv
357.641 176.828 li
358.672 176.828 li
358.672 173.238 li
358.672 173.144 358.68 173.051 358.695 172.961 cv
358.711 172.875 358.73 172.793 358.758 172.711 cv
358.852 172.453 359.008 172.23 359.227 172.047 cv
359.441 171.867 359.703 171.773 360.016 171.761 cv
360.434 171.769 360.75 171.926 360.961 172.234 cv
361.168 172.547 361.273 172.988 361.277 173.551 cv
361.277 176.828 li
362.309 176.828 li
362.309 173.418 li
362.297 172.754 362.188 172.238 361.984 171.871 cv
361.773 171.504 361.523 171.25 361.234 171.105 cv
360.938 170.965 360.656 170.898 360.391 170.902 cv
360.113 170.906 359.875 170.941 359.676 171.008 cv
359.469 171.078 359.285 171.176 359.117 171.308 cv
358.992 171.398 358.871 171.508 358.762 171.629 cv
358.645 171.754 358.543 171.898 358.457 172.062 cv
358.434 172.062 li
358.301 171.718 358.094 171.437 357.813 171.226 cv
357.527 171.015 357.191 170.91 356.801 170.902 cv
356.316 170.914 355.93 171.019 355.637 171.226 cv
355.344 171.437 355.117 171.687 354.965 171.968 cv
354.93 171.968 li
354.879 171.019 li
353.957 171.019 li
353.965 171.261 353.977 171.508 353.988 171.758 cv
353.996 172.015 354 172.293 354.004 172.593 cv
cp
f
364.012 179.203 mo
365.055 179.203 li
365.055 176.051 li
365.078 176.051 li
365.254 176.343 365.5 176.566 365.816 176.722 cv
366.125 176.879 366.477 176.957 366.867 176.961 cv
367.328 176.957 367.762 176.843 368.164 176.617 cv
368.563 176.386 368.887 176.043 369.137 175.578 cv
369.383 175.117 369.508 174.535 369.52 173.84 cv
369.504 172.953 369.27 172.246 368.816 171.715 cv
368.355 171.187 367.77 170.918 367.051 170.902 cv
366.574 170.906 366.16 171 365.816 171.191 cv
365.469 171.386 365.191 171.664 364.984 172.015 cv
364.961 172.015 li
364.898 171.019 li
363.965 171.019 li
363.973 171.301 363.984 171.593 363.996 171.898 cv
364.004 172.211 364.008 172.551 364.012 172.918 cv
cp
365.055 173.457 mo
365.055 173.394 365.063 173.324 365.078 173.246 cv
365.09 173.176 365.109 173.105 365.129 173.035 cv
365.23 172.636 365.43 172.32 365.727 172.09 cv
366.023 171.863 366.355 171.746 366.727 171.738 cv
367.285 171.758 367.711 171.972 368.008 172.383 cv
368.297 172.793 368.445 173.293 368.453 173.886 cv
368.445 174.566 368.293 175.109 367.988 175.511 cv
367.684 175.918 367.25 176.125 366.688 176.133 cv
366.301 176.129 365.965 176.015 365.684 175.789 cv
365.398 175.57 365.207 175.269 365.105 174.894 cv
365.086 174.832 365.07 174.765 365.066 174.691 cv
365.055 174.621 365.051 174.547 365.055 174.465 cv
cp
f
374.922 173.265 mo
374.926 172.875 374.863 172.5 374.742 172.14 cv
374.613 171.781 374.391 171.488 374.074 171.258 cv
373.75 171.031 373.297 170.914 372.711 170.902 cv
372.34 170.906 371.988 170.949 371.656 171.039 cv
371.324 171.133 371.035 171.254 370.793 171.402 cv
371.031 172.113 li
371.238 171.976 371.473 171.871 371.738 171.793 cv
372 171.722 372.273 171.683 372.559 171.679 cv
372.945 171.683 373.234 171.761 373.426 171.914 cv
373.613 172.07 373.738 172.25 373.797 172.457 cv
373.855 172.664 373.883 172.851 373.879 173.011 cv
373.879 173.133 li
372.75 173.133 371.887 173.316 371.289 173.683 cv
370.691 174.054 370.391 174.59 370.387 175.293 cv
370.387 175.73 370.535 176.113 370.832 176.441 cv
371.129 176.769 371.57 176.941 372.16 176.961 cv
372.574 176.949 372.934 176.863 373.238 176.699 cv
373.539 176.535 373.773 176.336 373.938 176.097 cv
373.973 176.097 li
374.059 176.828 li
375.004 176.828 li
374.973 176.629 374.949 176.41 374.938 176.172 cv
374.922 175.937 374.918 175.691 374.922 175.433 cv
cp
373.902 174.871 mo
373.902 174.922 373.898 174.976 373.891 175.031 cv
373.883 175.09 373.871 175.148 373.855 175.207 cv
373.77 175.468 373.605 175.695 373.363 175.883 cv
373.121 176.078 372.809 176.176 372.426 176.179 cv
372.152 176.183 371.922 176.101 371.734 175.937 cv
371.547 175.773 371.449 175.519 371.441 175.172 cv
371.449 174.801 371.574 174.519 371.82 174.328 cv
372.066 174.136 372.375 174.008 372.75 173.941 cv
373.121 173.879 373.508 173.851 373.902 173.863 cv
cp
f
376.625 176.828 mo
377.68 176.828 li
377.68 173.73 li
377.676 173.648 377.68 173.562 377.688 173.476 cv
377.691 173.39 377.703 173.312 377.719 173.238 cv
377.793 172.84 377.953 172.519 378.199 172.273 cv
378.445 172.031 378.754 171.902 379.133 171.894 cv
379.199 171.894 379.266 171.898 379.324 171.898 cv
379.383 171.906 379.438 171.91 379.492 171.918 cv
379.492 170.926 li
379.441 170.922 379.395 170.914 379.352 170.91 cv
379.305 170.906 379.258 170.906 379.207 170.902 cv
378.844 170.91 378.516 171.023 378.227 171.246 cv
377.934 171.472 377.719 171.781 377.586 172.172 cv
377.551 172.172 li
377.5 171.019 li
376.578 171.019 li
376.594 171.293 376.609 171.578 376.617 171.875 cv
376.625 172.176 376.625 172.492 376.625 172.832 cv
cp
f
384.57 173.265 mo
384.574 172.875 384.512 172.5 384.391 172.14 cv
384.262 171.781 384.039 171.488 383.723 171.258 cv
383.398 171.031 382.945 170.914 382.359 170.902 cv
381.988 170.906 381.637 170.949 381.305 171.039 cv
380.973 171.133 380.684 171.254 380.441 171.402 cv
380.68 172.113 li
380.887 171.976 381.121 171.871 381.387 171.793 cv
381.648 171.722 381.922 171.683 382.207 171.679 cv
382.594 171.683 382.883 171.761 383.074 171.914 cv
383.262 172.07 383.387 172.25 383.445 172.457 cv
383.504 172.664 383.531 172.851 383.527 173.011 cv
383.527 173.133 li
382.398 173.133 381.535 173.316 380.938 173.683 cv
380.34 174.054 380.039 174.59 380.035 175.293 cv
380.035 175.73 380.184 176.113 380.48 176.441 cv
380.777 176.769 381.219 176.941 381.809 176.961 cv
382.223 176.949 382.582 176.863 382.887 176.699 cv
383.188 176.535 383.422 176.336 383.586 176.097 cv
383.621 176.097 li
383.707 176.828 li
384.652 176.828 li
384.621 176.629 384.598 176.41 384.586 176.172 cv
384.57 175.937 384.566 175.691 384.57 175.433 cv
cp
383.551 174.871 mo
383.551 174.922 383.547 174.976 383.539 175.031 cv
383.531 175.09 383.52 175.148 383.504 175.207 cv
383.418 175.468 383.254 175.695 383.012 175.883 cv
382.77 176.078 382.457 176.176 382.074 176.179 cv
381.801 176.183 381.57 176.101 381.383 175.937 cv
381.195 175.773 381.098 175.519 381.09 175.172 cv
381.098 174.801 381.223 174.519 381.469 174.328 cv
381.715 174.136 382.023 174.008 382.398 173.941 cv
382.77 173.879 383.156 173.851 383.551 173.863 cv
cp
f
386.469 169.941 mo
386.469 171.019 li
385.566 171.019 li
385.566 171.824 li
386.469 171.824 li
386.469 175 li
386.465 175.34 386.496 175.636 386.563 175.89 cv
386.625 176.148 386.73 176.359 386.875 176.515 cv
387 176.66 387.16 176.765 387.355 176.84 cv
387.547 176.918 387.766 176.957 388.016 176.961 cv
388.215 176.957 388.395 176.941 388.559 176.914 cv
388.715 176.883 388.848 176.851 388.949 176.816 cv
388.902 176.011 li
388.824 176.043 388.738 176.062 388.645 176.07 cv
388.551 176.086 388.43 176.09 388.289 176.086 cv
387.996 176.086 387.793 175.988 387.672 175.793 cv
387.551 175.601 387.492 175.324 387.5 174.957 cv
387.5 171.824 li
389.012 171.824 li
389.012 171.019 li
387.5 171.019 li
387.5 169.629 li
cp
f
392.586 170.902 mo
392.043 170.906 391.559 171.027 391.129 171.269 cv
390.695 171.515 390.352 171.867 390.098 172.32 cv
389.84 172.781 389.711 173.332 389.707 173.972 cv
389.723 174.902 389.988 175.629 390.512 176.156 cv
391.027 176.683 391.688 176.949 392.488 176.961 cv
392.961 176.957 393.418 176.851 393.855 176.636 cv
394.293 176.422 394.652 176.086 394.941 175.633 cv
395.223 175.179 395.371 174.593 395.383 173.875 cv
395.367 172.98 395.109 172.265 394.609 171.726 cv
394.105 171.191 393.43 170.918 392.586 170.902 cv
cp
392.563 171.691 mo
392.973 171.703 393.309 171.824 393.566 172.051 cv
393.82 172.281 394.008 172.562 394.129 172.898 cv
394.242 173.238 394.301 173.578 394.305 173.914 cv
394.289 174.582 394.121 175.121 393.797 175.531 cv
393.469 175.949 393.047 176.16 392.539 176.168 cv
392.008 176.156 391.586 175.945 391.273 175.531 cv
390.953 175.121 390.793 174.59 390.785 173.937 cv
390.785 173.57 390.848 173.215 390.973 172.871 cv
391.098 172.535 391.289 172.254 391.551 172.031 cv
391.813 171.816 392.148 171.703 392.563 171.691 cv
cp
f
396.715 176.828 mo
397.77 176.828 li
397.77 173.73 li
397.766 173.648 397.77 173.562 397.777 173.476 cv
397.781 173.39 397.793 173.312 397.809 173.238 cv
397.883 172.84 398.043 172.519 398.289 172.273 cv
398.535 172.031 398.844 171.902 399.223 171.894 cv
399.289 171.894 399.355 171.898 399.414 171.898 cv
399.473 171.906 399.527 171.91 399.582 171.918 cv
399.582 170.926 li
399.531 170.922 399.484 170.914 399.441 170.91 cv
399.395 170.906 399.348 170.906 399.297 170.902 cv
398.934 170.91 398.605 171.023 398.316 171.246 cv
398.023 171.472 397.809 171.781 397.676 172.172 cv
397.641 172.172 li
397.59 171.019 li
396.668 171.019 li
396.684 171.293 396.699 171.578 396.707 171.875 cv
396.715 172.176 396.715 172.492 396.715 172.832 cv
cp
f
60.008 101.375 mo
60.266 101.402 60.551 101.422 60.867 101.441 cv
61.176 101.457 61.52 101.468 61.902 101.468 cv
62.688 101.468 63.387 101.371 63.996 101.172 cv
64.602 100.976 65.102 100.687 65.492 100.308 cv
65.863 99.9332 66.148 99.4843 66.348 98.9532 cv
66.547 98.4263 66.648 97.8282 66.652 97.1642 cv
66.648 96.5112 66.547 95.9453 66.352 95.4682 cv
66.152 94.9922 65.871 94.5903 65.504 94.2583 cv
65.148 93.9332 64.699 93.6832 64.16 93.5112 cv
63.617 93.3403 62.973 93.2543 62.227 93.2502 cv
61.809 93.2543 61.414 93.2693 61.043 93.3013 cv
60.668 93.3322 60.324 93.3752 60.008 93.4292 cv
cp
61.051 94.1873 mo
61.188 94.1602 61.355 94.1333 61.563 94.1093 cv
61.762 94.0903 62 94.0822 62.273 94.0782 cv
63.375 94.0932 64.199 94.3752 64.746 94.9223 cv
65.289 95.4763 65.559 96.2343 65.551 97.1992 cv
65.547 98.3013 65.25 99.1443 64.668 99.7343 cv
64.082 100.328 63.23 100.629 62.105 100.633 cv
61.898 100.636 61.703 100.633 61.523 100.621 cv
61.34 100.617 61.184 100.605 61.051 100.582 cv
cp
f
72.676 98.6873 mo
72.688 98.6293 72.695 98.5582 72.703 98.4763 cv
72.707 98.3983 72.711 98.3042 72.711 98.1953 cv
72.715 97.8282 72.648 97.4332 72.512 97.0152 cv
72.375 96.5972 72.129 96.2422 71.781 95.9413 cv
71.43 95.6443 70.941 95.4883 70.313 95.4722 cv
69.746 95.4803 69.262 95.6172 68.855 95.8902 cv
68.449 96.1642 68.137 96.5352 67.918 97.0043 cv
67.699 97.4722 67.59 98.0043 67.59 98.5903 cv
67.598 99.4843 67.848 100.191 68.348 100.718 cv
68.84 101.246 69.539 101.515 70.445 101.531 cv
70.902 101.523 71.297 101.48 71.621 101.406 cv
71.945 101.328 72.199 101.25 72.387 101.16 cv
72.195 100.402 li
72.008 100.488 71.785 100.562 71.531 100.617 cv
71.273 100.676 70.961 100.703 70.59 100.703 cv
70.039 100.711 69.574 100.554 69.199 100.23 cv
68.82 99.9142 68.621 99.3983 68.598 98.6873 cv
cp
68.609 97.9292 mo
68.633 97.6792 68.703 97.4263 68.824 97.1642 cv
68.941 96.9063 69.117 96.6873 69.348 96.5083 cv
69.574 96.3322 69.867 96.2383 70.23 96.2263 cv
70.617 96.2383 70.918 96.3362 71.137 96.5233 cv
71.348 96.7112 71.496 96.9373 71.582 97.1953 cv
71.66 97.4612 71.699 97.7032 71.695 97.9292 cv
cp
f
74.02 92.8793 mo
75.075 92.8793 li
75.075 101.399 li
74.02 101.399 li
cp
f
80.934 97.8362 mo
80.938 97.4453 80.875 97.0703 80.754 96.7112 cv
80.625 96.3513 80.402 96.0582 80.086 95.8282 cv
79.762 95.6013 79.309 95.4843 78.723 95.4722 cv
78.352 95.4763 78 95.5193 77.668 95.6093 cv
77.336 95.7032 77.047 95.8242 76.805 95.9722 cv
77.043 96.6832 li
77.25 96.5473 77.484 96.4413 77.75 96.3633 cv
78.012 96.2932 78.285 96.2543 78.57 96.2502 cv
78.957 96.2543 79.246 96.3322 79.438 96.4843 cv
79.625 96.6402 79.75 96.8203 79.809 97.0273 cv
79.867 97.2343 79.895 97.4223 79.891 97.5822 cv
79.891 97.7032 li
78.762 97.7032 77.898 97.8862 77.301 98.2543 cv
76.703 98.6252 76.402 99.1602 76.398 99.8633 cv
76.398 100.301 76.547 100.683 76.844 101.011 cv
77.141 101.34 77.582 101.511 78.172 101.531 cv
78.586 101.519 78.945 101.433 79.25 101.269 cv
79.551 101.105 79.785 100.906 79.949 100.668 cv
79.984 100.668 li
80.07 101.398 li
81.016 101.398 li
80.984 101.199 80.961 100.98 80.949 100.742 cv
80.934 100.508 80.93 100.261 80.934 100.004 cv
cp
79.914 99.4413 mo
79.914 99.4922 79.91 99.5473 79.902 99.6013 cv
79.895 99.6602 79.883 99.7182 79.867 99.7773 cv
79.781 100.039 79.617 100.265 79.375 100.453 cv
79.133 100.648 78.82 100.746 78.438 100.75 cv
78.164 100.754 77.934 100.672 77.746 100.508 cv
77.559 100.343 77.461 100.09 77.453 99.7422 cv
77.461 99.3712 77.586 99.0903 77.832 98.8983 cv
78.078 98.7072 78.387 98.5782 78.762 98.5112 cv
79.133 98.4492 79.52 98.4223 79.914 98.4332 cv
cp
f
81.773 95.5903 mo
83.91 100.941 li
83.934 101.008 83.957 101.066 83.973 101.109 cv
83.984 101.156 83.988 101.191 83.992 101.218 cv
83.988 101.25 83.98 101.285 83.969 101.328 cv
83.949 101.371 83.93 101.418 83.91 101.468 cv
83.777 101.738 83.633 101.972 83.477 102.172 cv
83.316 102.371 83.164 102.527 83.02 102.644 cv
82.855 102.773 82.695 102.883 82.539 102.968 cv
82.375 103.054 82.23 103.117 82.098 103.16 cv
82.359 104.039 li
82.496 104.011 82.68 103.949 82.91 103.847 cv
83.137 103.746 83.387 103.586 83.656 103.367 cv
84.008 103.058 84.332 102.621 84.637 102.054 cv
84.938 101.488 85.277 100.715 85.648 99.7303 cv
87.23 95.5903 li
86.117 95.5903 li
84.965 99.0002 li
84.887 99.2153 84.82 99.4263 84.762 99.6333 cv
84.699 99.8432 84.645 100.035 84.594 100.211 cv
84.566 100.211 li
84.516 100.035 84.461 99.8432 84.395 99.6333 cv
84.324 99.4263 84.254 99.2222 84.184 99.0233 cv
82.926 95.5903 li
cp
f
94.855 93.4803 mo
94.758 93.4803 94.645 93.4843 94.516 93.4922 cv
94.387 93.5043 94.242 93.5193 94.086 93.5392 cv
93.59 93.6013 93.133 93.7263 92.711 93.9223 cv
92.289 94.1172 91.914 94.3752 91.59 94.6913 cv
91.191 95.0782 90.875 95.5663 90.637 96.1602 cv
90.398 96.7543 90.277 97.4373 90.273 98.2072 cv
90.281 99.2343 90.531 100.043 91.023 100.629 cv
91.516 101.218 92.18 101.515 93.02 101.531 cv
93.563 101.519 94.027 101.39 94.418 101.136 cv
94.801 100.883 95.098 100.547 95.309 100.125 cv
95.512 99.7112 95.617 99.2583 95.621 98.7693 cv
95.609 98.0083 95.391 97.3983 94.965 96.9453 cv
94.535 96.4922 93.969 96.2612 93.27 96.2502 cv
92.832 96.2612 92.457 96.3513 92.137 96.5193 cv
91.816 96.6913 91.563 96.9063 91.375 97.1602 cv
91.352 97.1602 li
91.438 96.5002 91.703 95.9102 92.148 95.3943 cv
92.594 94.8833 93.23 94.5513 94.063 94.4023 cv
94.211 94.3793 94.352 94.3633 94.488 94.3513 cv
94.621 94.3403 94.746 94.3362 94.855 94.3403 cv
cp
93.043 100.715 mo
92.48 100.703 92.055 100.488 91.762 100.074 cv
91.469 99.6602 91.32 99.1252 91.316 98.4682 cv
91.316 98.3752 91.324 98.2932 91.344 98.2153 cv
91.363 98.1443 91.391 98.0782 91.422 98.0152 cv
91.57 97.7263 91.781 97.4922 92.055 97.3163 cv
92.324 97.1483 92.621 97.0623 92.949 97.0542 cv
93.438 97.0623 93.828 97.2182 94.117 97.5313 cv
94.402 97.8432 94.547 98.2813 94.555 98.8432 cv
94.547 99.4102 94.406 99.8633 94.137 100.199 cv
93.863 100.539 93.5 100.711 93.043 100.715 cv
cp
f
100.82 101.398 mo
100.82 99.2612 li
101.91 99.2612 li
101.91 98.4453 li
100.82 98.4453 li
100.82 93.5972 li
99.68 93.5972 li
96.199 98.5782 li
96.199 99.2612 li
99.824 99.2612 li
99.824 101.398 li
cp
97.266 98.4453 mo
97.266 98.4223 li
99.176 95.7693 li
99.281 95.5932 99.387 95.4142 99.488 95.2303 cv
99.59 95.0513 99.699 94.8472 99.824 94.6172 cv
99.859 94.6172 li
99.832 95.0313 99.82 95.4373 99.824 95.8432 cv
99.824 98.4453 li
cp
f
54.09 83.977 mo
107.59 83.977 li
107.59 110.079 li
54.09 110.079 li
cp
@
481.098 24.9763 mo
482.152 24.9763 li
482.152 21.3163 li
485.199 21.3163 li
485.199 20.4532 li
482.152 20.4532 li
482.152 17.7653 li
485.449 17.7653 li
485.449 16.8903 li
481.098 16.8903 li
cp
f
487.656 24.9763 mo
487.656 19.1682 li
486.602 19.1682 li
486.602 24.9763 li
cp
487.129 16.8903 mo
486.926 16.8983 486.77 16.9652 486.652 17.0862 cv
486.535 17.2112 486.473 17.3633 486.473 17.5472 cv
486.473 17.7343 486.531 17.8903 486.645 18.0082 cv
486.758 18.1332 486.91 18.1953 487.105 18.1953 cv
487.316 18.1953 487.48 18.1332 487.598 18.0082 cv
487.711 17.8903 487.773 17.7343 487.777 17.5472 cv
487.773 17.3593 487.711 17.2032 487.598 17.0782 cv
487.477 16.9572 487.32 16.8943 487.129 16.8903 cv
cp
f
489.41 24.9763 mo
490.465 24.9763 li
490.465 21.4843 li
490.461 21.3943 490.469 21.3083 490.484 21.2223 cv
490.496 21.1403 490.516 21.0623 490.539 20.9922 cv
490.637 20.6913 490.809 20.4413 491.063 20.2343 cv
491.309 20.0313 491.609 19.9222 491.957 19.9102 cv
492.445 19.9262 492.793 20.0933 493 20.4182 cv
493.203 20.7462 493.301 21.1523 493.301 21.6292 cv
493.301 24.9763 li
494.355 24.9763 li
494.355 21.5193 li
494.34 20.8633 494.223 20.3553 494 19.9962 cv
493.773 19.6363 493.504 19.3863 493.191 19.2462 cv
492.875 19.1093 492.578 19.0472 492.305 19.0512 cv
491.816 19.0663 491.414 19.1762 491.09 19.3863 cv
490.762 19.6013 490.523 19.8513 490.383 20.1292 cv
490.359 20.1292 li
490.297 19.1682 li
489.363 19.1682 li
489.379 19.4102 489.395 19.6563 489.402 19.9063 cv
489.41 20.1642 489.41 20.4413 489.41 20.7422 cv
cp
f
500.738 22.2653 mo
500.75 22.2072 500.758 22.1363 500.766 22.0543 cv
500.77 21.9763 500.773 21.8832 500.773 21.7733 cv
500.777 21.4063 500.711 21.0113 500.574 20.5933 cv
500.438 20.1762 500.191 19.8203 499.844 19.5193 cv
499.492 19.2223 499.004 19.0663 498.375 19.0512 cv
497.809 19.0583 497.324 19.1953 496.918 19.4683 cv
496.512 19.7422 496.199 20.1133 495.98 20.5822 cv
495.762 21.0512 495.652 21.5822 495.652 22.1682 cv
495.66 23.0623 495.91 23.7693 496.41 24.2972 cv
496.902 24.8242 497.602 25.0933 498.508 25.1093 cv
498.965 25.1013 499.359 25.0583 499.684 24.9843 cv
500.008 24.9063 500.262 24.8282 500.449 24.7383 cv
500.258 23.9803 li
500.07 24.0663 499.848 24.1403 499.594 24.1953 cv
499.336 24.2542 499.023 24.2813 498.652 24.2813 cv
498.102 24.2892 497.637 24.1332 497.262 23.8083 cv
496.883 23.4922 496.684 22.9763 496.66 22.2653 cv
cp
496.672 21.5082 mo
496.695 21.2582 496.766 21.0042 496.887 20.7422 cv
497.004 20.4843 497.18 20.2653 497.41 20.0862 cv
497.637 19.9102 497.93 19.8163 498.293 19.8043 cv
498.68 19.8163 498.98 19.9142 499.199 20.1013 cv
499.41 20.2892 499.559 20.5153 499.645 20.7733 cv
499.723 21.0392 499.762 21.2813 499.758 21.5082 cv
cp
f
505.707 24.9763 mo
506.762 24.9763 li
506.762 17.7773 li
509.234 17.7773 li
509.234 16.8903 li
503.246 16.8903 li
503.246 17.7773 li
505.707 17.7773 li
cp
f
511.008 24.9763 mo
511.008 19.1682 li
509.953 19.1682 li
509.953 24.9763 li
cp
510.48 16.8903 mo
510.277 16.8983 510.121 16.9652 510.004 17.0862 cv
509.887 17.2112 509.824 17.3633 509.824 17.5472 cv
509.824 17.7343 509.883 17.8903 509.996 18.0082 cv
510.109 18.1332 510.262 18.1953 510.457 18.1953 cv
510.668 18.1953 510.832 18.1332 510.949 18.0082 cv
511.063 17.8903 511.125 17.7343 511.129 17.5472 cv
511.125 17.3593 511.063 17.2032 510.949 17.0782 cv
510.828 16.9572 510.672 16.8943 510.48 16.8903 cv
cp
f
512.762 24.9763 mo
513.793 24.9763 li
513.793 21.4843 li
513.789 21.3943 513.797 21.3043 513.813 21.2152 cv
513.824 21.1252 513.848 21.0432 513.879 20.9683 cv
513.965 20.6953 514.121 20.4532 514.352 20.2422 cv
514.578 20.0352 514.855 19.9262 515.188 19.9102 cv
515.586 19.9222 515.891 20.0703 516.094 20.3593 cv
516.297 20.6483 516.398 21.0273 516.398 21.4962 cv
516.398 24.9763 li
517.43 24.9763 li
517.43 21.3863 li
517.43 21.2932 517.438 21.1992 517.453 21.1093 cv
517.469 21.0233 517.488 20.9413 517.516 20.8593 cv
517.609 20.6013 517.766 20.3792 517.984 20.1953 cv
518.199 20.0153 518.461 19.9222 518.773 19.9102 cv
519.191 19.9182 519.508 20.0742 519.719 20.3832 cv
519.926 20.6953 520.031 21.1363 520.035 21.6992 cv
520.035 24.9763 li
521.066 24.9763 li
521.066 21.5663 li
521.055 20.9023 520.945 20.3863 520.742 20.0193 cv
520.531 19.6523 520.281 19.3983 519.992 19.2542 cv
519.695 19.1133 519.414 19.0472 519.148 19.0512 cv
518.871 19.0543 518.633 19.0902 518.434 19.1563 cv
518.227 19.2263 518.043 19.3242 517.875 19.4572 cv
517.75 19.5472 517.629 19.6563 517.52 19.7773 cv
517.402 19.9023 517.301 20.0472 517.215 20.2112 cv
517.191 20.2112 li
517.059 19.8672 516.852 19.5862 516.57 19.3752 cv
516.285 19.1642 515.949 19.0583 515.559 19.0512 cv
515.074 19.0623 514.688 19.1682 514.395 19.3752 cv
514.102 19.5862 513.875 19.8362 513.723 20.1172 cv
513.688 20.1172 li
513.637 19.1682 li
512.715 19.1682 li
512.723 19.4102 512.734 19.6563 512.746 19.9063 cv
512.754 20.1642 512.758 20.4413 512.762 20.7422 cv
cp
f
523.824 24.9763 mo
523.824 19.1682 li
522.77 19.1682 li
522.77 24.9763 li
cp
523.297 16.8903 mo
523.094 16.8983 522.938 16.9652 522.82 17.0862 cv
522.703 17.2112 522.641 17.3633 522.641 17.5472 cv
522.641 17.7343 522.699 17.8903 522.813 18.0082 cv
522.926 18.1332 523.078 18.1953 523.273 18.1953 cv
523.484 18.1953 523.648 18.1332 523.766 18.0082 cv
523.879 17.8903 523.941 17.7343 523.945 17.5472 cv
523.941 17.3593 523.879 17.2032 523.766 17.0782 cv
523.645 16.9572 523.488 16.8943 523.297 16.8903 cv
cp
f
525.578 24.9763 mo
526.633 24.9763 li
526.633 21.4843 li
526.629 21.3943 526.637 21.3083 526.652 21.2223 cv
526.664 21.1403 526.684 21.0623 526.707 20.9922 cv
526.805 20.6913 526.977 20.4413 527.23 20.2343 cv
527.477 20.0313 527.777 19.9222 528.125 19.9102 cv
528.613 19.9262 528.961 20.0933 529.168 20.4182 cv
529.371 20.7462 529.469 21.1523 529.469 21.6292 cv
529.469 24.9763 li
530.523 24.9763 li
530.523 21.5193 li
530.508 20.8633 530.391 20.3553 530.168 19.9962 cv
529.941 19.6363 529.672 19.3863 529.359 19.2462 cv
529.043 19.1093 528.746 19.0472 528.473 19.0512 cv
527.984 19.0663 527.582 19.1762 527.258 19.3863 cv
526.93 19.6013 526.691 19.8513 526.551 20.1292 cv
526.527 20.1292 li
526.465 19.1682 li
525.531 19.1682 li
525.547 19.4102 525.563 19.6563 525.57 19.9063 cv
525.578 20.1642 525.578 20.4413 525.578 20.7422 cv
cp
f
537.207 20.7542 mo
537.203 20.4102 537.207 20.1093 537.215 19.8553 cv
537.219 19.6013 537.23 19.3752 537.254 19.1682 cv
536.32 19.1682 li
536.285 20.0432 li
536.262 20.0432 li
536.129 19.7932 535.918 19.5703 535.633 19.3672 cv
535.34 19.1722 534.945 19.0663 534.445 19.0512 cv
533.988 19.0543 533.563 19.1722 533.168 19.4102 cv
532.77 19.6483 532.445 19.9962 532.203 20.4492 cv
531.953 20.9063 531.828 21.4652 531.82 22.1212 cv
531.832 22.9453 532.063 23.6172 532.516 24.1403 cv
532.965 24.6682 533.559 24.9373 534.293 24.9532 cv
534.742 24.9453 535.121 24.8513 535.434 24.6682 cv
535.742 24.4883 535.977 24.2582 536.141 23.9803 cv
536.164 23.9803 li
536.164 24.6172 li
536.148 25.3473 535.973 25.8672 535.633 26.1873 cv
535.285 26.5042 534.84 26.6602 534.293 26.6563 cv
533.926 26.6523 533.598 26.6053 533.313 26.5153 cv
533.02 26.4262 532.777 26.3163 532.586 26.1873 cv
532.324 27.0042 li
532.563 27.1602 532.855 27.2773 533.203 27.3593 cv
533.547 27.4413 533.895 27.4843 534.254 27.4843 cv
534.625 27.4843 535 27.4293 535.375 27.3282 cv
535.746 27.2183 536.082 27.0392 536.379 26.7892 cv
536.652 26.5313 536.859 26.1913 537 25.7653 cv
537.137 25.3362 537.203 24.7932 537.207 24.1252 cv
cp
536.152 22.5042 mo
536.148 22.5973 536.145 22.6953 536.133 22.7892 cv
536.117 22.8903 536.094 22.9843 536.066 23.0703 cv
535.953 23.4142 535.766 23.6762 535.504 23.8633 cv
535.238 24.0512 534.938 24.1483 534.602 24.1483 cv
534.035 24.1363 533.609 23.9293 533.32 23.5352 cv
533.031 23.1403 532.887 22.6523 532.887 22.0623 cv
532.895 21.3832 533.055 20.8473 533.371 20.4572 cv
533.684 20.0742 534.098 19.8752 534.617 19.8633 cv
535.004 19.8752 535.324 19.9843 535.574 20.1953 cv
535.82 20.4063 535.992 20.6722 536.094 20.9922 cv
536.113 21.0583 536.129 21.1332 536.141 21.2072 cv
536.145 21.2892 536.148 21.3712 536.152 21.4612 cv
cp
f
484.297 31.0512 mo
483.898 31.5543 483.543 32.2032 483.23 33.0042 cv
482.914 33.8043 482.746 34.7892 482.727 35.9572 cv
482.742 37.1252 482.91 38.1053 483.227 38.8983 cv
483.543 39.6913 483.898 40.3362 484.297 40.8322 cv
485.113 40.8322 li
484.68 40.2343 484.324 39.5432 484.047 38.7502 cv
483.766 37.9612 483.621 37.0352 483.613 35.9723 cv
483.617 34.8863 483.758 33.9413 484.035 33.1363 cv
484.305 32.3402 484.664 31.6443 485.113 31.0512 cv
cp
f
485.848 39.1013 mo
486.051 39.2263 486.293 39.3203 486.574 39.3943 cv
486.855 39.4683 487.156 39.5082 487.48 39.5113 cv
488.16 39.5002 488.688 39.3402 489.066 39.0233 cv
489.438 38.7072 489.629 38.2852 489.637 37.7582 cv
489.633 37.3322 489.504 36.9803 489.25 36.7032 cv
488.988 36.4293 488.609 36.2032 488.117 36.0193 cv
487.734 35.8792 487.457 35.7343 487.285 35.5902 cv
487.105 35.4453 487.02 35.2582 487.023 35.0233 cv
487.02 34.8043 487.102 34.6172 487.266 34.4652 cv
487.43 34.3163 487.668 34.2383 487.984 34.2303 cv
488.254 34.2383 488.492 34.2773 488.695 34.3513 cv
488.898 34.4262 489.055 34.5042 489.172 34.5782 cv
489.422 33.8123 li
489.262 33.7112 489.059 33.6252 488.816 33.5543 cv
488.57 33.4883 488.301 33.4572 488.008 33.4532 cv
487.379 33.4683 486.891 33.6332 486.539 33.9532 cv
486.188 34.2733 486.008 34.6762 486.004 35.1563 cv
486 35.5082 486.125 35.8203 486.379 36.0933 cv
486.633 36.3712 487.023 36.6053 487.551 36.8012 cv
487.93 36.9413 488.203 37.0902 488.371 37.2462 cv
488.539 37.4063 488.621 37.6093 488.621 37.8553 cv
488.617 38.1053 488.527 38.3123 488.344 38.4723 cv
488.16 38.6332 487.879 38.7152 487.504 38.7183 cv
487.23 38.7152 486.969 38.6722 486.723 38.5902 cv
486.473 38.5082 486.266 38.4142 486.102 38.3123 cv
cp
f
492.047 39.3792 mo
492.047 33.5703 li
490.992 33.5703 li
490.992 39.3792 li
cp
491.52 31.2932 mo
491.316 31.3012 491.16 31.3672 491.043 31.4883 cv
490.926 31.6133 490.863 31.7653 490.863 31.9492 cv
490.863 32.1363 490.922 32.2932 491.035 32.4102 cv
491.148 32.5352 491.301 32.5973 491.496 32.5973 cv
491.707 32.5973 491.871 32.5352 491.988 32.4102 cv
492.102 32.2932 492.164 32.1363 492.168 31.9492 cv
492.164 31.7613 492.102 31.6053 491.988 31.4803 cv
491.867 31.3593 491.711 31.2972 491.52 31.2932 cv
cp
f
498.77 35.1563 mo
498.766 34.8123 498.77 34.5113 498.777 34.2582 cv
498.781 34.0042 498.793 33.7773 498.816 33.5703 cv
497.883 33.5703 li
497.848 34.4453 li
497.824 34.4453 li
497.691 34.1953 497.48 33.9723 497.195 33.7693 cv
496.902 33.5742 496.508 33.4683 496.008 33.4532 cv
495.551 33.4572 495.125 33.5742 494.73 33.8123 cv
494.332 34.0512 494.008 34.3983 493.766 34.8513 cv
493.516 35.3083 493.391 35.8672 493.383 36.5233 cv
493.395 37.3473 493.625 38.0193 494.078 38.5432 cv
494.527 39.0703 495.121 39.3402 495.855 39.3553 cv
496.305 39.3473 496.684 39.2542 496.996 39.0703 cv
497.305 38.8903 497.539 38.6602 497.703 38.3832 cv
497.727 38.3832 li
497.727 39.0193 li
497.711 39.7502 497.535 40.2693 497.195 40.5902 cv
496.848 40.9063 496.402 41.0623 495.855 41.0583 cv
495.488 41.0543 495.16 41.0082 494.875 40.9182 cv
494.582 40.8282 494.34 40.7183 494.148 40.5902 cv
493.887 41.4063 li
494.125 41.5623 494.418 41.6793 494.766 41.7613 cv
495.109 41.8433 495.457 41.8863 495.816 41.8863 cv
496.188 41.8863 496.563 41.8322 496.938 41.7303 cv
497.309 41.6212 497.645 41.4413 497.941 41.1913 cv
498.215 40.9333 498.422 40.5933 498.563 40.1682 cv
498.699 39.7383 498.766 39.1953 498.77 38.5273 cv
cp
497.715 36.9063 mo
497.711 37.0002 497.707 37.0973 497.695 37.1913 cv
497.68 37.2932 497.656 37.3863 497.629 37.4723 cv
497.516 37.8163 497.328 38.0782 497.066 38.2653 cv
496.801 38.4532 496.5 38.5512 496.164 38.5512 cv
495.598 38.5392 495.172 38.3322 494.883 37.9373 cv
494.594 37.5432 494.449 37.0543 494.449 36.4652 cv
494.457 35.7852 494.617 35.2502 494.934 34.8593 cv
495.246 34.4763 495.66 34.2773 496.18 34.2653 cv
496.566 34.2773 496.887 34.3863 497.137 34.5973 cv
497.383 34.8083 497.555 35.0742 497.656 35.3943 cv
497.676 35.4612 497.691 35.5352 497.703 35.6093 cv
497.707 35.6913 497.711 35.7733 497.715 35.8633 cv
cp
f
500.438 39.3792 mo
501.492 39.3792 li
501.492 35.8863 li
501.488 35.7972 501.496 35.7112 501.512 35.6252 cv
501.523 35.5432 501.543 35.4652 501.566 35.3943 cv
501.664 35.0933 501.836 34.8433 502.09 34.6363 cv
502.336 34.4333 502.637 34.3242 502.984 34.3123 cv
503.473 34.3282 503.82 34.4962 504.027 34.8203 cv
504.23 35.1483 504.328 35.5543 504.328 36.0313 cv
504.328 39.3792 li
505.383 39.3792 li
505.383 35.9222 li
505.367 35.2653 505.25 34.7582 505.027 34.3983 cv
504.801 34.0392 504.531 33.7892 504.219 33.6483 cv
503.902 33.5113 503.605 33.4492 503.332 33.4532 cv
502.844 33.4683 502.441 33.5782 502.117 33.7892 cv
501.789 34.0042 501.551 34.2542 501.41 34.5313 cv
501.387 34.5313 li
501.324 33.5703 li
500.391 33.5703 li
500.406 33.8123 500.422 34.0583 500.43 34.3083 cv
500.438 34.5663 500.438 34.8433 500.438 35.1443 cv
cp
f
511.766 36.6682 mo
511.777 36.6093 511.785 36.5392 511.793 36.4572 cv
511.797 36.3792 511.801 36.2852 511.801 36.1762 cv
511.805 35.8083 511.738 35.4142 511.602 34.9962 cv
511.465 34.5782 511.219 34.2223 510.871 33.9222 cv
510.52 33.6252 510.031 33.4683 509.402 33.4532 cv
508.836 33.4612 508.352 33.5973 507.945 33.8712 cv
507.539 34.1443 507.227 34.5153 507.008 34.9843 cv
506.789 35.4532 506.68 35.9843 506.68 36.5703 cv
506.688 37.4652 506.938 38.1722 507.438 38.6992 cv
507.93 39.2263 508.629 39.4962 509.535 39.5113 cv
509.992 39.5042 510.387 39.4612 510.711 39.3863 cv
511.035 39.3083 511.289 39.2303 511.477 39.1403 cv
511.285 38.3832 li
511.098 38.4683 510.875 38.5432 510.621 38.5973 cv
510.363 38.6563 510.051 38.6833 509.68 38.6833 cv
509.129 38.6913 508.664 38.5352 508.289 38.2112 cv
507.91 37.8943 507.711 37.3792 507.688 36.6682 cv
cp
507.699 35.9102 mo
507.723 35.6602 507.793 35.4063 507.914 35.1443 cv
508.031 34.8863 508.207 34.6682 508.438 34.4883 cv
508.664 34.3123 508.957 34.2183 509.32 34.2072 cv
509.707 34.2183 510.008 34.3163 510.227 34.5042 cv
510.438 34.6913 510.586 34.9182 510.672 35.1762 cv
510.75 35.4413 510.789 35.6833 510.785 35.9102 cv
cp
f
517.07 30.8593 mo
517.07 34.3282 li
517.047 34.3282 li
516.91 34.0933 516.699 33.8903 516.406 33.7183 cv
516.113 33.5512 515.742 33.4652 515.293 33.4532 cv
514.816 33.4612 514.383 33.5862 513.992 33.8282 cv
513.598 34.0782 513.281 34.4333 513.047 34.8943 cv
512.809 35.3633 512.691 35.9182 512.691 36.5583 cv
512.707 37.4572 512.945 38.1682 513.41 38.6992 cv
513.875 39.2263 514.469 39.4962 515.188 39.5113 cv
515.664 39.5002 516.066 39.3943 516.402 39.1833 cv
516.734 38.9763 516.984 38.7032 517.145 38.3712 cv
517.18 38.3712 li
517.227 39.3792 li
518.16 39.3792 li
518.145 39.1762 518.137 38.9413 518.129 38.6762 cv
518.117 38.4102 518.109 38.1443 518.113 37.8792 cv
518.113 30.8593 li
cp
517.07 36.9413 mo
517.066 37.0273 517.063 37.1093 517.059 37.1793 cv
517.051 37.2582 517.039 37.3282 517.023 37.3983 cv
516.914 37.7932 516.723 38.1013 516.441 38.3203 cv
516.16 38.5432 515.836 38.6563 515.473 38.6602 cv
514.906 38.6483 514.48 38.4373 514.191 38.0273 cv
513.902 37.6252 513.758 37.1212 513.758 36.5113 cv
513.762 35.8633 513.914 35.3322 514.219 34.9182 cv
514.52 34.5082 514.945 34.2932 515.5 34.2773 cv
515.895 34.2892 516.227 34.4102 516.496 34.6363 cv
516.762 34.8712 516.938 35.1563 517.023 35.4922 cv
517.039 35.5623 517.051 35.6363 517.059 35.7152 cv
517.063 35.7972 517.066 35.8672 517.07 35.9333 cv
cp
f
519.359 35.7542 mo
519.359 36.5233 li
522.324 36.5233 li
522.324 35.7542 li
cp
f
523.559 37.8792 mo
523.555 38.1443 523.551 38.4102 523.543 38.6762 cv
523.531 38.9413 523.52 39.1762 523.512 39.3792 cv
524.41 39.3792 li
524.473 38.4293 li
524.496 38.4293 li
524.715 38.8083 524.992 39.0862 525.324 39.2542 cv
525.652 39.4262 526.027 39.5082 526.453 39.5113 cv
526.891 39.5082 527.309 39.3943 527.707 39.1682 cv
528.098 38.9373 528.422 38.5933 528.676 38.1332 cv
528.926 37.6762 529.055 37.0973 529.066 36.4023 cv
529.051 35.5113 528.824 34.8012 528.383 34.2693 cv
527.934 33.7383 527.344 33.4683 526.609 33.4532 cv
526.137 33.4612 525.734 33.5543 525.402 33.7383 cv
525.07 33.9262 524.809 34.1833 524.625 34.5082 cv
524.602 34.5082 li
524.602 30.8593 li
523.559 30.8593 li
cp
524.602 36.0193 mo
524.598 35.9413 524.605 35.8633 524.617 35.7852 cv
524.629 35.7152 524.645 35.6443 524.664 35.5742 cv
524.781 35.1762 524.984 34.8593 525.277 34.6292 cv
525.566 34.4023 525.895 34.2852 526.258 34.2773 cv
526.828 34.2972 527.262 34.5113 527.559 34.9222 cv
527.852 35.3362 527.996 35.8402 528 36.4373 cv
527.992 37.1172 527.84 37.6563 527.535 38.0543 cv
527.23 38.4572 526.797 38.6642 526.234 38.6722 cv
525.844 38.6682 525.508 38.5543 525.227 38.3282 cv
524.945 38.1093 524.754 37.8083 524.652 37.4333 cv
524.633 37.3752 524.617 37.3163 524.613 37.2502 cv
524.602 37.1873 524.598 37.1212 524.602 37.0512 cv
cp
f
531.441 39.3792 mo
531.441 33.5703 li
530.387 33.5703 li
530.387 39.3792 li
cp
530.914 31.2932 mo
530.711 31.3012 530.555 31.3672 530.438 31.4883 cv
530.32 31.6133 530.258 31.7653 530.258 31.9492 cv
530.258 32.1363 530.316 32.2932 530.43 32.4102 cv
530.543 32.5352 530.695 32.5973 530.891 32.5973 cv
531.102 32.5973 531.266 32.5352 531.383 32.4102 cv
531.496 32.2932 531.559 32.1363 531.563 31.9492 cv
531.559 31.7613 531.496 31.6053 531.383 31.4803 cv
531.262 31.3593 531.105 31.2972 530.914 31.2932 cv
cp
f
533.438 32.4922 mo
533.438 33.5703 li
532.535 33.5703 li
532.535 34.3752 li
533.438 34.3752 li
533.438 37.5512 li
533.434 37.8903 533.465 38.1873 533.531 38.4413 cv
533.594 38.6992 533.699 38.9102 533.844 39.0663 cv
533.969 39.2112 534.129 39.3163 534.324 39.3903 cv
534.516 39.4683 534.734 39.5082 534.984 39.5113 cv
535.184 39.5082 535.363 39.4922 535.527 39.4652 cv
535.684 39.4333 535.816 39.4023 535.918 39.3672 cv
535.871 38.5623 li
535.793 38.5933 535.707 38.6133 535.613 38.6212 cv
535.52 38.6363 535.398 38.6403 535.258 38.6363 cv
534.965 38.6363 534.762 38.5392 534.641 38.3433 cv
534.52 38.1523 534.461 37.8752 534.469 37.5082 cv
534.469 34.3752 li
535.98 34.3752 li
535.98 33.5703 li
534.469 33.5703 li
534.469 32.1793 li
cp
f
486.852 52.7813 mo
486.699 52.8513 486.52 52.9182 486.313 52.9723 cv
486.102 53.0313 485.852 53.0583 485.555 53.0583 cv
484.965 53.0543 484.484 52.8593 484.113 52.4763 cv
483.742 52.0933 483.551 51.5663 483.539 50.8863 cv
483.539 50.2733 483.715 49.7582 484.066 49.3402 cv
484.414 48.9262 484.922 48.7072 485.59 48.6873 cv
485.879 48.6953 486.121 48.7263 486.324 48.7773 cv
486.523 48.8362 486.688 48.8983 486.816 48.9652 cv
487.055 48.1602 li
486.906 48.0822 486.703 48.0113 486.449 47.9492 cv
486.191 47.8903 485.906 47.8593 485.59 47.8513 cv
484.629 47.8712 483.871 48.1602 483.32 48.7263 cv
482.762 49.2972 482.48 50.0392 482.473 50.9453 cv
482.48 51.8513 482.742 52.5663 483.258 53.0933 cv
483.773 53.6252 484.473 53.8943 485.363 53.9102 cv
485.754 53.8983 486.098 53.8593 486.387 53.7892 cv
486.676 53.7183 486.891 53.6483 487.031 53.5742 cv
cp
f
488.27 53.7773 mo
489.324 53.7773 li
489.324 50.6793 li
489.32 50.5973 489.324 50.5113 489.332 50.4262 cv
489.336 50.3402 489.348 50.2613 489.363 50.1873 cv
489.438 49.7892 489.598 49.4683 489.844 49.2223 cv
490.09 48.9803 490.398 48.8513 490.777 48.8433 cv
490.844 48.8433 490.91 48.8473 490.969 48.8473 cv
491.027 48.8553 491.082 48.8593 491.137 48.8672 cv
491.137 47.8752 li
491.086 47.8712 491.039 47.8633 490.996 47.8593 cv
490.949 47.8553 490.902 47.8553 490.852 47.8513 cv
490.488 47.8593 490.16 47.9723 489.871 48.1953 cv
489.578 48.4222 489.363 48.7303 489.23 49.1212 cv
489.195 49.1212 li
489.145 47.9683 li
488.223 47.9683 li
488.238 48.2422 488.254 48.5273 488.262 48.8242 cv
488.27 49.1252 488.27 49.4413 488.27 49.7813 cv
cp
f
494.535 47.8513 mo
493.992 47.8553 493.508 47.9763 493.078 48.2183 cv
492.645 48.4652 492.301 48.8163 492.047 49.2693 cv
491.789 49.7303 491.66 50.2813 491.656 50.9222 cv
491.672 51.8513 491.938 52.5782 492.461 53.1053 cv
492.977 53.6332 493.637 53.8983 494.438 53.9102 cv
494.91 53.9063 495.367 53.8012 495.805 53.5862 cv
496.242 53.3712 496.602 53.0352 496.891 52.5822 cv
497.172 52.1292 497.32 51.5432 497.332 50.8242 cv
497.316 49.9293 497.059 49.2152 496.559 48.6762 cv
496.055 48.1403 495.379 47.8672 494.535 47.8513 cv
cp
494.512 48.6403 mo
494.922 48.6523 495.258 48.7733 495.516 49.0002 cv
495.77 49.2303 495.957 49.5113 496.078 49.8473 cv
496.191 50.1873 496.25 50.5273 496.254 50.8633 cv
496.238 51.5313 496.07 52.0703 495.746 52.4803 cv
495.418 52.8983 494.996 53.1093 494.488 53.1172 cv
493.957 53.1053 493.535 52.8943 493.223 52.4803 cv
492.902 52.0703 492.742 51.5392 492.734 50.8863 cv
492.734 50.5193 492.797 50.1642 492.922 49.8203 cv
493.047 49.4843 493.238 49.2032 493.5 48.9803 cv
493.762 48.7653 494.098 48.6523 494.512 48.6403 cv
cp
f
498.266 53.5002 mo
498.469 53.6252 498.711 53.7183 498.992 53.7932 cv
499.273 53.8672 499.574 53.9063 499.898 53.9102 cv
500.578 53.8983 501.105 53.7383 501.484 53.4222 cv
501.855 53.1053 502.047 52.6833 502.055 52.1563 cv
502.051 51.7303 501.922 51.3792 501.668 51.1013 cv
501.406 50.8282 501.027 50.6013 500.535 50.4182 cv
500.152 50.2773 499.875 50.1332 499.703 49.9883 cv
499.523 49.8433 499.438 49.6563 499.441 49.4222 cv
499.438 49.2032 499.52 49.0153 499.684 48.8633 cv
499.848 48.7152 500.086 48.6363 500.402 48.6292 cv
500.672 48.6363 500.91 48.6762 501.113 48.7502 cv
501.316 48.8242 501.473 48.9023 501.59 48.9763 cv
501.84 48.2112 li
501.68 48.1093 501.477 48.0233 501.234 47.9532 cv
500.988 47.8863 500.719 47.8553 500.426 47.8513 cv
499.797 47.8672 499.309 48.0313 498.957 48.3513 cv
498.605 48.6722 498.426 49.0742 498.422 49.5543 cv
498.418 49.9063 498.543 50.2183 498.797 50.4922 cv
499.051 50.7693 499.441 51.0042 499.969 51.1992 cv
500.348 51.3402 500.621 51.4883 500.789 51.6443 cv
500.957 51.8043 501.039 52.0082 501.039 52.2542 cv
501.035 52.5042 500.945 52.7112 500.762 52.8712 cv
500.578 53.0313 500.297 53.1133 499.922 53.1172 cv
499.648 53.1133 499.387 53.0703 499.141 52.9883 cv
498.891 52.9063 498.684 52.8123 498.52 52.7112 cv
cp
f
503.02 53.5002 mo
503.223 53.6252 503.465 53.7183 503.746 53.7932 cv
504.027 53.8672 504.328 53.9063 504.652 53.9102 cv
505.332 53.8983 505.859 53.7383 506.238 53.4222 cv
506.609 53.1053 506.801 52.6833 506.809 52.1563 cv
506.805 51.7303 506.676 51.3792 506.422 51.1013 cv
506.16 50.8282 505.781 50.6013 505.289 50.4182 cv
504.906 50.2773 504.629 50.1332 504.457 49.9883 cv
504.277 49.8433 504.191 49.6563 504.195 49.4222 cv
504.191 49.2032 504.273 49.0153 504.438 48.8633 cv
504.602 48.7152 504.84 48.6363 505.156 48.6292 cv
505.426 48.6363 505.664 48.6762 505.867 48.7502 cv
506.07 48.8242 506.227 48.9023 506.344 48.9763 cv
506.594 48.2112 li
506.434 48.1093 506.23 48.0233 505.988 47.9532 cv
505.742 47.8863 505.473 47.8553 505.18 47.8513 cv
504.551 47.8672 504.063 48.0313 503.711 48.3513 cv
503.359 48.6722 503.18 49.0742 503.176 49.5543 cv
503.172 49.9063 503.297 50.2183 503.551 50.4922 cv
503.805 50.7693 504.195 51.0042 504.723 51.1992 cv
505.102 51.3402 505.375 51.4883 505.543 51.6443 cv
505.711 51.8043 505.793 52.0082 505.793 52.2542 cv
505.789 52.5042 505.699 52.7112 505.516 52.8712 cv
505.332 53.0313 505.051 53.1133 504.676 53.1172 cv
504.402 53.1133 504.141 53.0703 503.895 52.9883 cv
503.645 52.9063 503.438 52.8123 503.273 52.7112 cv
cp
f
507.648 50.1523 mo
507.648 50.9222 li
510.613 50.9222 li
510.613 50.1523 li
cp
f
516.027 52.7813 mo
515.875 52.8513 515.695 52.9182 515.488 52.9723 cv
515.277 53.0313 515.027 53.0583 514.73 53.0583 cv
514.141 53.0543 513.66 52.8593 513.289 52.4763 cv
512.918 52.0933 512.727 51.5663 512.715 50.8863 cv
512.715 50.2733 512.891 49.7582 513.242 49.3402 cv
513.59 48.9262 514.098 48.7072 514.766 48.6873 cv
515.055 48.6953 515.297 48.7263 515.5 48.7773 cv
515.699 48.8362 515.863 48.8983 515.992 48.9652 cv
516.23 48.1602 li
516.082 48.0822 515.879 48.0113 515.625 47.9492 cv
515.367 47.8903 515.082 47.8593 514.766 47.8513 cv
513.805 47.8712 513.047 48.1602 512.496 48.7263 cv
511.938 49.2972 511.656 50.0392 511.648 50.9453 cv
511.656 51.8513 511.918 52.5663 512.434 53.0933 cv
512.949 53.6252 513.648 53.8943 514.539 53.9102 cv
514.93 53.8983 515.273 53.8593 515.563 53.7892 cv
515.852 53.7183 516.066 53.6483 516.207 53.5742 cv
cp
f
519.828 47.8513 mo
519.285 47.8553 518.801 47.9763 518.371 48.2183 cv
517.938 48.4652 517.594 48.8163 517.34 49.2693 cv
517.082 49.7303 516.953 50.2813 516.949 50.9222 cv
516.965 51.8513 517.23 52.5782 517.754 53.1053 cv
518.27 53.6332 518.93 53.8983 519.73 53.9102 cv
520.203 53.9063 520.66 53.8012 521.098 53.5862 cv
521.535 53.3712 521.895 53.0352 522.184 52.5822 cv
522.465 52.1292 522.613 51.5432 522.625 50.8242 cv
522.609 49.9293 522.352 49.2152 521.852 48.6762 cv
521.348 48.1403 520.672 47.8672 519.828 47.8513 cv
cp
519.805 48.6403 mo
520.215 48.6523 520.551 48.7733 520.809 49.0002 cv
521.063 49.2303 521.25 49.5113 521.371 49.8473 cv
521.484 50.1873 521.543 50.5273 521.547 50.8633 cv
521.531 51.5313 521.363 52.0703 521.039 52.4803 cv
520.711 52.8983 520.289 53.1093 519.781 53.1172 cv
519.25 53.1053 518.828 52.8943 518.516 52.4803 cv
518.195 52.0703 518.035 51.5392 518.027 50.8863 cv
518.027 50.5193 518.09 50.1642 518.215 49.8203 cv
518.34 49.4843 518.531 49.2032 518.793 48.9803 cv
519.055 48.7653 519.391 48.6523 519.805 48.6403 cv
cp
f
523.957 53.7773 mo
525.012 53.7773 li
525.012 50.6793 li
525.008 50.5973 525.012 50.5113 525.02 50.4262 cv
525.023 50.3402 525.035 50.2613 525.051 50.1873 cv
525.125 49.7892 525.285 49.4683 525.531 49.2223 cv
525.777 48.9803 526.086 48.8513 526.465 48.8433 cv
526.531 48.8433 526.598 48.8473 526.656 48.8473 cv
526.715 48.8553 526.77 48.8593 526.824 48.8672 cv
526.824 47.8752 li
526.773 47.8712 526.727 47.8633 526.684 47.8593 cv
526.637 47.8553 526.59 47.8553 526.539 47.8513 cv
526.176 47.8593 525.848 47.9723 525.559 48.1953 cv
525.266 48.4222 525.051 48.7303 524.918 49.1212 cv
524.883 49.1212 li
524.832 47.9683 li
523.91 47.9683 li
523.926 48.2422 523.941 48.5273 523.949 48.8242 cv
523.957 49.1252 523.957 49.4413 523.957 49.7813 cv
cp
f
527.93 53.7773 mo
528.984 53.7773 li
528.984 50.6793 li
528.98 50.5973 528.984 50.5113 528.992 50.4262 cv
528.996 50.3402 529.008 50.2613 529.023 50.1873 cv
529.098 49.7892 529.258 49.4683 529.504 49.2223 cv
529.75 48.9803 530.059 48.8513 530.438 48.8433 cv
530.504 48.8433 530.57 48.8473 530.629 48.8473 cv
530.688 48.8553 530.742 48.8593 530.797 48.8672 cv
530.797 47.8752 li
530.746 47.8712 530.699 47.8633 530.656 47.8593 cv
530.609 47.8553 530.563 47.8553 530.512 47.8513 cv
530.148 47.8593 529.82 47.9723 529.531 48.1953 cv
529.238 48.4222 529.023 48.7303 528.891 49.1212 cv
528.855 49.1212 li
528.805 47.9683 li
527.883 47.9683 li
527.898 48.2422 527.914 48.5273 527.922 48.8242 cv
527.93 49.1252 527.93 49.4413 527.93 49.7813 cv
cp
f
531.66 53.9102 mo
531.879 53.9023 532.059 53.8322 532.191 53.6953 cv
532.32 53.5543 532.387 53.3752 532.391 53.1523 cv
532.387 52.9293 532.32 52.7502 532.195 52.6093 cv
532.066 52.4763 531.895 52.4063 531.684 52.3983 cv
531.465 52.4063 531.293 52.4763 531.164 52.6172 cv
531.031 52.7582 530.965 52.9373 530.965 53.1523 cv
530.965 53.3752 531.027 53.5543 531.156 53.6953 cv
531.281 53.8322 531.449 53.9023 531.66 53.9102 cv
cp
f
533.883 55.2303 mo
534.273 54.7303 534.629 54.0822 534.945 53.2852 cv
535.258 52.4883 535.426 51.5042 535.453 50.3322 cv
535.434 49.1642 535.266 48.1793 534.949 47.3792 cv
534.633 46.5822 534.277 45.9413 533.883 45.4492 cv
533.066 45.4492 li
533.496 46.0472 533.852 46.7383 534.133 47.5313 cv
534.406 48.3282 534.551 49.2613 534.566 50.3322 cv
534.551 51.4102 534.406 52.3473 534.129 53.1443 cv
533.848 53.9413 533.492 54.6363 533.066 55.2303 cv
cp
f
gsave
0 315 mo
576 315 li
576 0 li
0 0 li
cp
clp
469.59 0.496002 mo
546.34 0.496002 li
546.34 70.949 li
469.59 70.949 li
cp
@
336.59 159.844 mo
402.09 159.844 li
402.09 185.949 li
336.59 185.949 li
cp
@
162.215 101.395 mo
173.027 101.395 li
@
180.09 101.395 mo
170.141 105.461 li
172.5 101.395 li
170.141 97.332 li
cp
f
233.59 101.395 mo
253.527 101.395 li
@
260.59 101.395 mo
250.641 105.461 li
253 101.395 li
250.641 97.332 li
cp
f
232.59 127.449 mo
253.527 127.449 li
@
260.59 127.449 mo
250.641 131.516 li
253 127.449 li
250.641 123.387 li
cp
f
288.59 101.055 mo
317.527 101.055 li
@
324.59 101.055 mo
314.641 105.121 li
317 101.055 li
314.641 96.992 li
cp
f
237.59 151.949 mo
281.09 151.949 li
281.09 169.449 li
237.59 169.449 li
cp
@
232.59 127.035 mo
232.59 161.117 li
@
232.258 160.699 mo
237.59 160.699 li
@
288.148 160.699 mo
296.09 160.699 li
@
281.09 160.699 mo
291.039 164.766 li
288.676 160.699 li
291.039 156.637 li
cp
f
295.59 160.699 mo
295.59 101.055 li
@
148.406 207.754 mo
126.918 230.594 li
147.684 231.074 mo
126.918 207.754 li
154.66 219.172 mo
154.66 227.312 147.051 233.91 137.66 233.91 cv
128.273 233.91 120.66 227.312 120.66 219.172 cv
120.66 211.035 128.273 204.437 137.66 204.437 cv
147.051 204.437 154.66 211.035 154.66 219.172 cv
cp
@
34.922 195.949 mo
126.34 195.949 li
@
155.262 219.172 mo
253.699 219.172 li
@
260.758 219.172 mo
250.809 223.238 li
253.172 219.172 li
250.809 215.109 li
cp
f
34.422 241.855 mo
126.258 241.855 li
@
126.09 195.762 mo
128.934 199.379 li
@
133.301 204.926 mo
123.953 199.621 li
128.609 198.961 li
130.344 194.594 li
cp
f
125.965 241.855 mo
128.668 238.746 li
@
133.301 233.422 mo
129.84 243.594 li
128.32 239.145 li
123.703 238.262 li
cp
f
288.258 220.137 mo
260.758 205.133 li
288.258 220.137 mo
288.258 272.383 li
260.758 286.633 mo
288.258 272.383 li
260.758 205.133 mo
260.758 286.633 li
@
162.758 219.172 mo
162.758 246.223 li
@
180.258 233.172 mo
233.758 233.172 li
233.758 259.277 li
180.258 259.277 li
cp
@
377.922 101.055 mo
445.922 101.055 li
445.922 130.879 li
377.922 130.879 li
cp
@
377.922 0.496002 mo
445.922 0.496002 li
445.922 70.949 li
377.922 70.949 li
cp
@
162.758 246.223 mo
180.258 246.223 li
@
546.34 35.723 mo
568.809 35.723 li
@
575.871 35.723 mo
565.922 39.789 li
568.281 35.723 li
565.922 31.66 li
cp
f
445.922 35.723 mo
462.527 35.723 li
@
469.59 35.723 mo
459.641 39.789 li
462 35.723 li
459.641 31.66 li
cp
f
233.758 246.223 mo
253.699 246.223 li
@
260.758 246.223 mo
250.809 250.289 li
253.172 246.223 li
250.809 242.16 li
cp
f
232.758 272.277 mo
253.699 272.277 li
@
260.758 272.277 mo
250.809 276.34 li
253.172 272.277 li
250.809 268.211 li
cp
f
288.758 245.883 mo
317.527 245.883 li
@
324.59 245.883 mo
314.641 249.949 li
317 245.883 li
314.641 241.82 li
cp
f
237.758 296.777 mo
281.422 296.777 li
281.422 314.277 li
237.758 314.277 li
cp
@
232.758 271.859 mo
232.758 305.941 li
@
232.758 305.527 mo
237.758 305.527 li
@
288.484 305.527 mo
296.172 305.527 li
@
281.422 305.527 mo
291.371 309.59 li
289.012 305.527 li
291.371 301.461 li
cp
f
295.758 305.527 mo
295.758 245.883 li
@
34.922 52.055 mo
34.922 241.855 li
@
54.09 97.027 mo
34.922 97.027 li
@
134.563 243.609 mo
134.395 242.395 li
133.301 241.844 li
134.402 241.312 li
134.586 240.098 li
135.438 240.984 li
136.645 240.785 li
136.066 241.867 li
136.629 242.953 li
135.422 242.738 li
cp
f
134.563 243.609 mo
134.395 242.395 li
133.301 241.844 li
134.402 241.312 li
134.586 240.098 li
135.438 240.984 li
136.645 240.785 li
136.066 241.867 li
136.629 242.953 li
135.422 242.738 li
cp
@
134.305 98.613 mo
134.137 97.398 li
133.043 96.848 li
134.145 96.316 li
134.328 95.105 li
135.18 95.988 li
136.387 95.789 li
135.809 96.871 li
136.371 97.957 li
135.164 97.742 li
cp
f
134.305 98.613 mo
134.137 97.398 li
133.043 96.848 li
134.145 96.316 li
134.328 95.105 li
135.18 95.988 li
136.387 95.789 li
135.809 96.871 li
136.371 97.957 li
135.164 97.742 li
cp
@
351.34 101.055 mo
369.258 101.055 li
@
350.715 246.223 mo
369.258 246.223 li
@
369.258 246.223 mo
369.258 193.008 li
@
369.258 185.949 mo
373.32 195.898 li
369.258 193.539 li
365.191 195.898 li
cp
f
369.59 101.055 mo
369.59 152.785 li
@
369.59 159.844 mo
365.523 149.895 li
369.59 152.254 li
373.652 149.895 li
cp
f
34.922 52.055 mo
34.922 16.449 li
@
34.922 16.449 mo
370.863 16.449 li
@
377.922 16.449 mo
367.973 20.516 li
370.336 16.449 li
367.973 12.387 li
cp
f
310.59 101.055 mo
310.59 52.055 li
@
310.172 52.055 mo
370.863 52.055 li
@
377.922 52.055 mo
367.973 56.121 li
370.336 52.055 li
367.973 47.992 li
cp
f
402.59 172.895 mo
412.758 172.895 li
@
412.758 173.008 mo
412.758 137.937 li
@
412.758 130.879 mo
416.82 140.828 li
412.758 138.465 li
408.691 140.828 li
cp
f
412.34 101.055 mo
412.34 78.008 li
@
412.34 70.949 mo
416.402 80.898 li
412.34 78.539 li
408.273 80.898 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
