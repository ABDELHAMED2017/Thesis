%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Pro_Sync.pdf
%%Creator: Adobe Acrobat 8.0
%%For: asian
%%CreationDate: 30/6/13, 4:15:52 PM
%%BoundingBox: 0 0 560 250
%%HiResBoundingBox: 0 0 559.0493 249.9053
%%CropBox: 0 0 559.0493 249.9053
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.30 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.30 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}				if				end		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:08:23">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xap:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -249.905 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 249.905 li
559.049 249.905 li
559.049 0 li
cp
clp
[1 0 0 1 0 0 ]ct
442.148 29.4723 mo
443.379 29.4723 li
443.379 25.2033 li
446.934 25.2033 li
446.934 24.1953 li
443.379 24.1953 li
443.379 21.0583 li
447.23 21.0583 li
447.23 20.0393 li
442.148 20.0393 li
cp
448.93 29.4723 mo
450.16 29.4723 li
450.16 25.8593 li
450.156 25.7613 450.16 25.6643 450.168 25.5623 cv
450.176 25.4683 450.188 25.3753 450.203 25.2853 cv
450.289 24.8203 450.473 24.4453 450.762 24.1563 cv
451.047 23.8753 451.41 23.7263 451.852 23.7183 cv
451.93 23.7183 452.008 23.7223 452.078 23.7223 cv
452.145 23.7303 452.207 23.7383 452.273 23.7463 cv
452.273 22.5863 li
452.215 22.5823 452.16 22.5743 452.109 22.5663 cv
452.055 22.5623 452 22.5583 451.938 22.5583 cv
451.516 22.5663 451.133 22.7033 450.797 22.9613 cv
450.453 23.2263 450.203 23.5863 450.047 24.0393 cv
450.004 24.0393 li
449.949 22.6993 li
448.875 22.6993 li
448.891 23.0113 448.906 23.3433 448.914 23.6913 cv
448.922 24.0433 448.926 24.4183 448.93 24.8123 cv
cp
458.941 26.3083 mo
458.953 26.2383 458.961 26.1563 458.969 26.0623 cv
458.973 25.9683 458.977 25.8593 458.98 25.7343 cv
458.984 25.3043 458.906 24.8473 458.75 24.3593 cv
458.586 23.8753 458.301 23.4573 457.895 23.1053 cv
457.484 22.7583 456.914 22.5743 456.184 22.5583 cv
455.52 22.5663 454.953 22.7303 454.48 23.0473 cv
454.004 23.3673 453.641 23.8003 453.387 24.3433 cv
453.133 24.8943 453.004 25.5113 453.004 26.1953 cv
453.012 27.2383 453.305 28.0663 453.887 28.6793 cv
454.465 29.2973 455.281 29.6093 456.336 29.6253 cv
456.871 29.6173 457.332 29.5663 457.711 29.4803 cv
458.09 29.3903 458.387 29.2973 458.605 29.1913 cv
458.379 28.3123 li
458.16 28.4143 457.902 28.4963 457.605 28.5583 cv
457.309 28.6253 456.941 28.6603 456.504 28.6603 cv
455.863 28.6723 455.32 28.4883 454.883 28.1133 cv
454.441 27.7383 454.207 27.1363 454.18 26.3083 cv
cp
454.195 25.4253 mo
454.223 25.1363 454.305 24.8403 454.445 24.5353 cv
454.582 24.2343 454.785 23.9763 455.055 23.7653 cv
455.32 23.5543 455.664 23.4453 456.086 23.4373 cv
456.543 23.4493 456.898 23.5663 457.148 23.7853 cv
457.398 24.0083 457.57 24.2693 457.664 24.5703 cv
457.758 24.8793 457.801 25.1643 457.793 25.4253 cv
cp
461.039 29.6253 mo
461.301 29.6173 461.508 29.5353 461.66 29.3753 cv
461.809 29.2153 461.887 29.0043 461.895 28.7463 cv
461.887 28.4843 461.809 28.2733 461.664 28.1133 cv
461.512 27.9533 461.313 27.8713 461.066 27.8633 cv
460.816 27.8713 460.617 27.9573 460.465 28.1173 cv
460.309 28.2813 460.23 28.4883 460.23 28.7463 cv
460.23 29.0043 460.305 29.2153 460.453 29.3753 cv
460.598 29.5353 460.793 29.6173 461.039 29.6253 cv
cp
470.25 19.8713 mo
469.398 19.8793 468.648 20.0863 467.996 20.4883 cv
467.34 20.8983 466.824 21.4683 466.453 22.2073 cv
466.078 22.9493 465.891 23.8243 465.883 24.8243 cv
465.902 26.2773 466.293 27.4333 467.063 28.2973 cv
467.828 29.1603 468.852 29.6013 470.125 29.6253 cv
470.938 29.6253 471.672 29.4373 472.332 29.0583 cv
472.988 28.6793 473.512 28.1213 473.906 27.3833 cv
474.293 26.6483 474.496 25.7383 474.508 24.6563 cv
474.5 23.7113 474.32 22.8833 473.977 22.1643 cv
473.625 21.4533 473.137 20.8903 472.504 20.4843 cv
471.871 20.0823 471.117 19.8793 470.25 19.8713 cv
cp
470.207 20.8633 mo
470.883 20.8793 471.441 21.0703 471.891 21.4413 cv
472.332 21.8163 472.664 22.2933 472.887 22.8753 cv
473.105 23.4613 473.219 24.0743 473.219 24.7113 cv
473.219 25.4373 473.098 26.0933 472.863 26.6833 cv
472.625 27.2733 472.285 27.7463 471.836 28.0933 cv
471.387 28.4493 470.84 28.6293 470.195 28.6333 cv
469.547 28.6253 468.996 28.4413 468.551 28.0903 cv
468.098 27.7383 467.758 27.2733 467.523 26.6953 cv
467.289 26.1173 467.172 25.4843 467.172 24.7973 cv
467.168 24.1013 467.277 23.4573 467.504 22.8633 cv
467.727 22.2693 468.066 21.7933 468.52 21.4253 cv
468.969 21.0663 469.531 20.8793 470.207 20.8633 cv
cp
477.395 29.4723 mo
477.395 23.6333 li
479.035 23.6333 li
479.035 22.6993 li
477.395 22.6993 li
477.395 22.3323 li
477.379 21.7933 477.469 21.3363 477.66 20.9573 cv
477.844 20.5863 478.195 20.3903 478.711 20.3713 cv
478.891 20.3793 479.043 20.3943 479.172 20.4183 cv
479.297 20.4493 479.406 20.4843 479.496 20.5273 cv
479.664 19.5743 li
479.543 19.5273 479.395 19.4803 479.219 19.4413 cv
479.039 19.4023 478.836 19.3833 478.613 19.3793 cv
478.316 19.3793 478.027 19.4293 477.746 19.5273 cv
477.457 19.6293 477.199 19.7893 476.965 20.0083 cv
476.684 20.2893 476.48 20.6333 476.359 21.0393 cv
476.234 21.4533 476.176 21.8983 476.18 22.3753 cv
476.18 22.6993 li
475.242 22.6993 li
475.242 23.6333 li
476.18 23.6333 li
476.18 29.4723 li
cp
481.496 29.4723 mo
481.496 23.6333 li
483.137 23.6333 li
483.137 22.6993 li
481.496 22.6993 li
481.496 22.3323 li
481.48 21.7933 481.57 21.3363 481.762 20.9573 cv
481.945 20.5863 482.297 20.3903 482.813 20.3713 cv
482.992 20.3793 483.145 20.3943 483.273 20.4183 cv
483.398 20.4493 483.508 20.4843 483.598 20.5273 cv
483.766 19.5743 li
483.645 19.5273 483.496 19.4803 483.32 19.4413 cv
483.141 19.4023 482.938 19.3833 482.715 19.3793 cv
482.418 19.3793 482.129 19.4293 481.848 19.5273 cv
481.559 19.6293 481.301 19.7893 481.066 20.0083 cv
480.785 20.2893 480.582 20.6333 480.461 21.0393 cv
480.336 21.4533 480.277 21.8983 480.281 22.3753 cv
480.281 22.6993 li
479.344 22.6993 li
479.344 23.6333 li
480.281 23.6333 li
480.281 29.4723 li
cp
483.797 29.1523 mo
484.035 29.2973 484.316 29.4063 484.645 29.4923 cv
484.969 29.5743 485.32 29.6213 485.699 29.6253 cv
486.492 29.6133 487.109 29.4253 487.551 29.0543 cv
487.984 28.6873 488.207 28.1953 488.219 27.5823 cv
488.215 27.0863 488.063 26.6753 487.762 26.3553 cv
487.461 26.0353 487.02 25.7693 486.441 25.5503 cv
485.996 25.3863 485.676 25.2183 485.473 25.0503 cv
485.266 24.8833 485.16 24.6643 485.164 24.3903 cv
485.164 24.1333 485.262 23.9143 485.453 23.7383 cv
485.641 23.5663 485.918 23.4763 486.285 23.4653 cv
486.602 23.4763 486.879 23.5233 487.113 23.6053 cv
487.348 23.6953 487.531 23.7813 487.672 23.8713 cv
487.965 22.9763 li
487.777 22.8553 487.543 22.7583 487.262 22.6793 cv
486.973 22.6053 486.66 22.5623 486.316 22.5583 cv
485.586 22.5743 485.016 22.7693 484.605 23.1403 cv
484.191 23.5193 483.98 23.9883 483.977 24.5433 cv
483.973 24.9573 484.117 25.3203 484.414 25.6403 cv
484.707 25.9653 485.164 26.2383 485.781 26.4613 cv
486.223 26.6253 486.543 26.8003 486.742 26.9883 cv
486.934 27.1753 487.027 27.4143 487.027 27.6953 cv
487.027 27.9923 486.922 28.2303 486.707 28.4183 cv
486.492 28.6053 486.164 28.7033 485.727 28.7033 cv
485.406 28.7033 485.105 28.6523 484.816 28.5503 cv
484.527 28.4573 484.285 28.3473 484.09 28.2263 cv
cp
495.254 26.3083 mo
495.266 26.2383 495.273 26.1563 495.281 26.0623 cv
495.285 25.9683 495.289 25.8593 495.293 25.7343 cv
495.297 25.3043 495.219 24.8473 495.063 24.3593 cv
494.898 23.8753 494.613 23.4573 494.207 23.1053 cv
493.797 22.7583 493.227 22.5743 492.496 22.5583 cv
491.832 22.5663 491.266 22.7303 490.793 23.0473 cv
490.316 23.3673 489.953 23.8003 489.699 24.3433 cv
489.445 24.8943 489.316 25.5113 489.316 26.1953 cv
489.324 27.2383 489.617 28.0663 490.199 28.6793 cv
490.777 29.2973 491.594 29.6093 492.648 29.6253 cv
493.184 29.6173 493.645 29.5663 494.023 29.4803 cv
494.402 29.3903 494.699 29.2973 494.918 29.1913 cv
494.691 28.3123 li
494.473 28.4143 494.215 28.4963 493.918 28.5583 cv
493.621 28.6253 493.254 28.6603 492.816 28.6603 cv
492.176 28.6723 491.633 28.4883 491.195 28.1133 cv
490.754 27.7383 490.52 27.1363 490.492 26.3083 cv
cp
490.508 25.4253 mo
490.535 25.1363 490.617 24.8403 490.758 24.5353 cv
490.895 24.2343 491.098 23.9763 491.367 23.7653 cv
491.633 23.5543 491.977 23.4453 492.398 23.4373 cv
492.855 23.4493 493.211 23.5663 493.461 23.7853 cv
493.711 24.0083 493.883 24.2693 493.977 24.5703 cv
494.07 24.8793 494.113 25.1643 494.105 25.4253 cv
cp
497.117 21.4373 mo
497.117 22.6993 li
496.066 22.6993 li
496.066 23.6333 li
497.117 23.6333 li
497.117 27.3403 li
497.113 27.7383 497.148 28.0863 497.227 28.3793 cv
497.297 28.6793 497.418 28.9223 497.59 29.1093 cv
497.734 29.2733 497.922 29.3983 498.148 29.4883 cv
498.371 29.5783 498.629 29.6253 498.918 29.6253 cv
499.156 29.6253 499.367 29.6053 499.555 29.5743 cv
499.738 29.5353 499.891 29.5003 500.012 29.4573 cv
499.957 28.5233 li
499.863 28.5503 499.766 28.5743 499.656 28.5863 cv
499.543 28.6013 499.402 28.6053 499.242 28.6053 cv
498.898 28.6053 498.66 28.4923 498.523 28.2613 cv
498.379 28.0393 498.309 27.7153 498.316 27.2893 cv
498.316 23.6333 li
500.082 23.6333 li
500.082 22.6993 li
498.316 22.6993 li
498.316 21.0743 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
440.332 41.5433 mo
436.68 41.5433 li
436.68 38.5583 li
440.559 38.5583 li
440.559 37.5393 li
435.449 37.5393 li
435.449 46.9723 li
440.766 46.9723 li
440.766 45.9533 li
436.68 45.9533 li
436.68 42.5473 li
440.332 42.5473 li
cp
441.852 46.6523 mo
442.09 46.7973 442.371 46.9063 442.699 46.9923 cv
443.023 47.0743 443.375 47.1213 443.754 47.1253 cv
444.547 47.1133 445.164 46.9253 445.605 46.5543 cv
446.039 46.1873 446.262 45.6953 446.273 45.0823 cv
446.27 44.5863 446.117 44.1753 445.816 43.8553 cv
445.516 43.5353 445.074 43.2693 444.496 43.0503 cv
444.051 42.8863 443.73 42.7183 443.527 42.5503 cv
443.32 42.3833 443.215 42.1643 443.219 41.8903 cv
443.219 41.6333 443.316 41.4143 443.508 41.2383 cv
443.695 41.0663 443.973 40.9763 444.34 40.9653 cv
444.656 40.9763 444.934 41.0233 445.168 41.1053 cv
445.402 41.1953 445.586 41.2813 445.727 41.3713 cv
446.02 40.4763 li
445.832 40.3553 445.598 40.2583 445.316 40.1793 cv
445.027 40.1053 444.715 40.0623 444.371 40.0583 cv
443.641 40.0743 443.07 40.2693 442.66 40.6403 cv
442.246 41.0193 442.035 41.4883 442.031 42.0433 cv
442.027 42.4573 442.172 42.8203 442.469 43.1403 cv
442.762 43.4653 443.219 43.7383 443.836 43.9613 cv
444.277 44.1253 444.598 44.3003 444.797 44.4883 cv
444.988 44.6753 445.082 44.9143 445.082 45.1953 cv
445.082 45.4923 444.977 45.7303 444.762 45.9183 cv
444.547 46.1053 444.219 46.2033 443.781 46.2033 cv
443.461 46.2033 443.16 46.1523 442.871 46.0503 cv
442.582 45.9573 442.34 45.8473 442.145 45.7263 cv
cp
448.145 38.9373 mo
448.145 40.1993 li
447.094 40.1993 li
447.094 41.1333 li
448.145 41.1333 li
448.145 44.8403 li
448.141 45.2383 448.176 45.5863 448.254 45.8793 cv
448.324 46.1793 448.445 46.4223 448.617 46.6093 cv
448.762 46.7733 448.949 46.8983 449.176 46.9883 cv
449.398 47.0783 449.656 47.1253 449.945 47.1253 cv
450.184 47.1253 450.395 47.1053 450.582 47.0743 cv
450.766 47.0353 450.918 47.0003 451.039 46.9573 cv
450.984 46.0233 li
450.891 46.0503 450.793 46.0743 450.684 46.0863 cv
450.57 46.1013 450.43 46.1053 450.27 46.1053 cv
449.926 46.1053 449.688 45.9923 449.551 45.7613 cv
449.406 45.5393 449.336 45.2153 449.344 44.7893 cv
449.344 41.1333 li
451.109 41.1333 li
451.109 40.1993 li
449.344 40.1993 li
449.344 38.5743 li
cp
453 47.1253 mo
453.262 47.1173 453.469 47.0353 453.621 46.8753 cv
453.77 46.7153 453.848 46.5043 453.855 46.2463 cv
453.848 45.9843 453.77 45.7733 453.625 45.6133 cv
453.473 45.4533 453.273 45.3713 453.027 45.3633 cv
452.777 45.3713 452.578 45.4573 452.426 45.6173 cv
452.27 45.7813 452.191 45.9883 452.191 46.2463 cv
452.191 46.5043 452.266 46.7153 452.414 46.8753 cv
452.559 47.0353 452.754 47.1173 453 47.1253 cv
cp
465.766 46.9723 mo
465.484 46.6753 465.219 46.3903 464.969 46.1133 cv
464.715 45.8403 464.461 45.5663 464.215 45.2933 cv
464.559 44.8833 464.84 44.3833 465.059 43.7973 cv
465.273 43.2153 465.445 42.5503 465.57 41.8043 cv
464.449 41.8043 li
464.355 42.4023 464.238 42.9293 464.09 43.3863 cv
463.941 43.8433 463.758 44.2383 463.539 44.5623 cv
463.23 44.2223 462.871 43.8163 462.465 43.3513 cv
462.055 42.8863 461.648 42.4183 461.246 41.9453 cv
461.246 41.8903 li
461.984 41.5273 462.516 41.1363 462.844 40.7263 cv
463.164 40.3163 463.324 39.8673 463.316 39.3713 cv
463.301 38.7543 463.098 38.2653 462.715 37.9103 cv
462.324 37.5583 461.832 37.3793 461.23 37.3713 cv
460.707 37.3793 460.266 37.4963 459.914 37.7183 cv
459.555 37.9453 459.289 38.2343 459.109 38.5863 cv
458.93 38.9413 458.84 39.3123 458.84 39.7073 cv
458.84 40.0393 458.906 40.3753 459.043 40.7113 cv
459.18 41.0503 459.371 41.3753 459.621 41.6793 cv
459.621 41.7223 li
459.066 42.0153 458.625 42.3903 458.293 42.8403 cv
457.953 43.2973 457.781 43.8433 457.773 44.4803 cv
457.781 45.2153 458.035 45.8323 458.535 46.3363 cv
459.035 46.8403 459.746 47.1013 460.672 47.1253 cv
461.191 47.1253 461.68 47.0433 462.141 46.8753 cv
462.594 46.7073 463.023 46.4373 463.43 46.0623 cv
463.605 46.2463 463.766 46.4103 463.906 46.5543 cv
464.043 46.7033 464.18 46.8403 464.313 46.9723 cv
cp
460.895 46.2033 mo
460.309 46.1953 459.84 46.0113 459.492 45.6563 cv
459.137 45.3043 458.957 44.8513 458.949 44.3003 cv
458.965 43.8003 459.102 43.3943 459.363 43.0823 cv
459.617 42.7693 459.887 42.5313 460.168 42.3673 cv
460.703 42.9843 461.207 43.5583 461.684 44.0823 cv
462.152 44.6133 462.535 45.0353 462.828 45.3473 cv
462.598 45.6013 462.32 45.8043 461.992 45.9613 cv
461.664 46.1213 461.297 46.2033 460.895 46.2033 cv
cp
461.133 38.2073 mo
461.52 38.2223 461.805 38.3553 461.98 38.6013 cv
462.156 38.8513 462.242 39.1253 462.242 39.4253 cv
462.23 39.8243 462.086 40.1683 461.813 40.4573 cv
461.531 40.7463 461.152 41.0233 460.672 41.2893 cv
460.469 41.0393 460.301 40.7773 460.168 40.5043 cv
460.031 40.2303 459.961 39.9253 459.957 39.5823 cv
459.953 39.2073 460.051 38.8863 460.254 38.6213 cv
460.449 38.3633 460.742 38.2223 461.133 38.2073 cv
cp
476.203 45.6993 mo
475.953 45.8243 475.652 45.9183 475.301 45.9843 cv
474.949 46.0583 474.582 46.0933 474.199 46.0903 cv
473.051 46.0823 472.164 45.7423 471.539 45.0663 cv
470.914 44.3983 470.598 43.4723 470.59 42.2973 cv
470.602 41.0503 470.938 40.0933 471.598 39.4223 cv
472.258 38.7543 473.148 38.4143 474.27 38.4023 cv
474.66 38.4063 475.016 38.4453 475.34 38.5153 cv
475.656 38.5933 475.93 38.6873 476.16 38.7973 cv
476.469 37.8043 li
476.305 37.7153 476.039 37.6253 475.664 37.5313 cv
475.289 37.4453 474.809 37.3943 474.227 37.3833 cv
472.738 37.4063 471.551 37.8633 470.668 38.7503 cv
469.777 39.6403 469.324 40.8363 469.301 42.3403 cv
469.309 43.3793 469.512 44.2543 469.914 44.9613 cv
470.313 45.6753 470.859 46.2153 471.559 46.5783 cv
472.254 46.9453 473.051 47.1253 473.949 47.1253 cv
474.523 47.1173 475.027 47.0703 475.461 46.9843 cv
475.887 46.8983 476.215 46.7973 476.441 46.6793 cv
cp
480.809 40.0583 mo
480.18 40.0623 479.613 40.2073 479.109 40.4883 cv
478.605 40.7733 478.203 41.1793 477.906 41.7113 cv
477.605 42.2423 477.453 42.8863 477.449 43.6403 cv
477.469 44.7263 477.781 45.5743 478.391 46.1873 cv
478.992 46.8003 479.762 47.1133 480.699 47.1253 cv
481.246 47.1253 481.777 47.0003 482.293 46.7503 cv
482.801 46.5003 483.223 46.1093 483.559 45.5743 cv
483.887 45.0473 484.059 44.3633 484.07 43.5273 cv
484.055 42.4843 483.754 41.6523 483.172 41.0233 cv
482.582 40.3983 481.797 40.0743 480.809 40.0583 cv
cp
480.781 40.9803 mo
481.262 40.9923 481.656 41.1333 481.957 41.3983 cv
482.254 41.6683 482.469 41.9963 482.609 42.3903 cv
482.742 42.7853 482.813 43.1793 482.813 43.5703 cv
482.797 44.3513 482.598 44.9803 482.223 45.4613 cv
481.84 45.9453 481.352 46.1953 480.754 46.2033 cv
480.141 46.1913 479.648 45.9413 479.277 45.4573 cv
478.906 44.9763 478.719 44.3553 478.711 43.5973 cv
478.707 43.1683 478.777 42.7543 478.926 42.3553 cv
479.07 41.9573 479.297 41.6333 479.602 41.3753 cv
479.906 41.1253 480.297 40.9923 480.781 40.9803 cv
cp
485.625 46.9723 mo
486.828 46.9723 li
486.828 42.8983 li
486.828 42.7973 486.832 42.6913 486.848 42.5823 cv
486.859 42.4803 486.887 42.3833 486.926 42.2973 cv
487.023 41.9763 487.207 41.6953 487.477 41.4493 cv
487.742 41.2073 488.066 41.0783 488.453 41.0623 cv
488.918 41.0743 489.273 41.2503 489.512 41.5863 cv
489.746 41.9253 489.863 42.3673 489.867 42.9103 cv
489.867 46.9723 li
491.07 46.9723 li
491.07 42.7853 li
491.07 42.6753 491.078 42.5703 491.098 42.4653 cv
491.113 42.3633 491.137 42.2613 491.168 42.1683 cv
491.281 41.8673 491.465 41.6133 491.719 41.3983 cv
491.969 41.1873 492.273 41.0743 492.637 41.0623 cv
493.121 41.0703 493.488 41.2543 493.738 41.6133 cv
493.98 41.9763 494.105 42.4883 494.109 43.1483 cv
494.109 46.9723 li
495.313 46.9723 li
495.313 42.9963 li
495.297 42.2223 495.168 41.6213 494.93 41.1913 cv
494.688 40.7653 494.395 40.4683 494.055 40.2973 cv
493.711 40.1333 493.383 40.0503 493.07 40.0583 cv
492.75 40.0583 492.473 40.1013 492.238 40.1793 cv
492 40.2653 491.785 40.3833 491.586 40.5313 cv
491.445 40.6403 491.309 40.7653 491.176 40.9063 cv
491.043 41.0543 490.922 41.2223 490.816 41.4143 cv
490.789 41.4143 li
490.637 41.0113 490.395 40.6873 490.066 40.4373 cv
489.734 40.1953 489.34 40.0663 488.887 40.0583 cv
488.32 40.0703 487.871 40.1993 487.531 40.4373 cv
487.188 40.6833 486.922 40.9683 486.742 41.3003 cv
486.699 41.3003 li
486.645 40.1993 li
485.57 40.1993 li
485.578 40.4763 485.59 40.7653 485.605 41.0583 cv
485.613 41.3553 485.621 41.6793 485.625 42.0313 cv
cp
497.301 49.7423 mo
498.516 49.7423 li
498.516 46.0623 li
498.543 46.0623 li
498.75 46.4063 499.035 46.6683 499.402 46.8473 cv
499.762 47.0313 500.172 47.1213 500.633 47.1253 cv
501.168 47.1253 501.672 46.9923 502.141 46.7223 cv
502.605 46.4573 502.984 46.0543 503.277 45.5113 cv
503.563 44.9763 503.711 44.3003 503.723 43.4883 cv
503.703 42.4533 503.43 41.6253 502.902 41.0083 cv
502.367 40.3903 501.68 40.0743 500.84 40.0583 cv
500.285 40.0623 499.809 40.1753 499.406 40.3983 cv
499 40.6253 498.676 40.9453 498.434 41.3593 cv
498.406 41.3593 li
498.336 40.1993 li
497.246 40.1993 li
497.254 40.5193 497.266 40.8593 497.281 41.2183 cv
497.289 41.5823 497.297 41.9803 497.301 42.4103 cv
cp
498.516 43.0393 mo
498.516 42.9653 498.523 42.8833 498.543 42.7973 cv
498.555 42.7153 498.574 42.6333 498.602 42.5503 cv
498.723 42.0863 498.957 41.7183 499.301 41.4453 cv
499.645 41.1793 500.031 41.0433 500.465 41.0353 cv
501.117 41.0583 501.617 41.3083 501.961 41.7853 cv
502.305 42.2693 502.477 42.8553 502.48 43.5433 cv
502.473 44.3363 502.293 44.9653 501.938 45.4373 cv
501.582 45.9103 501.074 46.1523 500.422 46.1603 cv
499.969 46.1563 499.578 46.0233 499.25 45.7613 cv
498.914 45.5043 498.691 45.1563 498.574 44.7183 cv
498.551 44.6443 498.535 44.5623 498.527 44.4763 cv
498.52 44.3943 498.516 44.3083 498.516 44.2153 cv
cp
505.773 47.1253 mo
506.035 47.1173 506.242 47.0353 506.395 46.8753 cv
506.543 46.7153 506.621 46.5043 506.629 46.2463 cv
506.621 45.9843 506.543 45.7733 506.398 45.6133 cv
506.246 45.4533 506.047 45.3713 505.801 45.3633 cv
505.551 45.3713 505.352 45.4573 505.199 45.6173 cv
505.043 45.7813 504.965 45.9883 504.965 46.2463 cv
504.965 46.5043 505.039 46.7153 505.188 46.8753 cv
505.332 47.0353 505.527 47.1173 505.773 47.1253 cv
cp
f
247.129 77.4883 mo
252.336 71.1993 li
247.391 64.9613 li
247.391 64.8633 li
255.574 64.8633 li
255.574 63.1363 li
244.684 63.1363 li
244.684 64.5273 li
250.008 71.2733 li
244.395 78.0663 li
244.395 79.3123 li
256.344 79.3123 li
256.344 77.5623 li
247.129 77.5623 li
cp
0.215686 0.207843 0.207843 rgb
f
239.711 133.972 mo
240.926 133.972 li
240.926 129.883 li
242.074 129.883 li
242.617 129.898 243.039 130.047 243.336 130.328 cv
243.629 130.613 243.844 131.078 243.98 131.718 cv
244.102 132.312 244.215 132.8 244.324 133.183 cv
244.426 133.57 244.516 133.832 244.594 133.972 cv
245.855 133.972 li
245.754 133.789 245.645 133.476 245.531 133.035 cv
245.41 132.597 245.277 132.047 245.125 131.383 cv
245.016 130.89 244.848 130.484 244.625 130.16 cv
244.398 129.836 244.109 129.609 243.754 129.48 cv
243.754 129.437 li
244.254 129.269 244.668 128.984 245.004 128.578 cv
245.332 128.175 245.504 127.664 245.52 127.043 cv
245.512 126.672 245.445 126.332 245.32 126.019 cv
245.188 125.715 245.008 125.453 244.777 125.234 cv
244.492 124.98 244.129 124.789 243.684 124.66 cv
243.238 124.535 242.691 124.468 242.047 124.468 cv
241.621 124.468 241.203 124.488 240.797 124.523 cv
240.383 124.562 240.023 124.609 239.711 124.664 cv
cp
240.926 125.515 mo
241.027 125.492 241.18 125.468 241.383 125.445 cv
241.582 125.429 241.832 125.418 242.129 125.418 cv
242.781 125.418 243.305 125.558 243.699 125.836 cv
244.086 126.121 244.285 126.566 244.301 127.168 cv
244.289 127.718 244.098 128.152 243.723 128.468 cv
243.344 128.793 242.828 128.957 242.172 128.961 cv
240.926 128.961 li
cp
0 0 0 rgb
f
252.699 130.808 mo
252.711 130.738 252.719 130.656 252.727 130.562 cv
252.73 130.468 252.734 130.359 252.738 130.234 cv
252.742 129.804 252.664 129.347 252.508 128.859 cv
252.344 128.375 252.059 127.957 251.652 127.605 cv
251.242 127.258 250.672 127.074 249.941 127.058 cv
249.277 127.066 248.711 127.23 248.238 127.547 cv
247.762 127.867 247.398 128.3 247.145 128.843 cv
246.891 129.394 246.762 130.011 246.762 130.695 cv
246.77 131.738 247.063 132.566 247.645 133.179 cv
248.223 133.797 249.039 134.109 250.094 134.125 cv
250.629 134.117 251.09 134.066 251.469 133.98 cv
251.848 133.89 252.145 133.797 252.363 133.691 cv
252.137 132.812 li
251.918 132.914 251.66 132.996 251.363 133.058 cv
251.066 133.125 250.699 133.16 250.262 133.16 cv
249.621 133.172 249.078 132.988 248.641 132.613 cv
248.199 132.238 247.965 131.636 247.938 130.808 cv
cp
247.953 129.925 mo
247.98 129.636 248.063 129.34 248.203 129.035 cv
248.34 128.734 248.543 128.476 248.813 128.265 cv
249.078 128.054 249.422 127.945 249.844 127.937 cv
250.301 127.949 250.656 128.066 250.906 128.285 cv
251.156 128.508 251.328 128.769 251.422 129.07 cv
251.516 129.379 251.559 129.664 251.551 129.925 cv
cp
f
260.063 129.043 mo
260.059 128.644 260.063 128.293 260.074 127.996 cv
260.082 127.699 260.098 127.433 260.121 127.199 cv
259.027 127.199 li
258.988 128.218 li
258.957 128.218 li
258.805 127.925 258.563 127.664 258.227 127.429 cv
257.887 127.199 257.426 127.074 256.844 127.058 cv
256.313 127.058 255.813 127.199 255.352 127.476 cv
254.883 127.754 254.508 128.16 254.223 128.691 cv
253.934 129.226 253.785 129.875 253.777 130.64 cv
253.789 131.601 254.059 132.386 254.59 132.996 cv
255.113 133.609 255.805 133.925 256.66 133.945 cv
257.188 133.941 257.633 133.832 257.996 133.617 cv
258.359 133.406 258.633 133.136 258.82 132.812 cv
258.848 132.812 li
258.848 133.55 li
258.832 134.402 258.625 135.011 258.227 135.386 cv
257.824 135.754 257.301 135.937 256.66 135.933 cv
256.234 135.925 255.855 135.871 255.52 135.769 cv
255.18 135.664 254.895 135.535 254.672 135.386 cv
254.367 136.34 li
254.645 136.519 254.988 136.656 255.391 136.754 cv
255.793 136.847 256.203 136.894 256.621 136.898 cv
257.055 136.898 257.488 136.84 257.926 136.715 cv
258.359 136.59 258.75 136.379 259.098 136.086 cv
259.418 135.789 259.66 135.39 259.82 134.894 cv
259.98 134.39 260.059 133.758 260.063 132.98 cv
cp
258.832 131.09 mo
258.828 131.199 258.82 131.308 258.809 131.418 cv
258.789 131.531 258.766 131.64 258.734 131.746 cv
258.598 132.144 258.379 132.453 258.074 132.672 cv
257.766 132.894 257.414 133.008 257.027 133.008 cv
256.363 132.992 255.863 132.754 255.527 132.289 cv
255.188 131.832 255.02 131.258 255.023 130.57 cv
255.031 129.781 255.223 129.16 255.59 128.703 cv
255.957 128.25 256.438 128.015 257.039 128.008 cv
257.492 128.019 257.867 128.148 258.156 128.394 cv
258.445 128.644 258.645 128.957 258.762 129.324 cv
258.785 129.406 258.805 129.488 258.816 129.578 cv
258.824 129.668 258.828 129.765 258.832 129.871 cv
cp
f
263.242 133.972 mo
263.242 127.199 li
262.012 127.199 li
262.012 133.972 li
cp
262.625 124.539 mo
262.387 124.547 262.203 124.625 262.066 124.765 cv
261.93 124.914 261.859 125.093 261.855 125.308 cv
261.859 125.523 261.926 125.703 262.059 125.843 cv
262.188 125.988 262.367 126.058 262.598 126.062 cv
262.844 126.058 263.035 125.988 263.172 125.843 cv
263.309 125.703 263.379 125.523 263.383 125.308 cv
263.375 125.086 263.305 124.902 263.172 124.761 cv
263.035 124.621 262.852 124.547 262.625 124.539 cv
cp
f
264.828 133.652 mo
265.066 133.797 265.348 133.906 265.676 133.992 cv
266 134.074 266.352 134.121 266.73 134.125 cv
267.523 134.113 268.141 133.925 268.582 133.554 cv
269.016 133.187 269.238 132.695 269.25 132.082 cv
269.246 131.586 269.094 131.175 268.793 130.855 cv
268.492 130.535 268.051 130.269 267.473 130.05 cv
267.027 129.886 266.707 129.718 266.504 129.55 cv
266.297 129.383 266.191 129.164 266.195 128.89 cv
266.195 128.633 266.293 128.414 266.484 128.238 cv
266.672 128.066 266.949 127.976 267.316 127.965 cv
267.633 127.976 267.91 128.023 268.145 128.105 cv
268.379 128.195 268.563 128.281 268.703 128.371 cv
268.996 127.476 li
268.809 127.355 268.574 127.258 268.293 127.179 cv
268.004 127.105 267.691 127.062 267.348 127.058 cv
266.617 127.074 266.047 127.269 265.637 127.64 cv
265.223 128.019 265.012 128.488 265.008 129.043 cv
265.004 129.457 265.148 129.82 265.445 130.14 cv
265.738 130.465 266.195 130.738 266.813 130.961 cv
267.254 131.125 267.574 131.3 267.773 131.488 cv
267.965 131.675 268.059 131.914 268.059 132.195 cv
268.059 132.492 267.953 132.73 267.738 132.918 cv
267.523 133.105 267.195 133.203 266.758 133.203 cv
266.438 133.203 266.137 133.152 265.848 133.05 cv
265.559 132.957 265.316 132.847 265.121 132.726 cv
cp
f
271.113 125.937 mo
271.113 127.199 li
270.063 127.199 li
270.063 128.133 li
271.113 128.133 li
271.113 131.84 li
271.109 132.238 271.145 132.586 271.223 132.879 cv
271.293 133.179 271.414 133.422 271.586 133.609 cv
271.73 133.773 271.918 133.898 272.145 133.988 cv
272.367 134.078 272.625 134.125 272.914 134.125 cv
273.152 134.125 273.363 134.105 273.551 134.074 cv
273.734 134.035 273.887 134 274.008 133.957 cv
273.953 133.023 li
273.859 133.05 273.762 133.074 273.652 133.086 cv
273.539 133.101 273.398 133.105 273.238 133.105 cv
272.895 133.105 272.656 132.992 272.52 132.761 cv
272.375 132.539 272.305 132.215 272.313 131.789 cv
272.313 128.133 li
274.078 128.133 li
274.078 127.199 li
272.313 127.199 li
272.313 125.574 li
cp
f
280.828 130.808 mo
280.84 130.738 280.848 130.656 280.855 130.562 cv
280.859 130.468 280.863 130.359 280.867 130.234 cv
280.871 129.804 280.793 129.347 280.637 128.859 cv
280.473 128.375 280.188 127.957 279.781 127.605 cv
279.371 127.258 278.801 127.074 278.07 127.058 cv
277.406 127.066 276.84 127.23 276.367 127.547 cv
275.891 127.867 275.527 128.3 275.273 128.843 cv
275.02 129.394 274.891 130.011 274.891 130.695 cv
274.898 131.738 275.191 132.566 275.773 133.179 cv
276.352 133.797 277.168 134.109 278.223 134.125 cv
278.758 134.117 279.219 134.066 279.598 133.98 cv
279.977 133.89 280.273 133.797 280.492 133.691 cv
280.266 132.812 li
280.047 132.914 279.789 132.996 279.492 133.058 cv
279.195 133.125 278.828 133.16 278.391 133.16 cv
277.75 133.172 277.207 132.988 276.77 132.613 cv
276.328 132.238 276.094 131.636 276.066 130.808 cv
cp
276.082 129.925 mo
276.109 129.636 276.191 129.34 276.332 129.035 cv
276.469 128.734 276.672 128.476 276.941 128.265 cv
277.207 128.054 277.551 127.945 277.973 127.937 cv
278.43 127.949 278.785 128.066 279.035 128.285 cv
279.285 128.508 279.457 128.769 279.551 129.07 cv
279.645 129.379 279.688 129.664 279.68 129.925 cv
cp
f
282.395 133.972 mo
283.625 133.972 li
283.625 130.359 li
283.621 130.261 283.625 130.164 283.633 130.062 cv
283.641 129.968 283.652 129.875 283.668 129.785 cv
283.754 129.32 283.938 128.945 284.227 128.656 cv
284.512 128.375 284.875 128.226 285.316 128.218 cv
285.395 128.218 285.473 128.222 285.543 128.222 cv
285.609 128.23 285.672 128.238 285.738 128.246 cv
285.738 127.086 li
285.68 127.082 285.625 127.074 285.574 127.066 cv
285.52 127.062 285.465 127.058 285.402 127.058 cv
284.98 127.066 284.598 127.203 284.262 127.461 cv
283.918 127.726 283.668 128.086 283.512 128.539 cv
283.469 128.539 li
283.414 127.199 li
282.34 127.199 li
282.355 127.511 282.371 127.843 282.379 128.191 cv
282.387 128.543 282.391 128.918 282.395 129.312 cv
cp
f
0.004 15.6873 mo
1.219 15.6873 li
1.219 11.5973 li
2.367 11.5973 li
2.91 11.6133 3.332 11.7613 3.629 12.0433 cv
3.922 12.3283 4.137 12.7933 4.273 13.4333 cv
4.395 14.0273 4.508 14.5153 4.617 14.8983 cv
4.719 15.2853 4.809 15.5473 4.887 15.6873 cv
6.148 15.6873 li
6.047 15.5043 5.938 15.1913 5.824 14.7503 cv
5.703 14.3123 5.57 13.7613 5.418 13.0973 cv
5.309 12.6053 5.141 12.1993 4.918 11.8753 cv
4.691 11.5503 4.402 11.3243 4.047 11.1953 cv
4.047 11.1523 li
4.547 10.9843 4.961 10.6993 5.297 10.2933 cv
5.625 9.8903 5.797 9.3793 5.813 8.7583 cv
5.805 8.38631 5.738 8.0473 5.613 7.7343 cv
5.48 7.42931 5.301 7.1683 5.07 6.94931 cv
4.785 6.6953 4.422 6.5043 3.977 6.37531 cv
3.531 6.25031 2.984 6.1833 2.34 6.1833 cv
1.914 6.1833 1.496 6.20331 1.09 6.2383 cv
0.676 6.2773 0.316 6.32431 0.004 6.3793 cv
cp
1.219 7.2303 mo
1.32 7.20731 1.473 7.1833 1.676 7.16031 cv
1.875 7.1443 2.125 7.1333 2.422 7.1333 cv
3.074 7.1333 3.598 7.2733 3.992 7.55031 cv
4.379 7.8363 4.578 8.28131 4.594 8.8833 cv
4.582 9.4333 4.391 9.86731 4.016 10.1833 cv
3.637 10.5083 3.121 10.6723 2.465 10.6753 cv
1.219 10.6753 li
cp
f
6.695 8.91431 mo
8.988 12.2303 li
6.582 15.6873 li
7.938 15.6873 li
8.918 14.1603 li
9.051 13.9613 9.172 13.7653 9.289 13.5743 cv
9.402 13.3863 9.52 13.1913 9.633 12.9843 cv
9.66 12.9843 li
9.773 13.1913 9.891 13.3863 10.012 13.5783 cv
10.129 13.7733 10.254 13.9683 10.387 14.1603 cv
11.395 15.6873 li
12.781 15.6873 li
10.418 12.1873 li
12.727 8.91431 li
11.383 8.91431 li
10.445 10.3553 li
10.324 10.5353 10.207 10.7183 10.094 10.8983 cv
9.98 11.0823 9.867 11.2693 9.758 11.4613 cv
9.73 11.4613 li
9.617 11.2773 9.504 11.0933 9.395 10.9143 cv
9.277 10.7383 9.156 10.5543 9.031 10.3673 cv
8.066 8.91431 li
cp
f
12.949 16.7383 mo
12.949 17.4373 li
19.949 17.4373 li
19.949 16.7383 li
cp
f
22.203 15.6873 mo
22.203 8.91431 li
20.973 8.91431 li
20.973 15.6873 li
cp
21.586 6.2543 mo
21.348 6.26131 21.164 6.3403 21.027 6.4803 cv
20.891 6.6293 20.82 6.8083 20.816 7.0233 cv
20.82 7.2383 20.887 7.4183 21.02 7.5583 cv
21.148 7.70331 21.328 7.7733 21.559 7.7773 cv
21.805 7.7733 21.996 7.70331 22.133 7.5583 cv
22.27 7.4183 22.34 7.2383 22.344 7.0233 cv
22.336 6.80031 22.266 6.61731 22.133 6.4763 cv
21.996 6.3363 21.813 6.26131 21.586 6.2543 cv
cp
f
24.25 15.6873 mo
25.48 15.6873 li
25.48 11.6133 li
25.477 11.5113 25.484 11.4063 25.5 11.3043 cv
25.516 11.2073 25.535 11.1213 25.563 11.0393 cv
25.676 10.6873 25.879 10.3903 26.172 10.1523 cv
26.461 9.91431 26.809 9.78931 27.215 9.7773 cv
27.789 9.7973 28.195 9.99631 28.438 10.3713 cv
28.672 10.7543 28.789 11.2223 28.785 11.7813 cv
28.785 15.6873 li
30.016 15.6873 li
30.016 11.6563 li
30 10.8903 29.863 10.2973 29.602 9.87531 cv
29.34 9.45731 29.023 9.1683 28.66 9.0043 cv
28.289 8.84331 27.945 8.7653 27.621 8.7733 cv
27.059 8.78931 26.586 8.9223 26.207 9.1683 cv
25.824 9.4183 25.551 9.70731 25.383 10.0313 cv
25.355 10.0313 li
25.285 8.91431 li
24.195 8.91431 li
24.211 9.1913 24.227 9.4803 24.234 9.7733 cv
24.242 10.0703 24.246 10.3943 24.25 10.7463 cv
cp
f
gsave
0 250 mo
560 250 li
560 0 li
0 0 li
cp
clp
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
350.555 191.48 mo
332.672 210.863 li
349.953 211.273 mo
332.672 191.48 li
355.758 201.172 mo
355.758 208.082 349.426 213.676 341.613 213.676 cv
333.801 213.676 327.469 208.082 327.469 201.172 cv
327.469 194.262 333.801 188.664 341.613 188.664 cv
349.426 188.664 355.758 194.262 355.758 201.172 cv
cp
0.215686 0.207843 0.207843 rgb
@
123.711 214.863 mo
105.828 234.246 li
123.109 234.656 mo
105.828 214.863 li
128.914 224.555 mo
128.914 231.465 122.582 237.062 114.77 237.062 cv
106.957 237.062 100.625 231.465 100.625 224.555 cv
100.625 217.645 106.957 212.047 114.77 212.047 cv
122.582 212.047 128.914 217.645 128.914 224.555 cv
cp
@
130.801 34.117 mo
112.918 53.5 li
130.199 53.91 mo
112.918 34.117 li
136.004 43.809 mo
136.004 50.719 129.672 56.316 121.859 56.316 cv
114.047 56.316 107.711 50.719 107.711 43.809 cv
107.711 36.898 114.047 31.301 121.859 31.301 cv
129.672 31.301 136.004 36.898 136.004 43.809 cv
cp
@
1 lc
93.293 66.262 mo
109.02 66.262 li
@
0 lc
136.004 43.578 mo
230.898 43.578 li
@
236.934 43.578 mo
234.094 44.633 230.57 46.43 228.387 48.336 cv
230.109 43.578 li
228.387 38.824 li
230.57 40.727 234.094 42.527 236.934 43.578 cv
f
0.434 21.289 mo
109.477 21.289 li
@
109.574 21.289 mo
113.652 26.262 li
@
118.133 31.719 mo
108.676 26.605 li
113.316 25.852 li
114.965 21.449 li
cp
f
109.02 66.262 mo
113.539 61.176 li
@
118.227 55.898 mo
114.656 66.039 li
113.188 61.57 li
108.582 60.637 li
cp
f
262.625 43.52 mo
237.02 28.512 li
262.625 43.52 mo
262.625 95.766 li
237.02 110.012 mo
262.625 95.766 li
237.02 28.512 mo
237.02 110.012 li
@
146.102 43.578 mo
146.102 71.059 li
@
147.375 206.273 mo
261.625 206.273 li
261.625 242.836 li
147.375 242.836 li
cp
@
159.578 57.578 mo
220.125 57.578 li
220.125 83.683 li
159.578 83.683 li
cp
@
grestore
343.43 63.9143 mo
343.43 77.9143 li
344.367 77.9143 li
344.367 63.9143 li
cp
f
350.078 74.5663 mo
350.34 74.5583 350.547 74.4763 350.699 74.3163 cv
350.848 74.1563 350.926 73.9453 350.934 73.6873 cv
350.926 73.4253 350.848 73.2153 350.703 73.0543 cv
350.551 72.8943 350.352 72.8123 350.105 72.8043 cv
349.855 72.8123 349.656 72.8983 349.504 73.0583 cv
349.348 73.2223 349.27 73.4293 349.27 73.6873 cv
349.27 73.9453 349.344 74.1563 349.492 74.3163 cv
349.637 74.4763 349.832 74.5583 350.078 74.5663 cv
cp
f
355.609 63.9143 mo
355.609 77.9143 li
356.547 77.9143 li
356.547 63.9143 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
336.102 57.238 mo
362.852 57.238 li
362.852 83.343 li
336.102 83.343 li
cp
0.215686 0.207843 0.207843 rgb
@
150.832 221.738 mo
150.832 212.433 li
157.563 212.433 li
157.563 213.531 li
152.063 213.531 li
152.063 216.379 li
157.211 216.379 li
157.211 217.472 li
152.063 217.472 li
152.063 220.64 li
157.777 220.64 li
157.777 221.738 li
cp
0 0 0 rgb
f
159.332 221.738 mo
159.332 214.996 li
160.363 214.996 li
160.363 215.957 li
160.855 215.218 161.57 214.847 162.508 214.843 cv
162.914 214.847 163.285 214.922 163.629 215.062 cv
163.965 215.211 164.223 215.402 164.395 215.636 cv
164.563 215.879 164.68 216.16 164.75 216.48 cv
164.789 216.699 164.809 217.07 164.813 217.593 cv
164.813 221.738 li
163.668 221.738 li
163.668 217.636 li
163.668 217.175 163.621 216.828 163.535 216.593 cv
163.441 216.363 163.285 216.179 163.063 216.043 cv
162.832 215.906 162.566 215.84 162.266 215.836 cv
161.777 215.84 161.355 215.992 161.004 216.3 cv
160.648 216.609 160.473 217.195 160.477 218.058 cv
160.477 221.738 li
cp
f
171.18 219.566 mo
172.359 219.715 li
172.172 220.406 171.828 220.941 171.324 221.32 cv
170.82 221.703 170.176 221.89 169.395 221.89 cv
168.406 221.89 167.625 221.59 167.051 220.98 cv
166.469 220.379 166.18 219.527 166.184 218.425 cv
166.18 217.293 166.473 216.41 167.059 215.785 cv
167.641 215.16 168.398 214.847 169.332 214.843 cv
170.23 214.847 170.965 215.156 171.539 215.765 cv
172.109 216.383 172.398 217.246 172.398 218.355 cv
172.398 218.425 172.395 218.527 172.391 218.66 cv
167.363 218.66 li
167.402 219.402 167.613 219.968 167.992 220.359 cv
168.367 220.758 168.836 220.953 169.402 220.949 cv
169.82 220.953 170.176 220.843 170.473 220.621 cv
170.766 220.406 171.004 220.054 171.18 219.566 cv
cp
167.426 217.718 mo
171.191 217.718 li
171.137 217.156 170.992 216.734 170.762 216.445 cv
170.395 216.008 169.922 215.785 169.344 215.785 cv
168.816 215.785 168.375 215.961 168.02 216.312 cv
167.66 216.664 167.461 217.133 167.426 217.718 cv
cp
f
173.777 221.738 mo
173.777 214.996 li
174.805 214.996 li
174.805 216.019 li
175.063 215.543 175.305 215.23 175.531 215.074 cv
175.75 214.925 175.996 214.847 176.266 214.843 cv
176.648 214.847 177.039 214.972 177.441 215.215 cv
177.047 216.273 li
176.766 216.113 176.484 216.031 176.207 216.027 cv
175.957 216.031 175.734 216.105 175.535 216.254 cv
175.336 216.402 175.191 216.609 175.109 216.875 cv
174.98 217.281 174.918 217.726 174.922 218.207 cv
174.922 221.738 li
cp
f
177.91 222.297 mo
179.02 222.461 li
179.066 222.8 179.195 223.05 179.406 223.211 cv
179.688 223.418 180.074 223.523 180.57 223.527 cv
181.098 223.523 181.504 223.418 181.793 223.211 cv
182.078 222.996 182.273 222.703 182.379 222.324 cv
182.434 222.09 182.461 221.601 182.461 220.855 cv
181.957 221.445 181.336 221.738 180.594 221.738 cv
179.664 221.738 178.945 221.406 178.441 220.734 cv
177.93 220.07 177.676 219.265 177.68 218.328 cv
177.676 217.687 177.793 217.097 178.027 216.55 cv
178.258 216.011 178.598 215.59 179.043 215.289 cv
179.484 214.996 180.004 214.847 180.602 214.843 cv
181.395 214.847 182.047 215.168 182.566 215.808 cv
182.566 214.996 li
183.621 214.996 li
183.621 220.824 li
183.617 221.871 183.512 222.613 183.301 223.054 cv
183.086 223.488 182.746 223.832 182.285 224.09 cv
181.816 224.34 181.246 224.468 180.574 224.472 cv
179.77 224.468 179.121 224.289 178.625 223.929 cv
178.129 223.566 177.891 223.019 177.91 222.297 cv
cp
178.855 218.246 mo
178.855 219.133 179.031 219.781 179.383 220.183 cv
179.734 220.593 180.172 220.797 180.703 220.793 cv
181.223 220.797 181.664 220.593 182.02 220.187 cv
182.375 219.785 182.551 219.152 182.555 218.285 cv
182.551 217.465 182.367 216.84 182.004 216.418 cv
181.637 216 181.199 215.793 180.684 215.789 cv
180.176 215.793 179.742 216 179.387 216.41 cv
179.031 216.824 178.855 217.433 178.855 218.246 cv
cp
f
185.293 224.336 mo
185.168 223.261 li
185.418 223.328 185.633 223.359 185.82 223.363 cv
186.07 223.359 186.273 223.316 186.43 223.234 cv
186.578 223.148 186.703 223.031 186.805 222.879 cv
186.875 222.765 186.992 222.484 187.152 222.031 cv
187.172 221.965 187.207 221.871 187.254 221.75 cv
184.699 214.996 li
185.93 214.996 li
187.332 218.902 li
187.512 219.398 187.676 219.918 187.82 220.461 cv
187.949 219.937 188.105 219.425 188.289 218.925 cv
189.73 214.996 li
190.875 214.996 li
188.309 221.851 li
188.035 222.59 187.82 223.101 187.668 223.383 cv
187.461 223.758 187.227 224.035 186.969 224.211 cv
186.703 224.383 186.391 224.468 186.031 224.472 cv
185.805 224.468 185.559 224.422 185.293 224.336 cv
cp
f
202.246 218.476 mo
203.48 218.785 li
203.219 219.8 202.754 220.574 202.086 221.101 cv
201.414 221.633 200.594 221.894 199.625 221.898 cv
198.621 221.894 197.805 221.695 197.18 221.285 cv
196.547 220.879 196.07 220.285 195.746 219.511 cv
195.414 218.738 195.25 217.906 195.254 217.015 cv
195.25 216.047 195.434 215.203 195.809 214.48 cv
196.176 213.761 196.703 213.215 197.387 212.836 cv
198.07 212.465 198.824 212.277 199.645 212.273 cv
200.574 212.277 201.355 212.511 201.992 212.984 cv
202.625 213.461 203.066 214.129 203.32 214.984 cv
202.109 215.269 li
201.891 214.593 201.578 214.101 201.168 213.793 cv
200.758 213.484 200.242 213.332 199.621 213.328 cv
198.902 213.332 198.301 213.504 197.824 213.843 cv
197.34 214.187 197.004 214.644 196.813 215.222 cv
196.617 215.8 196.52 216.398 196.523 217.008 cv
196.52 217.804 196.637 218.496 196.867 219.082 cv
197.098 219.675 197.457 220.117 197.945 220.406 cv
198.43 220.703 198.953 220.847 199.523 220.843 cv
200.211 220.847 200.797 220.648 201.277 220.246 cv
201.754 219.851 202.078 219.261 202.246 218.476 cv
cp
f
204.418 218.367 mo
204.414 217.125 204.762 216.199 205.461 215.593 cv
206.039 215.097 206.746 214.847 207.582 214.843 cv
208.504 214.847 209.262 215.152 209.852 215.758 cv
210.438 216.367 210.73 217.207 210.734 218.273 cv
210.73 219.144 210.602 219.824 210.344 220.32 cv
210.082 220.82 209.703 221.207 209.211 221.48 cv
208.711 221.754 208.168 221.89 207.582 221.89 cv
206.633 221.89 205.871 221.59 205.289 220.984 cv
204.707 220.379 204.414 219.508 204.418 218.367 cv
cp
205.594 218.367 mo
205.594 219.234 205.781 219.879 206.156 220.308 cv
206.531 220.738 207.004 220.953 207.582 220.949 cv
208.145 220.953 208.617 220.738 208.996 220.304 cv
209.371 219.875 209.559 219.215 209.563 218.328 cv
209.559 217.496 209.371 216.867 208.992 216.433 cv
208.613 216.008 208.141 215.793 207.582 215.789 cv
207.004 215.793 206.531 216.008 206.156 216.433 cv
205.781 216.863 205.594 217.508 205.594 218.367 cv
cp
f
212.063 221.738 mo
212.063 214.996 li
213.09 214.996 li
213.09 216.019 li
213.348 215.543 213.59 215.23 213.816 215.074 cv
214.035 214.925 214.281 214.847 214.551 214.843 cv
214.934 214.847 215.324 214.972 215.727 215.215 cv
215.332 216.273 li
215.051 216.113 214.77 216.031 214.492 216.027 cv
214.242 216.031 214.02 216.105 213.82 216.254 cv
213.621 216.402 213.477 216.609 213.395 216.875 cv
213.266 217.281 213.203 217.726 213.207 218.207 cv
213.207 221.738 li
cp
f
216.391 221.738 mo
216.391 214.996 li
217.418 214.996 li
217.418 216.019 li
217.676 215.543 217.918 215.23 218.145 215.074 cv
218.363 214.925 218.609 214.847 218.879 214.843 cv
219.262 214.847 219.652 214.972 220.055 215.215 cv
219.66 216.273 li
219.379 216.113 219.098 216.031 218.82 216.027 cv
218.57 216.031 218.348 216.105 218.148 216.254 cv
217.949 216.402 217.805 216.609 217.723 216.875 cv
217.594 217.281 217.531 217.726 217.535 218.207 cv
217.535 221.738 li
cp
f
225.348 219.566 mo
226.527 219.715 li
226.34 220.406 225.996 220.941 225.492 221.32 cv
224.988 221.703 224.344 221.89 223.563 221.89 cv
222.574 221.89 221.793 221.59 221.219 220.98 cv
220.637 220.379 220.348 219.527 220.352 218.425 cv
220.348 217.293 220.641 216.41 221.227 215.785 cv
221.809 215.16 222.566 214.847 223.5 214.843 cv
224.398 214.847 225.133 215.156 225.707 215.765 cv
226.277 216.383 226.566 217.246 226.566 218.355 cv
226.566 218.425 226.563 218.527 226.559 218.66 cv
221.531 218.66 li
221.57 219.402 221.781 219.968 222.16 220.359 cv
222.535 220.758 223.004 220.953 223.57 220.949 cv
223.988 220.953 224.344 220.843 224.641 220.621 cv
224.934 220.406 225.172 220.054 225.348 219.566 cv
cp
221.594 217.718 mo
225.359 217.718 li
225.305 217.156 225.16 216.734 224.93 216.445 cv
224.563 216.008 224.09 215.785 223.512 215.785 cv
222.984 215.785 222.543 215.961 222.188 216.312 cv
221.828 216.664 221.629 217.133 221.594 217.718 cv
cp
f
227.938 221.738 mo
227.938 212.433 li
229.078 212.433 li
229.078 221.738 li
cp
f
235.246 220.906 mo
234.816 221.265 234.41 221.519 234.02 221.668 cv
233.629 221.816 233.207 221.89 232.762 221.89 cv
232.02 221.89 231.453 221.711 231.055 221.347 cv
230.656 220.988 230.457 220.527 230.457 219.961 cv
230.457 219.633 230.531 219.332 230.684 219.058 cv
230.832 218.789 231.027 218.57 231.273 218.402 cv
231.512 218.238 231.789 218.109 232.098 218.023 cv
232.32 217.968 232.656 217.914 233.113 217.855 cv
234.031 217.746 234.711 217.613 235.148 217.461 cv
235.152 217.304 235.156 217.207 235.156 217.16 cv
235.156 216.699 235.047 216.371 234.832 216.175 cv
234.539 215.922 234.105 215.793 233.531 215.789 cv
232.988 215.793 232.59 215.886 232.34 216.074 cv
232.082 216.265 231.895 216.597 231.773 217.074 cv
230.656 216.922 li
230.758 216.445 230.922 216.058 231.156 215.761 cv
231.383 215.468 231.719 215.242 232.164 215.082 cv
232.602 214.925 233.113 214.847 233.695 214.843 cv
234.27 214.847 234.738 214.914 235.098 215.047 cv
235.457 215.183 235.719 215.355 235.891 215.558 cv
236.055 215.765 236.176 216.023 236.246 216.336 cv
236.285 216.531 236.305 216.883 236.305 217.39 cv
236.305 218.914 li
236.305 219.976 236.328 220.648 236.375 220.929 cv
236.422 221.211 236.52 221.48 236.668 221.738 cv
235.473 221.738 li
235.352 221.504 235.273 221.226 235.246 220.906 cv
cp
235.148 218.355 mo
234.73 218.527 234.109 218.668 233.281 218.785 cv
232.813 218.855 232.48 218.933 232.285 219.015 cv
232.09 219.101 231.938 219.226 231.836 219.386 cv
231.727 219.55 231.676 219.73 231.676 219.929 cv
231.676 220.238 231.789 220.492 232.02 220.691 cv
232.25 220.898 232.59 221 233.035 220.996 cv
233.473 221 233.863 220.902 234.207 220.707 cv
234.551 220.515 234.801 220.254 234.965 219.918 cv
235.082 219.66 235.145 219.277 235.148 218.773 cv
cp
f
240.57 220.715 mo
240.734 221.726 li
240.414 221.793 240.125 221.824 239.871 221.828 cv
239.453 221.824 239.133 221.761 238.906 221.633 cv
238.676 221.5 238.512 221.328 238.422 221.113 cv
238.328 220.902 238.285 220.453 238.285 219.765 cv
238.285 215.886 li
237.445 215.886 li
237.445 214.996 li
238.285 214.996 li
238.285 213.328 li
239.422 212.64 li
239.422 214.996 li
240.57 214.996 li
240.57 215.886 li
239.422 215.886 li
239.422 219.828 li
239.422 220.156 239.441 220.367 239.48 220.457 cv
239.52 220.554 239.586 220.629 239.68 220.679 cv
239.77 220.738 239.898 220.765 240.07 220.761 cv
240.191 220.765 240.359 220.75 240.57 220.715 cv
cp
f
241.695 213.746 mo
241.695 212.433 li
242.84 212.433 li
242.84 213.746 li
cp
241.695 221.738 mo
241.695 214.996 li
242.84 214.996 li
242.84 221.738 li
cp
f
244.148 218.367 mo
244.145 217.125 244.492 216.199 245.191 215.593 cv
245.77 215.097 246.477 214.847 247.313 214.843 cv
248.234 214.847 248.992 215.152 249.582 215.758 cv
250.168 216.367 250.461 217.207 250.465 218.273 cv
250.461 219.144 250.332 219.824 250.074 220.32 cv
249.813 220.82 249.434 221.207 248.941 221.48 cv
248.441 221.754 247.898 221.89 247.313 221.89 cv
246.363 221.89 245.602 221.59 245.02 220.984 cv
244.438 220.379 244.145 219.508 244.148 218.367 cv
cp
245.324 218.367 mo
245.324 219.234 245.512 219.879 245.887 220.308 cv
246.262 220.738 246.734 220.953 247.313 220.949 cv
247.875 220.953 248.348 220.738 248.727 220.304 cv
249.102 219.875 249.289 219.215 249.293 218.328 cv
249.289 217.496 249.102 216.867 248.723 216.433 cv
248.344 216.008 247.871 215.793 247.313 215.789 cv
246.734 215.793 246.262 216.008 245.887 216.433 cv
245.512 216.863 245.324 217.508 245.324 218.367 cv
cp
f
251.801 221.738 mo
251.801 214.996 li
252.832 214.996 li
252.832 215.957 li
253.324 215.218 254.039 214.847 254.977 214.843 cv
255.383 214.847 255.754 214.922 256.098 215.062 cv
256.434 215.211 256.691 215.402 256.863 215.636 cv
257.031 215.879 257.148 216.16 257.219 216.48 cv
257.258 216.699 257.277 217.07 257.281 217.593 cv
257.281 221.738 li
256.137 221.738 li
256.137 217.636 li
256.137 217.175 256.09 216.828 256.004 216.593 cv
255.91 216.363 255.754 216.179 255.531 216.043 cv
255.301 215.906 255.035 215.84 254.734 215.836 cv
254.246 215.84 253.824 215.992 253.473 216.3 cv
253.117 216.609 252.941 217.195 252.945 218.058 cv
252.945 221.738 li
cp
f
157.656 240.07 mo
157.023 239.273 156.492 238.347 156.059 237.281 cv
155.621 236.218 155.402 235.113 155.406 233.965 cv
155.402 232.961 155.566 231.996 155.895 231.07 cv
156.273 230.004 156.859 228.937 157.656 227.871 cv
158.477 227.871 li
157.961 228.754 157.621 229.383 157.461 229.758 cv
157.199 230.343 156.996 230.953 156.852 231.586 cv
156.664 232.383 156.574 233.175 156.578 233.972 cv
156.574 236.008 157.207 238.039 158.477 240.07 cv
cp
f
163.789 237.336 mo
162.645 237.336 li
162.645 230.054 li
162.367 230.32 162.008 230.582 161.563 230.843 cv
161.113 231.105 160.711 231.304 160.359 231.433 cv
160.359 230.328 li
160.996 230.031 161.555 229.668 162.035 229.238 cv
162.512 228.808 162.852 228.394 163.051 227.992 cv
163.789 227.992 li
cp
f
172.715 236.238 mo
172.715 237.336 li
166.566 237.336 li
166.555 237.062 166.602 236.8 166.699 236.543 cv
166.855 236.129 167.105 235.715 167.449 235.304 cv
167.793 234.902 168.289 234.433 168.945 233.894 cv
169.953 233.07 170.637 232.414 170.996 231.925 cv
171.348 231.445 171.527 230.984 171.531 230.55 cv
171.527 230.097 171.363 229.718 171.043 229.406 cv
170.715 229.097 170.293 228.941 169.777 228.937 cv
169.223 228.941 168.785 229.105 168.457 229.433 cv
168.125 229.765 167.957 230.222 167.957 230.804 cv
166.781 230.683 li
166.859 229.812 167.16 229.144 167.688 228.683 cv
168.211 228.226 168.918 227.996 169.805 227.992 cv
170.695 227.996 171.398 228.242 171.922 228.734 cv
172.438 229.23 172.699 229.843 172.703 230.574 cv
172.699 230.949 172.621 231.316 172.473 231.675 cv
172.316 232.035 172.066 232.414 171.715 232.812 cv
171.363 233.211 170.773 233.758 169.953 234.449 cv
169.266 235.027 168.828 235.418 168.633 235.621 cv
168.438 235.828 168.277 236.035 168.152 236.238 cv
cp
f
175.699 232.289 mo
175.223 232.121 174.871 231.871 174.645 231.547 cv
174.418 231.226 174.305 230.843 174.305 230.39 cv
174.305 229.718 174.547 229.148 175.031 228.683 cv
175.516 228.226 176.164 227.996 176.977 227.992 cv
177.789 227.996 178.441 228.23 178.938 228.699 cv
179.43 229.172 179.676 229.746 179.68 230.422 cv
179.676 230.855 179.563 231.234 179.34 231.55 cv
179.109 231.875 178.766 232.121 178.309 232.289 cv
178.879 232.48 179.316 232.781 179.613 233.191 cv
179.91 233.609 180.059 234.101 180.063 234.675 cv
180.059 235.472 179.777 236.144 179.215 236.683 cv
178.652 237.226 177.91 237.492 176.996 237.496 cv
176.074 237.492 175.336 237.222 174.773 236.679 cv
174.211 236.136 173.93 235.461 173.93 234.644 cv
173.93 234.043 174.082 233.535 174.387 233.125 cv
174.691 232.718 175.129 232.441 175.699 232.289 cv
cp
175.473 230.351 mo
175.469 230.797 175.613 231.16 175.898 231.433 cv
176.18 231.715 176.547 231.851 177 231.851 cv
177.438 231.851 177.797 231.715 178.082 231.437 cv
178.359 231.16 178.5 230.82 178.504 230.418 cv
178.5 230 178.355 229.648 178.07 229.359 cv
177.777 229.078 177.418 228.933 176.988 228.929 cv
176.551 228.933 176.188 229.074 175.902 229.351 cv
175.613 229.633 175.469 229.965 175.473 230.351 cv
cp
175.105 234.652 mo
175.102 234.98 175.18 235.297 175.336 235.597 cv
175.488 235.906 175.715 236.14 176.023 236.304 cv
176.324 236.472 176.652 236.558 177.008 236.554 cv
177.551 236.558 178.004 236.383 178.359 236.027 cv
178.715 235.679 178.891 235.23 178.895 234.687 cv
178.891 234.14 178.707 233.687 178.344 233.324 cv
177.973 232.968 177.516 232.789 176.969 232.785 cv
176.43 232.789 175.984 232.968 175.633 233.32 cv
175.277 233.679 175.102 234.121 175.105 234.652 cv
cp
f
189.5 234.867 mo
190.621 235.011 li
190.496 235.789 190.184 236.394 189.68 236.832 cv
189.172 237.269 188.551 237.488 187.816 237.488 cv
186.895 237.488 186.152 237.187 185.59 236.586 cv
185.027 235.984 184.746 235.121 184.75 233.992 cv
184.746 233.265 184.867 232.629 185.109 232.082 cv
185.352 231.539 185.719 231.129 186.211 230.851 cv
186.703 230.582 187.238 230.445 187.82 230.441 cv
188.551 230.445 189.148 230.633 189.617 231 cv
190.078 231.375 190.379 231.898 190.516 232.574 cv
189.402 232.746 li
189.293 232.297 189.105 231.957 188.84 231.726 cv
188.57 231.5 188.246 231.383 187.867 231.383 cv
187.289 231.383 186.82 231.59 186.465 232.004 cv
186.102 232.418 185.922 233.07 185.926 233.961 cv
185.922 234.867 186.098 235.527 186.445 235.933 cv
186.789 236.347 187.242 236.55 187.805 236.547 cv
188.25 236.55 188.621 236.414 188.926 236.136 cv
189.223 235.863 189.414 235.441 189.5 234.867 cv
cp
f
191.172 233.965 mo
191.168 232.722 191.516 231.797 192.215 231.191 cv
192.793 230.695 193.5 230.445 194.336 230.441 cv
195.258 230.445 196.016 230.75 196.605 231.355 cv
197.191 231.965 197.484 232.804 197.488 233.871 cv
197.484 234.742 197.355 235.422 197.098 235.918 cv
196.836 236.418 196.457 236.804 195.965 237.078 cv
195.465 237.351 194.922 237.488 194.336 237.488 cv
193.387 237.488 192.625 237.187 192.043 236.582 cv
191.461 235.976 191.168 235.105 191.172 233.965 cv
cp
192.348 233.965 mo
192.348 234.832 192.535 235.476 192.91 235.906 cv
193.285 236.336 193.758 236.55 194.336 236.547 cv
194.898 236.55 195.371 236.336 195.75 235.902 cv
196.125 235.472 196.313 234.812 196.316 233.925 cv
196.313 233.093 196.125 232.465 195.746 232.031 cv
195.367 231.605 194.895 231.39 194.336 231.386 cv
193.758 231.39 193.285 231.605 192.91 232.031 cv
192.535 232.461 192.348 233.105 192.348 233.965 cv
cp
f
203.445 235.164 mo
204.625 235.312 li
204.438 236.004 204.094 236.539 203.59 236.918 cv
203.086 237.3 202.441 237.488 201.66 237.488 cv
200.672 237.488 199.891 237.187 199.316 236.578 cv
198.734 235.976 198.445 235.125 198.449 234.023 cv
198.445 232.89 198.738 232.008 199.324 231.383 cv
199.906 230.758 200.664 230.445 201.598 230.441 cv
202.496 230.445 203.23 230.754 203.805 231.363 cv
204.375 231.98 204.664 232.843 204.664 233.953 cv
204.664 234.023 204.66 234.125 204.656 234.258 cv
199.629 234.258 li
199.668 235 199.879 235.566 200.258 235.957 cv
200.633 236.355 201.102 236.55 201.668 236.547 cv
202.086 236.55 202.441 236.441 202.738 236.218 cv
203.031 236.004 203.27 235.652 203.445 235.164 cv
cp
199.691 233.316 mo
203.457 233.316 li
203.402 232.754 203.258 232.332 203.027 232.043 cv
202.66 231.605 202.188 231.383 201.609 231.383 cv
201.082 231.383 200.641 231.558 200.285 231.91 cv
199.926 232.261 199.727 232.73 199.691 233.316 cv
cp
f
206.328 237.336 mo
206.328 231.484 li
205.32 231.484 li
205.32 230.593 li
206.328 230.593 li
206.328 229.879 li
206.324 229.429 206.363 229.093 206.449 228.867 cv
206.555 228.574 206.75 228.332 207.027 228.148 cv
207.305 227.965 207.691 227.875 208.195 227.871 cv
208.512 227.875 208.867 227.91 209.262 227.984 cv
209.09 228.984 li
208.852 228.945 208.625 228.922 208.418 228.918 cv
208.066 228.922 207.82 228.996 207.68 229.14 cv
207.531 229.293 207.461 229.57 207.465 229.972 cv
207.465 230.593 li
208.777 230.593 li
208.777 231.484 li
207.465 231.484 li
207.465 237.336 li
cp
f
209.707 237.336 mo
209.707 231.484 li
208.699 231.484 li
208.699 230.593 li
209.707 230.593 li
209.707 229.879 li
209.703 229.429 209.742 229.093 209.828 228.867 cv
209.934 228.574 210.129 228.332 210.406 228.148 cv
210.684 227.965 211.07 227.875 211.574 227.871 cv
211.891 227.875 212.246 227.91 212.641 227.984 cv
212.469 228.984 li
212.23 228.945 212.004 228.922 211.797 228.918 cv
211.445 228.922 211.199 228.996 211.059 229.14 cv
210.91 229.293 210.84 229.57 210.844 229.972 cv
210.844 230.593 li
212.156 230.593 li
212.156 231.484 li
210.844 231.484 li
210.844 237.336 li
cp
f
213.055 229.343 mo
213.055 228.031 li
214.199 228.031 li
214.199 229.343 li
cp
213.055 237.336 mo
213.055 230.593 li
214.199 230.593 li
214.199 237.336 li
cp
f
220.336 234.867 mo
221.457 235.011 li
221.332 235.789 221.02 236.394 220.516 236.832 cv
220.008 237.269 219.387 237.488 218.652 237.488 cv
217.73 237.488 216.988 237.187 216.426 236.586 cv
215.863 235.984 215.582 235.121 215.586 233.992 cv
215.582 233.265 215.703 232.629 215.945 232.082 cv
216.188 231.539 216.555 231.129 217.047 230.851 cv
217.539 230.582 218.074 230.445 218.656 230.441 cv
219.387 230.445 219.984 230.633 220.453 231 cv
220.914 231.375 221.215 231.898 221.352 232.574 cv
220.238 232.746 li
220.129 232.297 219.941 231.957 219.676 231.726 cv
219.406 231.5 219.082 231.383 218.703 231.383 cv
218.125 231.383 217.656 231.59 217.301 232.004 cv
216.938 232.418 216.758 233.07 216.762 233.961 cv
216.758 234.867 216.934 235.527 217.281 235.933 cv
217.625 236.347 218.078 236.55 218.641 236.547 cv
219.086 236.55 219.457 236.414 219.762 236.136 cv
220.059 235.863 220.25 235.441 220.336 234.867 cv
cp
f
222.441 229.343 mo
222.441 228.031 li
223.586 228.031 li
223.586 229.343 li
cp
222.441 237.336 mo
222.441 230.593 li
223.586 230.593 li
223.586 237.336 li
cp
f
229.938 235.164 mo
231.117 235.312 li
230.93 236.004 230.586 236.539 230.082 236.918 cv
229.578 237.3 228.934 237.488 228.152 237.488 cv
227.164 237.488 226.383 237.187 225.809 236.578 cv
225.227 235.976 224.938 235.125 224.941 234.023 cv
224.938 232.89 225.23 232.008 225.816 231.383 cv
226.398 230.758 227.156 230.445 228.09 230.441 cv
228.988 230.445 229.723 230.754 230.297 231.363 cv
230.867 231.98 231.156 232.843 231.156 233.953 cv
231.156 234.023 231.152 234.125 231.148 234.258 cv
226.121 234.258 li
226.16 235 226.371 235.566 226.75 235.957 cv
227.125 236.355 227.594 236.55 228.16 236.547 cv
228.578 236.55 228.934 236.441 229.23 236.218 cv
229.523 236.004 229.762 235.652 229.938 235.164 cv
cp
226.184 233.316 mo
229.949 233.316 li
229.895 232.754 229.75 232.332 229.52 232.043 cv
229.152 231.605 228.68 231.383 228.102 231.383 cv
227.574 231.383 227.133 231.558 226.777 231.91 cv
226.418 232.261 226.219 232.73 226.184 233.316 cv
cp
f
232.547 237.336 mo
232.547 230.593 li
233.578 230.593 li
233.578 231.554 li
234.07 230.816 234.785 230.445 235.723 230.441 cv
236.129 230.445 236.5 230.519 236.844 230.66 cv
237.18 230.808 237.438 231 237.609 231.234 cv
237.777 231.476 237.895 231.758 237.965 232.078 cv
238.004 232.297 238.023 232.668 238.027 233.191 cv
238.027 237.336 li
236.883 237.336 li
236.883 233.234 li
236.883 232.773 236.836 232.425 236.75 232.191 cv
236.656 231.961 236.5 231.777 236.277 231.64 cv
236.047 231.504 235.781 231.437 235.48 231.433 cv
234.992 231.437 234.57 231.59 234.219 231.898 cv
233.863 232.207 233.688 232.793 233.691 233.656 cv
233.691 237.336 li
cp
f
242.273 236.312 mo
242.438 237.324 li
242.117 237.39 241.828 237.422 241.574 237.425 cv
241.156 237.422 240.836 237.359 240.609 237.23 cv
240.379 237.097 240.215 236.925 240.125 236.711 cv
240.031 236.5 239.988 236.05 239.988 235.363 cv
239.988 231.484 li
239.148 231.484 li
239.148 230.593 li
239.988 230.593 li
239.988 228.925 li
241.125 228.238 li
241.125 230.593 li
242.273 230.593 li
242.273 231.484 li
241.125 231.484 li
241.125 235.425 li
241.125 235.754 241.145 235.965 241.184 236.054 cv
241.223 236.152 241.289 236.226 241.383 236.277 cv
241.473 236.336 241.602 236.363 241.773 236.359 cv
241.895 236.363 242.063 236.347 242.273 236.312 cv
cp
f
242.934 235.324 mo
244.066 235.144 li
244.125 235.597 244.301 235.945 244.594 236.187 cv
244.883 236.429 245.289 236.55 245.809 236.547 cv
246.332 236.55 246.723 236.445 246.977 236.226 cv
247.23 236.015 247.355 235.765 247.359 235.476 cv
247.355 235.222 247.246 235.019 247.023 234.867 cv
246.867 234.769 246.477 234.64 245.855 234.48 cv
245.016 234.273 244.434 234.09 244.113 233.933 cv
243.785 233.781 243.539 233.566 243.375 233.289 cv
243.203 233.019 243.121 232.718 243.125 232.383 cv
243.121 232.086 243.191 231.808 243.332 231.55 cv
243.469 231.297 243.656 231.082 243.895 230.914 cv
244.07 230.781 244.313 230.672 244.621 230.578 cv
244.926 230.492 245.254 230.445 245.605 230.441 cv
246.137 230.445 246.602 230.523 247 230.672 cv
247.398 230.828 247.691 231.031 247.887 231.289 cv
248.074 231.55 248.207 231.902 248.281 232.336 cv
247.164 232.484 li
247.109 232.14 246.961 231.871 246.719 231.675 cv
246.477 231.48 246.133 231.383 245.691 231.383 cv
245.164 231.383 244.789 231.472 244.566 231.644 cv
244.34 231.82 244.227 232.019 244.23 232.25 cv
244.227 232.398 244.273 232.535 244.371 232.652 cv
244.457 232.777 244.605 232.879 244.809 232.957 cv
244.922 233.004 245.258 233.101 245.816 233.25 cv
246.621 233.468 247.184 233.644 247.508 233.777 cv
247.824 233.918 248.074 234.117 248.262 234.379 cv
248.441 234.644 248.535 234.968 248.535 235.355 cv
248.535 235.738 248.422 236.097 248.199 236.433 cv
247.977 236.769 247.656 237.031 247.238 237.215 cv
246.816 237.398 246.344 237.488 245.816 237.488 cv
244.941 237.488 244.273 237.308 243.813 236.945 cv
243.352 236.582 243.059 236.043 242.934 235.324 cv
cp
f
250.641 240.07 mo
249.824 240.07 li
251.086 238.039 251.719 236.008 251.719 233.972 cv
251.719 233.175 251.629 232.386 251.449 231.605 cv
251.301 230.972 251.098 230.363 250.844 229.777 cv
250.676 229.394 250.336 228.761 249.824 227.871 cv
250.641 227.871 li
251.438 228.937 252.023 230.004 252.406 231.07 cv
252.727 231.996 252.891 232.961 252.895 233.965 cv
252.891 235.113 252.672 236.218 252.238 237.281 cv
251.797 238.347 251.266 239.273 250.641 240.07 cv
cp
f
162.395 75.6363 mo
162.699 75.6723 163.031 75.6953 163.398 75.7153 cv
163.758 75.7343 164.16 75.7463 164.605 75.7463 cv
165.52 75.7463 166.336 75.6333 167.047 75.4023 cv
167.758 75.1723 168.336 74.8363 168.789 74.3903 cv
169.223 73.9573 169.559 73.4293 169.793 72.8083 cv
170.023 72.1913 170.141 71.4963 170.148 70.7223 cv
170.141 69.9653 170.023 69.3043 169.797 68.7463 cv
169.563 68.1873 169.234 67.7153 168.805 67.3323 cv
168.391 66.9573 167.867 66.6683 167.238 66.4653 cv
166.605 66.2613 165.852 66.1603 164.98 66.1603 cv
164.492 66.1603 164.035 66.1793 163.602 66.2183 cv
163.164 66.2583 162.762 66.3083 162.395 66.3673 cv
cp
163.609 67.2503 mo
163.766 67.2153 163.965 67.1873 164.207 67.1603 cv
164.441 67.1403 164.719 67.1293 165.039 67.1253 cv
166.32 67.1403 167.281 67.4683 167.918 68.1093 cv
168.551 68.7583 168.863 69.6403 168.859 70.7653 cv
168.852 72.0473 168.512 73.0353 167.832 73.7223 cv
167.152 74.4183 166.152 74.7653 164.84 74.7693 cv
164.598 74.7733 164.371 74.7693 164.16 74.7583 cv
163.945 74.7503 163.762 74.7343 163.609 74.7153 cv
cp
f
177.18 72.5003 mo
177.191 72.4293 177.199 72.3473 177.207 72.2543 cv
177.211 72.1603 177.215 72.0503 177.219 71.9253 cv
177.223 71.4963 177.145 71.0393 176.988 70.5503 cv
176.824 70.0663 176.539 69.6483 176.133 69.2973 cv
175.723 68.9493 175.152 68.7653 174.422 68.7503 cv
173.758 68.7583 173.191 68.9223 172.719 69.2383 cv
172.242 69.5583 171.879 69.9923 171.625 70.5353 cv
171.371 71.0863 171.242 71.7033 171.242 72.3863 cv
171.25 73.4293 171.543 74.2583 172.125 74.8713 cv
172.703 75.4883 173.52 75.8003 174.574 75.8163 cv
175.109 75.8083 175.57 75.7583 175.949 75.6723 cv
176.328 75.5823 176.625 75.4883 176.844 75.3833 cv
176.617 74.5043 li
176.398 74.6053 176.141 74.6873 175.844 74.7503 cv
175.547 74.8163 175.18 74.8513 174.742 74.8513 cv
174.102 74.8633 173.559 74.6793 173.121 74.3043 cv
172.68 73.9293 172.445 73.3283 172.418 72.5003 cv
cp
172.434 71.6173 mo
172.461 71.3283 172.543 71.0313 172.684 70.7263 cv
172.82 70.4253 173.023 70.1683 173.293 69.9573 cv
173.559 69.7463 173.902 69.6363 174.324 69.6293 cv
174.781 69.6403 175.137 69.7583 175.387 69.9763 cv
175.637 70.1993 175.809 70.4613 175.902 70.7613 cv
175.996 71.0703 176.039 71.3553 176.031 71.6173 cv
cp
f
178.746 65.7263 mo
179.976 65.7263 li
179.976 75.6643 li
178.746 75.6643 li
cp
f
186.809 71.5083 mo
186.813 71.0543 186.742 70.6173 186.598 70.1953 cv
186.453 69.7813 186.195 69.4373 185.82 69.1643 cv
185.445 68.8983 184.914 68.7583 184.234 68.7503 cv
183.797 68.7543 183.387 68.8083 183.004 68.9143 cv
182.613 69.0193 182.277 69.1603 181.992 69.3363 cv
182.273 70.1603 li
182.512 70.0043 182.785 69.8793 183.098 69.7893 cv
183.402 69.7073 183.723 69.6643 184.051 69.6563 cv
184.504 69.6643 184.84 69.7543 185.066 69.9333 cv
185.285 70.1133 185.43 70.3243 185.5 70.5663 cv
185.563 70.8083 185.594 71.0233 185.594 71.2113 cv
185.594 71.3513 li
184.273 71.3513 183.266 71.5663 182.57 71.9923 cv
181.871 72.4253 181.523 73.0503 181.52 73.8713 cv
181.52 74.3833 181.691 74.8323 182.039 75.2153 cv
182.383 75.5973 182.898 75.7973 183.59 75.8163 cv
184.07 75.8083 184.488 75.7113 184.844 75.5153 cv
185.195 75.3243 185.469 75.0903 185.664 74.8123 cv
185.703 74.8123 li
185.801 75.6643 li
186.906 75.6643 li
186.867 75.4293 186.844 75.1753 186.832 74.8983 cv
186.813 74.6253 186.805 74.3403 186.809 74.0393 cv
cp
185.621 73.3833 mo
185.621 73.4413 185.613 73.5003 185.605 73.5663 cv
185.594 73.6363 185.582 73.7073 185.563 73.7733 cv
185.461 74.0743 185.27 74.3363 184.992 74.5583 cv
184.707 74.7813 184.344 74.8983 183.898 74.9103 cv
183.578 74.9143 183.309 74.8203 183.09 74.6253 cv
182.871 74.4373 182.758 74.1363 182.75 73.7303 cv
182.758 73.3003 182.906 72.9723 183.195 72.7463 cv
183.48 72.5233 183.84 72.3753 184.277 72.2973 cv
184.711 72.2223 185.16 72.1913 185.621 72.2073 cv
cp
f
187.789 68.8903 mo
190.281 75.1333 li
190.316 75.2113 190.34 75.2733 190.355 75.3243 cv
190.367 75.3793 190.375 75.4223 190.379 75.4533 cv
190.375 75.4923 190.367 75.5353 190.352 75.5823 cv
190.332 75.6293 190.309 75.6833 190.281 75.7463 cv
190.129 76.0623 189.961 76.3363 189.777 76.5703 cv
189.594 76.8003 189.418 76.9843 189.246 77.1213 cv
189.059 77.2733 188.871 77.3983 188.684 77.5003 cv
188.496 77.5933 188.324 77.6683 188.168 77.7223 cv
188.477 78.7423 li
188.633 78.7153 188.848 78.6443 189.117 78.5233 cv
189.383 78.4023 189.672 78.2153 189.988 77.9613 cv
190.395 77.6013 190.777 77.0903 191.133 76.4293 cv
191.488 75.7693 191.879 74.8673 192.313 73.7183 cv
194.16 68.8903 li
192.859 68.8903 li
191.516 72.8633 li
191.426 73.1133 191.348 73.3593 191.281 73.6013 cv
191.207 73.8473 191.141 74.0743 191.078 74.2773 cv
191.051 74.2773 li
190.992 74.0743 190.922 73.8473 190.848 73.6013 cv
190.766 73.3593 190.688 73.1253 190.605 72.8903 cv
189.133 68.8903 li
cp
f
200.531 75.6643 mo
201.719 75.6643 li
201.719 66.5663 li
200.672 66.5663 li
198.684 67.6293 li
198.922 68.5663 li
200.504 67.7113 li
200.531 67.7113 li
cp
f
210.844 75.6643 mo
210.844 74.6443 li
206.773 74.6443 li
206.773 74.6133 li
207.488 73.9413 li
208.457 73.0353 209.219 72.2033 209.773 71.4373 cv
210.328 70.6753 210.609 69.8793 210.621 69.0543 cv
210.621 68.6133 210.527 68.1953 210.336 67.7933 cv
210.141 67.3943 209.836 67.0663 209.43 66.8083 cv
209.016 66.5543 208.484 66.4223 207.836 66.4103 cv
207.313 66.4223 206.836 66.5113 206.398 66.6793 cv
205.961 66.8553 205.586 67.0703 205.273 67.3323 cv
205.668 68.2033 li
205.875 68.0193 206.148 67.8433 206.48 67.6833 cv
206.809 67.5273 207.18 67.4453 207.598 67.4293 cv
208.266 67.4533 208.734 67.6333 209.004 67.9763 cv
209.27 68.3203 209.398 68.7343 209.391 69.2113 cv
209.391 69.6643 209.27 70.1133 209.027 70.5623 cv
208.781 71.0153 208.41 71.5153 207.914 72.0583 cv
207.41 72.6053 206.773 73.2423 206.004 73.9723 cv
205.039 74.9103 li
205.039 75.6643 li
cp
f
213.914 70.9183 mo
213.348 71.1603 212.906 71.4883 212.59 71.8943 cv
212.273 72.3083 212.113 72.7973 212.109 73.3673 cv
212.113 74.0543 212.383 74.6333 212.918 75.0933 cv
213.449 75.5583 214.195 75.7973 215.16 75.8163 cv
216.043 75.8043 216.777 75.5663 217.355 75.0933 cv
217.934 74.6253 218.23 73.9843 218.254 73.1723 cv
218.246 72.6293 218.082 72.1563 217.762 71.7583 cv
217.434 71.3633 216.988 71.0503 216.422 70.8203 cv
216.422 70.7773 li
216.973 70.5113 217.363 70.1913 217.594 69.8083 cv
217.824 69.4333 217.938 69.0473 217.93 68.6483 cv
217.93 68.0583 217.707 67.5433 217.262 67.1013 cv
216.816 66.6643 216.152 66.4333 215.273 66.4103 cv
214.449 66.4253 213.777 66.6483 213.254 67.0823 cv
212.73 67.5193 212.461 68.1013 212.445 68.8323 cv
212.441 69.2303 212.555 69.6093 212.789 69.9683 cv
213.02 70.3283 213.391 70.6333 213.898 70.8753 cv
cp
215.188 74.9223 mo
214.602 74.9103 214.145 74.7383 213.824 74.4063 cv
213.5 74.0743 213.348 73.6723 213.367 73.1993 cv
213.367 72.7653 213.508 72.3833 213.785 72.0473 cv
214.063 71.7183 214.469 71.4723 215.004 71.3083 cv
215.625 71.4803 216.113 71.7183 216.469 72.0273 cv
216.82 72.3403 217 72.7613 217.008 73.2973 cv
217 73.7773 216.836 74.1683 216.512 74.4653 cv
216.188 74.7653 215.746 74.9183 215.188 74.9223 cv
cp
215.203 67.2933 mo
215.746 67.3123 216.141 67.4683 216.387 67.7613 cv
216.625 68.0583 216.742 68.3983 216.742 68.7773 cv
216.73 69.1913 216.598 69.5353 216.344 69.8123 cv
216.082 70.0903 215.754 70.2973 215.355 70.4293 cv
214.82 70.2973 214.398 70.0933 214.086 69.8243 cv
213.773 69.5583 213.617 69.1993 213.617 68.7463 cv
213.617 68.3433 213.754 68.0043 214.027 67.7263 cv
214.297 67.4493 214.688 67.3043 215.203 67.2933 cv
cp
f
252.945 174.308 mo
254.277 174.308 li
254.277 165.906 li
257.402 165.906 li
257.402 164.875 li
249.836 164.875 li
249.836 165.906 li
252.945 165.906 li
cp
f
258.391 174.308 mo
259.723 174.308 li
259.723 170.218 li
259.719 170.109 259.723 170.008 259.738 169.91 cv
259.746 169.816 259.773 169.722 259.813 169.633 cv
259.945 169.297 260.168 169.011 260.48 168.777 cv
260.793 168.547 261.164 168.425 261.602 168.414 cv
262.219 168.429 262.66 168.629 262.922 169.008 cv
263.18 169.386 263.305 169.855 263.301 170.414 cv
263.301 174.308 li
264.633 174.308 li
264.633 170.277 li
264.617 169.511 264.469 168.918 264.188 168.496 cv
263.902 168.078 263.566 167.789 263.176 167.625 cv
262.781 167.465 262.414 167.386 262.074 167.394 cv
261.82 167.394 261.578 167.425 261.348 167.484 cv
261.117 167.543 260.902 167.625 260.707 167.73 cv
260.5 167.84 260.316 167.968 260.156 168.117 cv
259.992 168.269 259.855 168.433 259.75 168.609 cv
259.723 168.609 li
259.723 164.371 li
258.391 164.371 li
cp
f
266.805 174.308 mo
268.137 174.308 li
268.137 170.695 li
268.133 170.597 268.137 170.5 268.148 170.398 cv
268.152 170.304 268.164 170.211 268.18 170.121 cv
268.273 169.656 268.477 169.281 268.789 168.992 cv
269.102 168.711 269.492 168.562 269.969 168.554 cv
270.055 168.554 270.137 168.558 270.215 168.558 cv
270.285 168.566 270.355 168.574 270.426 168.582 cv
270.426 167.422 li
270.363 167.418 270.305 167.41 270.246 167.402 cv
270.188 167.398 270.125 167.394 270.063 167.394 cv
269.602 167.402 269.191 167.539 268.828 167.797 cv
268.457 168.062 268.188 168.422 268.016 168.875 cv
267.969 168.875 li
267.91 167.535 li
266.742 167.535 li
266.762 167.847 266.777 168.179 266.789 168.527 cv
266.797 168.879 266.801 169.254 266.805 169.648 cv
cp
f
277.508 171.144 mo
277.52 171.074 277.531 170.992 277.543 170.898 cv
277.547 170.804 277.551 170.695 277.555 170.57 cv
277.555 170.14 277.473 169.683 277.301 169.195 cv
277.129 168.711 276.82 168.293 276.379 167.941 cv
275.934 167.593 275.316 167.41 274.523 167.394 cv
273.805 167.402 273.188 167.566 272.68 167.883 cv
272.164 168.203 271.77 168.636 271.496 169.179 cv
271.219 169.73 271.082 170.347 271.082 171.031 cv
271.086 172.074 271.402 172.902 272.035 173.515 cv
272.66 174.133 273.547 174.445 274.688 174.461 cv
275.273 174.453 275.77 174.402 276.18 174.316 cv
276.586 174.226 276.906 174.133 277.145 174.027 cv
276.902 173.148 li
276.664 173.25 276.383 173.332 276.063 173.394 cv
275.738 173.461 275.34 173.496 274.871 173.496 cv
274.176 173.508 273.594 173.324 273.117 172.949 cv
272.641 172.574 272.383 171.972 272.352 171.144 cv
cp
272.367 170.261 mo
272.398 169.972 272.488 169.675 272.641 169.371 cv
272.789 169.07 273.008 168.812 273.301 168.601 cv
273.586 168.39 273.957 168.281 274.414 168.273 cv
274.906 168.285 275.293 168.402 275.566 168.621 cv
275.836 168.843 276.02 169.105 276.125 169.406 cv
276.227 169.715 276.273 170 276.266 170.261 cv
cp
f
278.707 173.988 mo
278.965 174.133 279.27 174.242 279.625 174.328 cv
279.977 174.41 280.355 174.457 280.766 174.461 cv
281.625 174.449 282.297 174.261 282.773 173.89 cv
283.246 173.523 283.484 173.031 283.496 172.418 cv
283.488 171.922 283.324 171.511 283.004 171.191 cv
282.676 170.871 282.199 170.605 281.57 170.386 cv
281.09 170.222 280.738 170.054 280.52 169.886 cv
280.293 169.718 280.184 169.5 280.188 169.226 cv
280.188 168.968 280.293 168.75 280.5 168.574 cv
280.703 168.402 281.004 168.312 281.402 168.3 cv
281.746 168.312 282.043 168.359 282.301 168.441 cv
282.551 168.531 282.754 168.617 282.902 168.707 cv
283.223 167.812 li
283.02 167.691 282.766 167.593 282.457 167.515 cv
282.148 167.441 281.805 167.398 281.434 167.394 cv
280.641 167.41 280.023 167.605 279.582 167.976 cv
279.133 168.355 278.906 168.824 278.902 169.379 cv
278.895 169.793 279.055 170.156 279.379 170.476 cv
279.695 170.8 280.188 171.074 280.855 171.297 cv
281.336 171.461 281.684 171.636 281.895 171.824 cv
282.105 172.011 282.207 172.25 282.207 172.531 cv
282.207 172.828 282.094 173.066 281.859 173.254 cv
281.625 173.441 281.27 173.539 280.797 173.539 cv
280.453 173.539 280.125 173.488 279.813 173.386 cv
279.496 173.293 279.234 173.183 279.023 173.062 cv
cp
f
285.215 174.308 mo
286.547 174.308 li
286.547 170.218 li
286.543 170.109 286.547 170.008 286.563 169.91 cv
286.57 169.816 286.598 169.722 286.637 169.633 cv
286.77 169.297 286.992 169.011 287.305 168.777 cv
287.617 168.547 287.988 168.425 288.426 168.414 cv
289.043 168.429 289.484 168.629 289.746 169.008 cv
290.004 169.386 290.129 169.855 290.125 170.414 cv
290.125 174.308 li
291.457 174.308 li
291.457 170.277 li
291.441 169.511 291.293 168.918 291.012 168.496 cv
290.727 168.078 290.391 167.789 290 167.625 cv
289.605 167.465 289.238 167.386 288.898 167.394 cv
288.645 167.394 288.402 167.425 288.172 167.484 cv
287.941 167.543 287.727 167.625 287.531 167.73 cv
287.324 167.84 287.141 167.968 286.98 168.117 cv
286.816 168.269 286.68 168.433 286.574 168.609 cv
286.547 168.609 li
286.547 164.371 li
285.215 164.371 li
cp
f
296.734 167.394 mo
296.051 167.398 295.438 167.543 294.895 167.824 cv
294.344 168.109 293.91 168.515 293.59 169.047 cv
293.266 169.578 293.102 170.222 293.098 170.976 cv
293.117 172.062 293.457 172.91 294.113 173.523 cv
294.77 174.136 295.602 174.449 296.613 174.461 cv
297.211 174.461 297.785 174.336 298.34 174.086 cv
298.891 173.836 299.348 173.445 299.707 172.91 cv
300.063 172.383 300.25 171.699 300.266 170.863 cv
300.25 169.82 299.922 168.988 299.289 168.359 cv
298.652 167.734 297.801 167.41 296.734 167.394 cv
cp
296.703 168.316 mo
297.227 168.328 297.648 168.468 297.973 168.734 cv
298.297 169.004 298.535 169.332 298.684 169.726 cv
298.832 170.121 298.902 170.515 298.902 170.906 cv
298.887 171.687 298.676 172.316 298.266 172.797 cv
297.852 173.281 297.32 173.531 296.676 173.539 cv
296.008 173.527 295.477 173.277 295.078 172.793 cv
294.676 172.312 294.469 171.691 294.461 170.933 cv
294.453 170.504 294.531 170.09 294.691 169.691 cv
294.848 169.293 295.094 168.968 295.426 168.711 cv
295.758 168.461 296.184 168.328 296.703 168.316 cv
cp
f
301.953 164.371 mo
303.285 164.371 li
303.285 174.309 li
301.953 174.309 li
cp
f
310.535 164.371 mo
310.535 168.414 li
310.504 168.414 li
310.336 168.14 310.066 167.906 309.695 167.703 cv
309.324 167.508 308.855 167.402 308.289 167.394 cv
307.688 167.398 307.137 167.547 306.645 167.832 cv
306.145 168.125 305.746 168.539 305.449 169.078 cv
305.148 169.621 305 170.269 305 171.019 cv
305.02 172.066 305.324 172.898 305.91 173.515 cv
306.496 174.133 307.242 174.445 308.152 174.461 cv
308.75 174.453 309.262 174.328 309.688 174.082 cv
310.109 173.836 310.422 173.519 310.625 173.133 cv
310.668 173.133 li
310.73 174.308 li
311.91 174.308 li
311.895 174.074 311.879 173.8 311.867 173.488 cv
311.855 173.175 311.852 172.867 311.852 172.558 cv
311.852 164.371 li
cp
310.535 171.465 mo
310.531 171.566 310.527 171.656 310.52 171.742 cv
310.508 171.828 310.492 171.914 310.473 171.996 cv
310.336 172.461 310.09 172.82 309.738 173.078 cv
309.379 173.336 308.973 173.468 308.516 173.468 cv
307.801 173.453 307.262 173.207 306.895 172.73 cv
306.527 172.261 306.344 171.672 306.348 170.961 cv
306.352 170.207 306.547 169.586 306.93 169.105 cv
307.313 168.625 307.852 168.379 308.547 168.359 cv
309.051 168.375 309.469 168.511 309.809 168.777 cv
310.145 169.047 310.367 169.379 310.473 169.773 cv
310.492 169.851 310.508 169.937 310.52 170.031 cv
310.527 170.125 310.531 170.211 310.535 170.289 cv
cp
f
267.773 219.656 mo
269.09 219.656 li
269.09 215.566 li
270.336 215.566 li
270.926 215.582 271.379 215.73 271.703 216.011 cv
272.02 216.297 272.254 216.761 272.398 217.402 cv
272.535 217.996 272.66 218.484 272.773 218.867 cv
272.883 219.254 272.98 219.515 273.066 219.656 cv
274.43 219.656 li
274.32 219.472 274.203 219.16 274.078 218.718 cv
273.949 218.281 273.805 217.73 273.641 217.066 cv
273.52 216.574 273.336 216.168 273.098 215.843 cv
272.852 215.519 272.539 215.293 272.156 215.164 cv
272.156 215.121 li
272.699 214.953 273.148 214.668 273.508 214.261 cv
273.863 213.859 274.051 213.347 274.066 212.726 cv
274.063 212.355 273.992 212.015 273.852 211.703 cv
273.711 211.398 273.512 211.136 273.262 210.918 cv
272.949 210.664 272.555 210.472 272.078 210.343 cv
271.594 210.218 271.004 210.152 270.305 210.152 cv
269.848 210.152 269.398 210.172 268.953 210.207 cv
268.508 210.246 268.113 210.293 267.773 210.347 cv
cp
269.09 211.199 mo
269.199 211.175 269.367 211.152 269.59 211.129 cv
269.805 211.113 270.074 211.101 270.395 211.101 cv
271.105 211.101 271.672 211.242 272.094 211.519 cv
272.516 211.804 272.73 212.25 272.746 212.851 cv
272.734 213.402 272.527 213.836 272.121 214.152 cv
271.711 214.476 271.152 214.64 270.441 214.644 cv
269.09 214.644 li
cp
f
276.324 210.109 mo
276.23 210.64 276.102 211.207 275.934 211.816 cv
275.762 212.429 275.594 212.953 275.43 213.386 cv
276.277 213.3 li
276.414 213.082 276.57 212.785 276.746 212.414 cv
276.918 212.043 277.09 211.644 277.258 211.211 cv
277.422 210.785 277.563 210.371 277.688 209.968 cv
cp
f
281.012 209.941 mo
280.508 210.523 280.059 211.281 279.664 212.215 cv
279.266 213.152 279.055 214.304 279.027 215.668 cv
279.047 217.027 279.254 218.172 279.656 219.097 cv
280.055 220.027 280.508 220.773 281.012 221.347 cv
282.043 221.347 li
281.496 220.652 281.047 219.847 280.695 218.925 cv
280.34 218.004 280.156 216.922 280.145 215.679 cv
280.152 214.418 280.328 213.316 280.676 212.375 cv
281.02 211.441 281.477 210.629 282.043 209.941 cv
cp
f
292.141 220.019 mo
291.703 219.949 291.223 219.859 290.703 219.754 cv
290.184 219.648 289.668 219.539 289.156 219.418 cv
289.156 219.363 li
290.02 219.082 290.715 218.562 291.246 217.8 cv
291.773 217.039 292.047 216.047 292.066 214.828 cv
292.059 213.89 291.867 213.066 291.492 212.351 cv
291.113 211.636 290.586 211.078 289.902 210.672 cv
289.215 210.269 288.402 210.062 287.473 210.054 cv
286.063 210.074 284.926 210.523 284.063 211.406 cv
283.195 212.289 282.75 213.496 282.727 215.023 cv
282.734 216.043 282.945 216.902 283.352 217.601 cv
283.758 218.304 284.297 218.84 284.977 219.211 cv
285.648 219.578 286.402 219.777 287.23 219.808 cv
287.324 219.808 287.422 219.82 287.527 219.851 cv
287.625 219.875 287.734 219.91 287.852 219.949 cv
288.445 220.136 289.07 220.324 289.73 220.511 cv
290.391 220.695 291.066 220.871 291.762 221.043 cv
cp
287.395 218.816 mo
286.695 218.808 286.102 218.625 285.617 218.273 cv
285.129 217.922 284.758 217.461 284.504 216.883 cv
284.246 216.308 284.117 215.679 284.121 214.996 cv
284.113 214.308 284.234 213.664 284.484 213.062 cv
284.727 212.468 285.098 211.984 285.59 211.617 cv
286.082 211.25 286.699 211.062 287.441 211.047 cv
288.16 211.062 288.758 211.254 289.242 211.621 cv
289.719 211.996 290.078 212.472 290.316 213.05 cv
290.551 213.636 290.668 214.25 290.672 214.894 cv
290.664 215.621 290.535 216.277 290.285 216.867 cv
290.027 217.457 289.66 217.929 289.176 218.277 cv
288.688 218.633 288.094 218.812 287.395 218.816 cv
cp
f
298.934 210.418 mo
298.809 210.422 298.664 210.425 298.504 210.433 cv
298.336 210.441 298.156 210.461 297.961 210.488 cv
297.336 210.562 296.758 210.711 296.227 210.933 cv
295.691 211.164 295.219 211.461 294.809 211.828 cv
294.305 212.281 293.902 212.855 293.605 213.547 cv
293.301 214.238 293.148 215.035 293.141 215.933 cv
293.156 217.133 293.473 218.074 294.094 218.758 cv
294.711 219.445 295.551 219.793 296.613 219.808 cv
297.301 219.8 297.891 219.648 298.383 219.347 cv
298.871 219.05 299.246 218.66 299.508 218.172 cv
299.766 217.691 299.898 217.164 299.902 216.59 cv
299.887 215.699 299.609 214.988 299.07 214.461 cv
298.531 213.933 297.816 213.664 296.93 213.652 cv
296.379 213.664 295.902 213.769 295.5 213.965 cv
295.09 214.168 294.77 214.418 294.535 214.715 cv
294.504 214.715 li
294.613 213.941 294.949 213.254 295.512 212.652 cv
296.07 212.058 296.879 211.672 297.934 211.492 cv
298.121 211.468 298.301 211.449 298.473 211.433 cv
298.641 211.425 298.793 211.422 298.934 211.422 cv
cp
296.645 218.859 mo
295.934 218.843 295.395 218.597 295.027 218.113 cv
294.656 217.633 294.465 217.008 294.457 216.238 cv
294.457 216.133 294.469 216.035 294.496 215.945 cv
294.52 215.859 294.555 215.777 294.594 215.707 cv
294.781 215.367 295.047 215.097 295.391 214.894 cv
295.734 214.695 296.109 214.593 296.523 214.586 cv
297.141 214.593 297.633 214.777 298 215.14 cv
298.359 215.508 298.547 216.019 298.555 216.675 cv
298.547 217.336 298.367 217.863 298.023 218.254 cv
297.676 218.652 297.219 218.851 296.645 218.859 cv
cp
f
302.07 219.808 mo
302.352 219.8 302.574 219.718 302.742 219.558 cv
302.902 219.398 302.988 219.187 302.996 218.929 cv
302.988 218.668 302.906 218.457 302.746 218.297 cv
302.582 218.136 302.367 218.054 302.102 218.047 cv
301.828 218.054 301.609 218.14 301.445 218.3 cv
301.281 218.465 301.195 218.672 301.191 218.929 cv
301.195 219.187 301.277 219.398 301.438 219.558 cv
301.594 219.718 301.805 219.8 302.07 219.808 cv
cp
f
306.105 219.656 mo
306.105 213.816 li
307.879 213.816 li
307.879 212.883 li
306.105 212.883 li
306.105 212.515 li
306.09 211.976 306.188 211.519 306.391 211.14 cv
306.594 210.769 306.973 210.574 307.531 210.554 cv
307.723 210.562 307.887 210.578 308.027 210.601 cv
308.16 210.633 308.277 210.668 308.379 210.711 cv
308.563 209.758 li
308.43 209.711 308.27 209.664 308.078 209.625 cv
307.883 209.586 307.664 209.566 307.422 209.562 cv
307.105 209.562 306.789 209.613 306.48 209.711 cv
306.168 209.812 305.887 209.972 305.637 210.191 cv
305.332 210.472 305.117 210.816 304.984 211.222 cv
304.852 211.636 304.785 212.082 304.789 212.558 cv
304.789 212.883 li
303.77 212.883 li
303.77 213.816 li
304.789 213.816 li
304.789 219.656 li
cp
f
314.941 219.656 mo
314.941 218.636 li
310.531 218.636 li
310.531 218.605 li
311.305 217.933 li
312.352 217.027 313.18 216.195 313.781 215.429 cv
314.383 214.668 314.688 213.871 314.699 213.047 cv
314.699 212.605 314.598 212.187 314.391 211.785 cv
314.18 211.386 313.852 211.058 313.41 210.8 cv
312.961 210.547 312.387 210.414 311.684 210.402 cv
311.117 210.414 310.598 210.504 310.125 210.672 cv
309.648 210.847 309.242 211.062 308.91 211.324 cv
309.336 212.195 li
309.563 212.011 309.855 211.836 310.215 211.675 cv
310.566 211.519 310.973 211.437 311.426 211.422 cv
312.148 211.445 312.652 211.625 312.945 211.968 cv
313.234 212.312 313.375 212.726 313.367 213.203 cv
313.367 213.656 313.238 214.105 312.977 214.554 cv
312.711 215.008 312.309 215.508 311.766 216.05 cv
311.223 216.597 310.531 217.234 309.699 217.965 cv
308.652 218.902 li
308.652 219.656 li
cp
f
317.082 221.347 mo
317.582 220.765 318.027 220.011 318.426 219.082 cv
318.816 218.152 319.031 217.004 319.066 215.636 cv
319.039 214.273 318.828 213.125 318.43 212.191 cv
318.031 211.261 317.582 210.511 317.082 209.941 cv
316.051 209.941 li
316.598 210.636 317.047 211.449 317.402 212.371 cv
317.75 213.3 317.93 214.386 317.945 215.636 cv
317.93 216.894 317.746 217.992 317.395 218.922 cv
317.039 219.855 316.594 220.66 316.051 221.347 cv
cp
f
267.773 64.3403 mo
269.09 64.3403 li
269.09 60.5583 li
269.238 60.5973 269.406 60.6213 269.586 60.6293 cv
269.766 60.6443 269.953 60.6483 270.152 60.6443 cv
270.801 60.6443 271.395 60.5583 271.93 60.3833 cv
272.465 60.2113 272.914 59.9533 273.277 59.6093 cv
273.535 59.3673 273.73 59.0743 273.863 58.7383 cv
273.996 58.4023 274.063 58.0193 274.066 57.5903 cv
274.059 57.1683 273.977 56.7933 273.82 56.4573 cv
273.66 56.1293 273.445 55.8473 273.172 55.6173 cv
272.867 55.3673 272.477 55.1753 272 55.0393 cv
271.523 54.9063 270.957 54.8363 270.305 54.8363 cv
269.773 54.8363 269.297 54.8553 268.879 54.8903 cv
268.457 54.9253 268.09 54.9683 267.773 55.0153 cv
cp
269.09 55.8983 mo
269.203 55.8713 269.367 55.8473 269.582 55.8283 cv
269.793 55.8123 270.047 55.8043 270.336 55.8003 cv
271.066 55.8003 271.648 55.9533 272.082 56.2583 cv
272.512 56.5703 272.73 57.0353 272.746 57.6603 cv
272.738 58.3043 272.512 58.8003 272.063 59.1443 cv
271.613 59.4923 270.988 59.6643 270.184 59.6643 cv
269.965 59.6643 269.762 59.6563 269.582 59.6403 cv
269.395 59.6253 269.23 59.6013 269.09 59.5663 cv
cp
f
276.418 54.7933 mo
276.324 55.3243 276.195 55.8903 276.027 56.5003 cv
275.855 57.1133 275.688 57.6363 275.523 58.0703 cv
276.371 57.9843 li
276.508 57.7653 276.664 57.4683 276.84 57.0973 cv
277.012 56.7263 277.184 56.3283 277.352 55.8943 cv
277.516 55.4683 277.656 55.0543 277.781 54.6523 cv
cp
f
281.102 54.6253 mo
280.598 55.2073 280.148 55.9653 279.754 56.8983 cv
279.355 57.8363 279.145 58.9883 279.117 60.3513 cv
279.137 61.7113 279.344 62.8553 279.746 63.7813 cv
280.145 64.7113 280.598 65.4573 281.102 66.0313 cv
282.133 66.0313 li
281.586 65.3363 281.137 64.5313 280.785 63.6093 cv
280.43 62.6873 280.246 61.6053 280.234 60.3633 cv
280.242 59.1013 280.418 58.0003 280.766 57.0583 cv
281.109 56.1253 281.566 55.3123 282.133 54.6253 cv
cp
f
292.23 64.7033 mo
291.793 64.6333 291.313 64.5433 290.793 64.4373 cv
290.273 64.3323 289.758 64.2223 289.246 64.1013 cv
289.246 64.0473 li
290.109 63.7653 290.805 63.2463 291.336 62.4843 cv
291.863 61.7223 292.137 60.7303 292.156 59.5113 cv
292.148 58.5743 291.957 57.7503 291.582 57.0353 cv
291.203 56.3203 290.676 55.7613 289.992 55.3553 cv
289.305 54.9533 288.492 54.7463 287.563 54.7383 cv
286.152 54.7583 285.016 55.2073 284.152 56.0903 cv
283.285 56.9723 282.84 58.1793 282.816 59.7073 cv
282.824 60.7263 283.035 61.5863 283.441 62.2853 cv
283.848 62.9883 284.387 63.5233 285.066 63.8943 cv
285.738 64.2613 286.492 64.4613 287.32 64.4923 cv
287.414 64.4923 287.512 64.5043 287.617 64.5353 cv
287.715 64.5583 287.824 64.5933 287.941 64.6333 cv
288.535 64.8203 289.16 65.0083 289.82 65.1953 cv
290.48 65.3793 291.156 65.5543 291.852 65.7263 cv
cp
287.484 63.5003 mo
286.785 63.4923 286.191 63.3083 285.707 62.9573 cv
285.219 62.6053 284.848 62.1443 284.594 61.5663 cv
284.336 60.9923 284.207 60.3633 284.211 59.6793 cv
284.203 58.9923 284.324 58.3473 284.574 57.7463 cv
284.816 57.1523 285.188 56.6683 285.68 56.3003 cv
286.172 55.9333 286.789 55.7463 287.531 55.7303 cv
288.25 55.7463 288.848 55.9373 289.332 56.3043 cv
289.809 56.6793 290.168 57.1563 290.406 57.7343 cv
290.641 58.3203 290.758 58.9333 290.762 59.5783 cv
290.754 60.3043 290.625 60.9613 290.375 61.5503 cv
290.117 62.1403 289.75 62.6133 289.266 62.9613 cv
288.777 63.3163 288.184 63.4963 287.484 63.5003 cv
cp
f
295.23 59.5933 mo
294.613 59.8363 294.137 60.1643 293.797 60.5703 cv
293.453 60.9843 293.281 61.4723 293.277 62.0433 cv
293.285 62.7303 293.574 63.3083 294.152 63.7693 cv
294.727 64.2343 295.539 64.4723 296.582 64.4923 cv
297.543 64.4803 298.336 64.2423 298.961 63.7693 cv
299.586 63.3003 299.906 62.6603 299.93 61.8473 cv
299.922 61.3043 299.746 60.8323 299.398 60.4333 cv
299.047 60.0393 298.563 59.7263 297.945 59.4963 cv
297.945 59.4533 li
298.543 59.1873 298.969 58.8673 299.219 58.4843 cv
299.469 58.1093 299.59 57.7223 299.582 57.3243 cv
299.582 56.7343 299.34 56.2183 298.859 55.7773 cv
298.375 55.3403 297.656 55.1093 296.703 55.0863 cv
295.809 55.1013 295.078 55.3243 294.516 55.7583 cv
293.945 56.1953 293.656 56.7773 293.641 57.5083 cv
293.637 57.9063 293.758 58.2853 294.012 58.6443 cv
294.262 59.0043 294.664 59.3083 295.215 59.5503 cv
cp
296.613 63.5973 mo
295.973 63.5863 295.48 63.4143 295.133 63.0823 cv
294.785 62.7503 294.621 62.3473 294.641 61.8753 cv
294.637 61.4413 294.789 61.0583 295.094 60.7223 cv
295.395 60.3943 295.832 60.1483 296.414 59.9843 cv
297.086 60.1563 297.617 60.3943 298 60.7033 cv
298.383 61.0153 298.574 61.4373 298.582 61.9723 cv
298.574 62.4533 298.398 62.8433 298.047 63.1403 cv
297.695 63.4413 297.215 63.5933 296.613 63.5973 cv
cp
296.625 55.9683 mo
297.215 55.9883 297.645 56.1443 297.91 56.4373 cv
298.172 56.7343 298.301 57.0743 298.297 57.4533 cv
298.285 57.8673 298.141 58.2113 297.863 58.4883 cv
297.582 58.7653 297.227 58.9723 296.793 59.1053 cv
296.215 58.9723 295.758 58.7693 295.422 58.5003 cv
295.082 58.2343 294.91 57.8753 294.914 57.4223 cv
294.91 57.0193 295.059 56.6793 295.352 56.4023 cv
295.645 56.1253 296.066 55.9803 296.625 55.9683 cv
cp
f
302.164 64.4923 mo
302.445 64.4843 302.668 64.4023 302.836 64.2423 cv
302.996 64.0823 303.082 63.8713 303.09 63.6133 cv
303.082 63.3513 303 63.1403 302.84 62.9803 cv
302.676 62.8203 302.461 62.7383 302.195 62.7303 cv
301.922 62.7383 301.703 62.8243 301.539 62.9843 cv
301.375 63.1483 301.289 63.3553 301.285 63.6133 cv
301.289 63.8713 301.371 64.0823 301.531 64.2423 cv
301.688 64.4023 301.898 64.4843 302.164 64.4923 cv
cp
f
306.195 64.3403 mo
306.195 58.5003 li
307.969 58.5003 li
307.969 57.5663 li
306.195 57.5663 li
306.195 57.1993 li
306.18 56.6603 306.277 56.2033 306.48 55.8243 cv
306.684 55.4533 307.063 55.2583 307.621 55.2383 cv
307.813 55.2463 307.977 55.2613 308.117 55.2853 cv
308.25 55.3163 308.367 55.3513 308.469 55.3943 cv
308.652 54.4413 li
308.52 54.3943 308.359 54.3473 308.168 54.3083 cv
307.973 54.2693 307.754 54.2503 307.512 54.2463 cv
307.195 54.2463 306.879 54.2973 306.57 54.3943 cv
306.258 54.4963 305.977 54.6563 305.727 54.8753 cv
305.422 55.1563 305.207 55.5003 305.074 55.9063 cv
304.941 56.3203 304.875 56.7653 304.879 57.2423 cv
304.879 57.5663 li
303.859 57.5663 li
303.859 58.5003 li
304.879 58.5003 li
304.879 64.3403 li
cp
f
311.637 64.3403 mo
312.926 64.3403 li
312.926 55.2423 li
311.789 55.2423 li
309.637 56.3043 li
309.895 57.2423 li
311.609 56.3863 li
311.637 56.3863 li
cp
f
317.176 66.0313 mo
317.676 65.4493 318.121 64.6953 318.52 63.7653 cv
318.91 62.8363 319.125 61.6873 319.16 60.3203 cv
319.133 58.9573 318.922 57.8083 318.523 56.8753 cv
318.125 55.9453 317.676 55.1953 317.176 54.6253 cv
316.145 54.6253 li
316.691 55.3203 317.141 56.1333 317.496 57.0543 cv
317.844 57.9843 318.023 59.0703 318.039 60.3203 cv
318.023 61.5783 317.84 62.6753 317.488 63.6053 cv
317.133 64.5393 316.688 65.3433 316.145 66.0313 cv
cp
f
41.004 71.0313 mo
41.309 71.0663 41.641 71.0903 42.008 71.1093 cv
42.367 71.1293 42.77 71.1403 43.215 71.1403 cv
44.129 71.1403 44.945 71.0273 45.656 70.7973 cv
46.367 70.5663 46.945 70.2303 47.398 69.7853 cv
47.832 69.3513 48.168 68.8243 48.402 68.2033 cv
48.633 67.5863 48.75 66.8903 48.758 66.1173 cv
48.75 65.3593 48.633 64.6993 48.406 64.1403 cv
48.172 63.5823 47.844 63.1093 47.414 62.7263 cv
47 62.3513 46.477 62.0623 45.848 61.8593 cv
45.215 61.6563 44.461 61.5543 43.59 61.5543 cv
43.102 61.5543 42.645 61.5743 42.211 61.6133 cv
41.773 61.6523 41.371 61.7033 41.004 61.7613 cv
cp
42.219 62.6443 mo
42.375 62.6093 42.574 62.5823 42.816 62.5543 cv
43.051 62.5353 43.328 62.5233 43.648 62.5193 cv
44.93 62.5353 45.891 62.8633 46.527 63.5043 cv
47.16 64.1523 47.473 65.0353 47.469 66.1603 cv
47.461 67.4413 47.121 68.4293 46.441 69.1173 cv
45.762 69.8123 44.762 70.1603 43.449 70.1643 cv
43.207 70.1683 42.98 70.1643 42.77 70.1523 cv
42.555 70.1443 42.371 70.1293 42.219 70.1093 cv
cp
f
55.785 67.8943 mo
55.797 67.8243 55.805 67.7423 55.813 67.6483 cv
55.816 67.5543 55.82 67.4453 55.824 67.3203 cv
55.828 66.8903 55.75 66.4333 55.594 65.9453 cv
55.43 65.4613 55.145 65.0433 54.738 64.6913 cv
54.328 64.3433 53.758 64.1603 53.027 64.1443 cv
52.363 64.1523 51.797 64.3163 51.324 64.6333 cv
50.848 64.9533 50.484 65.3863 50.23 65.9293 cv
49.977 66.4803 49.848 67.0973 49.848 67.7813 cv
49.855 68.8243 50.148 69.6523 50.73 70.2653 cv
51.309 70.8833 52.125 71.1953 53.18 71.2113 cv
53.715 71.2033 54.176 71.1523 54.555 71.0663 cv
54.934 70.9763 55.23 70.8833 55.449 70.7773 cv
55.223 69.8983 li
55.004 70.0003 54.746 70.0823 54.449 70.1443 cv
54.152 70.2113 53.785 70.2463 53.348 70.2463 cv
52.707 70.2583 52.164 70.0743 51.727 69.6993 cv
51.285 69.3243 51.051 68.7223 51.023 67.8943 cv
cp
51.039 67.0113 mo
51.066 66.7223 51.148 66.4253 51.289 66.1213 cv
51.426 65.8203 51.629 65.5623 51.898 65.3513 cv
52.164 65.1403 52.508 65.0313 52.93 65.0233 cv
53.387 65.0353 53.742 65.1523 53.992 65.3713 cv
54.242 65.5933 54.414 65.8553 54.508 66.1563 cv
54.602 66.4653 54.645 66.7503 54.637 67.0113 cv
cp
f
57.352 61.1213 mo
58.582 61.1213 li
58.582 71.0593 li
57.352 71.0593 li
cp
f
65.414 66.9023 mo
65.418 66.4493 65.348 66.0113 65.203 65.5903 cv
65.059 65.1753 64.801 64.8323 64.426 64.5583 cv
64.051 64.2933 63.52 64.1523 62.84 64.1443 cv
62.402 64.1483 61.992 64.2033 61.609 64.3083 cv
61.219 64.4143 60.883 64.5543 60.598 64.7303 cv
60.879 65.5543 li
61.117 65.3983 61.391 65.2733 61.703 65.1833 cv
62.008 65.1013 62.328 65.0583 62.656 65.0503 cv
63.109 65.0583 63.445 65.1483 63.672 65.3283 cv
63.891 65.5083 64.035 65.7183 64.105 65.9613 cv
64.168 66.2033 64.199 66.4183 64.199 66.6053 cv
64.199 66.7463 li
62.879 66.7463 61.871 66.9613 61.176 67.3863 cv
60.477 67.8203 60.129 68.4453 60.125 69.2653 cv
60.125 69.7773 60.297 70.2263 60.645 70.6093 cv
60.988 70.9923 61.504 71.1913 62.195 71.2113 cv
62.676 71.2033 63.094 71.1053 63.449 70.9103 cv
63.801 70.7183 64.074 70.4843 64.27 70.2073 cv
64.309 70.2073 li
64.406 71.0583 li
65.512 71.0583 li
65.473 70.8243 65.449 70.5703 65.438 70.2933 cv
65.418 70.0193 65.41 69.7343 65.414 69.4333 cv
cp
64.227 68.7773 mo
64.227 68.8363 64.219 68.8943 64.211 68.9613 cv
64.199 69.0313 64.188 69.1013 64.168 69.1683 cv
64.066 69.4683 63.875 69.7303 63.598 69.9533 cv
63.313 70.1753 62.949 70.2933 62.504 70.3043 cv
62.184 70.3083 61.914 70.2153 61.695 70.0193 cv
61.477 69.8323 61.363 69.5313 61.355 69.1253 cv
61.363 68.6953 61.512 68.3673 61.801 68.1403 cv
62.086 67.9183 62.445 67.7693 62.883 67.6913 cv
63.316 67.6173 63.766 67.5863 64.227 67.6013 cv
cp
f
66.395 64.2853 mo
68.887 70.5273 li
68.922 70.6053 68.945 70.6683 68.961 70.7183 cv
68.973 70.7733 68.98 70.8163 68.984 70.8473 cv
68.98 70.8863 68.973 70.9293 68.957 70.9763 cv
68.938 71.0233 68.914 71.0783 68.887 71.1403 cv
68.734 71.4573 68.566 71.7303 68.383 71.9653 cv
68.199 72.1953 68.023 72.3793 67.852 72.5153 cv
67.664 72.6683 67.477 72.7933 67.289 72.8943 cv
67.102 72.9883 66.93 73.0623 66.773 73.1173 cv
67.082 74.1363 li
67.238 74.1093 67.453 74.0393 67.723 73.9183 cv
67.988 73.7973 68.277 73.6093 68.594 73.3553 cv
69 72.9963 69.383 72.4843 69.738 71.8243 cv
70.094 71.1643 70.484 70.2613 70.918 69.1133 cv
72.766 64.2853 li
71.465 64.2853 li
70.121 68.2583 li
70.031 68.5083 69.953 68.7543 69.887 68.9963 cv
69.813 69.2423 69.746 69.4683 69.684 69.6723 cv
69.656 69.6723 li
69.598 69.4683 69.527 69.2423 69.453 68.9963 cv
69.371 68.7543 69.293 68.5193 69.211 68.2853 cv
67.738 64.2853 li
cp
f
81.656 61.8203 mo
81.543 61.8243 81.41 61.8283 81.262 61.8363 cv
81.109 61.8433 80.941 61.8633 80.762 61.8903 cv
80.18 61.9653 79.645 62.1133 79.156 62.3363 cv
78.66 62.5663 78.227 62.8633 77.848 63.2303 cv
77.387 63.6833 77.016 64.2583 76.738 64.9493 cv
76.457 65.6403 76.313 66.4373 76.309 67.3363 cv
76.316 68.5353 76.609 69.4763 77.188 70.1603 cv
77.758 70.8473 78.535 71.1953 79.516 71.2113 cv
80.148 71.2033 80.691 71.0503 81.148 70.7503 cv
81.598 70.4533 81.945 70.0623 82.188 69.5743 cv
82.426 69.0933 82.547 68.5663 82.551 67.9923 cv
82.535 67.1013 82.277 66.3903 81.781 65.8633 cv
81.281 65.3363 80.625 65.0663 79.809 65.0543 cv
79.297 65.0663 78.855 65.1723 78.484 65.3673 cv
78.109 65.5703 77.813 65.8203 77.594 66.1173 cv
77.566 66.1173 li
77.668 65.3433 77.977 64.6563 78.496 64.0543 cv
79.016 63.4613 79.762 63.0743 80.734 62.8943 cv
80.906 62.8713 81.07 62.8513 81.23 62.8363 cv
81.383 62.8283 81.527 62.8243 81.656 62.8243 cv
cp
79.543 70.2613 mo
78.887 70.2463 78.391 70.0003 78.051 69.5153 cv
77.707 69.0353 77.531 68.4103 77.523 67.6403 cv
77.523 67.5353 77.535 67.4373 77.563 67.3473 cv
77.582 67.2613 77.613 67.1793 77.652 67.1093 cv
77.824 66.7693 78.07 66.5003 78.387 66.2973 cv
78.703 66.0973 79.051 65.9963 79.43 65.9883 cv
80.004 65.9963 80.457 66.1793 80.793 66.5433 cv
81.125 66.9103 81.297 67.4223 81.309 68.0783 cv
81.297 68.7383 81.133 69.2653 80.816 69.6563 cv
80.496 70.0543 80.07 70.2543 79.543 70.2613 cv
cp
f
88.613 71.0583 mo
88.613 68.5663 li
89.891 68.5663 li
89.891 67.6173 li
88.613 67.6173 li
88.613 61.9613 li
87.285 61.9613 li
83.227 67.7693 li
83.227 68.5663 li
87.453 68.5663 li
87.453 71.0583 li
cp
84.473 67.6173 mo
84.473 67.5863 li
86.699 64.4923 li
86.82 64.2893 86.941 64.0783 87.063 63.8633 cv
87.184 63.6523 87.313 63.4143 87.453 63.1483 cv
87.496 63.1483 li
87.465 63.6253 87.449 64.1013 87.453 64.5783 cv
87.453 67.6173 li
cp
f
gsave
0 250 mo
560 250 li
560 0 li
0 0 li
cp
clp
37.602 53.207 mo
93.29 53.207 li
93.29 79.312 li
37.602 79.312 li
cp
0.215686 0.207843 0.207843 rgb
@
145.727 70.629 mo
152.563 70.629 li
@
159.625 70.629 mo
149.676 74.695 li
152.035 70.629 li
149.676 66.566 li
cp
f
220.125 70.629 mo
229.875 70.629 li
@
236.934 70.629 mo
226.984 74.695 li
229.348 70.629 li
226.984 66.566 li
cp
f
1 lc
215.102 96.684 mo
229.875 96.684 li
@
236.934 96.684 mo
226.984 100.746 li
229.348 96.684 li
226.984 92.617 li
cp
f
0 lc
262.625 70.289 mo
329.043 70.289 li
@
336.102 70.289 mo
326.152 74.355 li
328.516 70.289 li
326.152 66.227 li
cp
f
236.934 121.602 mo
287.875 121.602 li
287.875 139.102 li
236.934 139.102 li
cp
@
1 lc
215.102 96.684 mo
215.102 129.934 li
@
215.27 129.934 mo
236.934 129.934 li
@
294.934 129.934 mo
320.625 129.934 li
@
287.875 129.934 mo
297.824 133.996 li
295.461 129.934 li
297.824 125.867 li
cp
f
320.625 129.934 mo
320.625 70.289 li
@
261.625 224.555 mo
470.125 224.555 li
@
0 lc
290.508 178.148 mo
327.027 178.148 li
@
326.789 177.746 mo
331.75 184.09 li
@
336.102 189.648 mo
326.77 184.32 li
331.426 183.672 li
333.172 179.309 li
cp
f
1 lc
326.125 224.555 mo
331.777 218.117 li
@
336.438 212.809 mo
332.926 222.969 li
331.43 218.512 li
326.816 217.605 li
cp
f
18.434 201.184 mo
99.758 201.184 li
@
18.434 247.09 mo
99.477 247.09 li
@
99.758 201.184 mo
105.008 207.508 li
@
109.516 212.945 mo
100.035 207.883 li
104.668 207.102 li
106.289 202.691 li
cp
f
0 lc
99.477 247.09 mo
103.953 241.742 li
@
108.484 236.332 mo
105.215 246.57 li
103.613 242.148 li
98.98 241.352 li
cp
f
425.289 0.483994 mo
514.957 0.483994 li
514.957 70.937 li
425.289 70.937 li
cp
@
514.957 35.711 mo
551.988 35.711 li
@
559.051 35.711 mo
549.102 39.777 li
551.461 35.711 li
549.102 31.648 li
cp
f
18.434 21.289 mo
18.434 247.09 li
@
37.602 66.262 mo
18.434 66.262 li
@
108.074 248.844 mo
107.906 247.629 li
106.813 247.078 li
107.914 246.547 li
108.102 245.332 li
108.949 246.219 li
110.16 246.02 li
109.582 247.098 li
110.141 248.187 li
108.938 247.969 li
cp
f
108.074 248.844 mo
107.906 247.629 li
106.813 247.078 li
107.914 246.547 li
108.102 245.332 li
108.949 246.219 li
110.16 246.02 li
109.582 247.098 li
110.141 248.187 li
108.938 247.969 li
cp
@
117.816 67.848 mo
117.648 66.633 li
116.555 66.082 li
117.656 65.551 li
117.844 64.34 li
118.691 65.223 li
119.898 65.023 li
119.32 66.105 li
119.883 67.191 li
118.68 66.977 li
cp
f
117.816 67.848 mo
117.648 66.633 li
116.555 66.082 li
117.656 65.551 li
117.844 64.34 li
118.691 65.223 li
119.898 65.023 li
119.32 66.105 li
119.883 67.191 li
118.68 66.977 li
cp
@
355.852 201.09 mo
372.27 201.09 li
@
1 lc
362.977 70.289 mo
372.102 70.289 li
@
0 lc
109.477 21.289 mo
418.23 21.289 li
@
425.293 21.289 mo
415.344 25.352 li
417.703 21.289 li
415.344 17.223 li
cp
f
1 lc
320.625 70.289 mo
320.625 48.414 li
@
0 lc
129.02 224.406 mo
140.313 224.406 li
@
147.375 224.406 mo
137.426 228.473 li
139.785 224.406 li
137.426 220.344 li
cp
f
409.957 142.156 mo
418.23 142.156 li
@
425.293 142.156 mo
415.344 146.219 li
417.703 142.156 li
415.344 138.09 li
cp
f
320.625 48.414 mo
418.23 48.414 li
@
425.293 48.414 mo
415.344 52.48 li
417.703 48.414 li
415.344 44.352 li
cp
f
grestore
343.508 144.816 mo
343.258 144.941 342.957 145.035 342.605 145.101 cv
342.254 145.175 341.887 145.211 341.504 145.207 cv
340.355 145.199 339.469 144.859 338.844 144.183 cv
338.219 143.515 337.902 142.59 337.895 141.414 cv
337.906 140.168 338.242 139.211 338.902 138.539 cv
339.563 137.871 340.453 137.531 341.574 137.519 cv
341.965 137.523 342.32 137.562 342.645 137.633 cv
342.961 137.711 343.234 137.804 343.465 137.914 cv
343.773 136.922 li
343.609 136.832 343.344 136.742 342.969 136.648 cv
342.594 136.562 342.113 136.511 341.531 136.5 cv
340.043 136.523 338.855 136.98 337.973 137.867 cv
337.082 138.758 336.629 139.953 336.605 141.457 cv
336.613 142.496 336.816 143.371 337.219 144.078 cv
337.617 144.793 338.164 145.332 338.863 145.695 cv
339.559 146.062 340.355 146.242 341.254 146.242 cv
341.828 146.234 342.332 146.187 342.766 146.101 cv
343.191 146.015 343.52 145.914 343.746 145.797 cv
cp
f
347.961 139.175 mo
347.332 139.179 346.766 139.324 346.262 139.605 cv
345.758 139.89 345.355 140.297 345.059 140.828 cv
344.758 141.359 344.605 142.004 344.602 142.758 cv
344.621 143.843 344.934 144.691 345.543 145.304 cv
346.145 145.918 346.914 146.23 347.852 146.242 cv
348.398 146.242 348.93 146.117 349.445 145.867 cv
349.953 145.617 350.375 145.226 350.711 144.691 cv
351.039 144.164 351.211 143.48 351.223 142.644 cv
351.207 141.601 350.906 140.769 350.324 140.14 cv
349.734 139.515 348.949 139.191 347.961 139.175 cv
cp
347.934 140.097 mo
348.414 140.109 348.809 140.25 349.109 140.515 cv
349.406 140.785 349.621 141.113 349.762 141.508 cv
349.895 141.902 349.965 142.297 349.965 142.687 cv
349.949 143.468 349.75 144.097 349.375 144.578 cv
348.992 145.062 348.504 145.312 347.906 145.32 cv
347.293 145.308 346.801 145.058 346.43 144.574 cv
346.059 144.093 345.871 143.472 345.863 142.715 cv
345.859 142.285 345.93 141.871 346.078 141.472 cv
346.223 141.074 346.449 140.75 346.754 140.492 cv
347.059 140.242 347.449 140.109 347.934 140.097 cv
cp
f
352.777 146.09 mo
353.98 146.09 li
353.98 142.015 li
353.98 141.914 353.984 141.808 354 141.699 cv
354.012 141.597 354.039 141.5 354.078 141.414 cv
354.176 141.093 354.359 140.812 354.629 140.566 cv
354.895 140.324 355.219 140.195 355.605 140.179 cv
356.07 140.191 356.426 140.367 356.664 140.703 cv
356.898 141.043 357.016 141.484 357.02 142.027 cv
357.02 146.09 li
358.223 146.09 li
358.223 141.902 li
358.223 141.793 358.23 141.687 358.25 141.582 cv
358.266 141.48 358.289 141.379 358.32 141.285 cv
358.434 140.984 358.617 140.73 358.871 140.515 cv
359.121 140.304 359.426 140.191 359.789 140.179 cv
360.273 140.187 360.641 140.371 360.891 140.73 cv
361.133 141.093 361.258 141.605 361.262 142.265 cv
361.262 146.09 li
362.465 146.09 li
362.465 142.113 li
362.449 141.34 362.32 140.738 362.082 140.308 cv
361.84 139.883 361.547 139.586 361.207 139.414 cv
360.863 139.25 360.535 139.168 360.223 139.175 cv
359.902 139.175 359.625 139.218 359.391 139.297 cv
359.152 139.383 358.938 139.5 358.738 139.648 cv
358.598 139.758 358.461 139.883 358.328 140.023 cv
358.195 140.172 358.074 140.34 357.969 140.531 cv
357.941 140.531 li
357.789 140.129 357.547 139.804 357.219 139.554 cv
356.887 139.312 356.492 139.183 356.039 139.175 cv
355.473 139.187 355.023 139.316 354.684 139.554 cv
354.34 139.8 354.074 140.086 353.895 140.418 cv
353.852 140.418 li
353.797 139.316 li
352.723 139.316 li
352.73 139.593 352.742 139.883 352.758 140.175 cv
352.766 140.472 352.773 140.797 352.777 141.148 cv
cp
f
364.453 148.859 mo
365.668 148.859 li
365.668 145.179 li
365.695 145.179 li
365.902 145.523 366.188 145.785 366.555 145.965 cv
366.914 146.148 367.324 146.238 367.785 146.242 cv
368.32 146.242 368.824 146.109 369.293 145.84 cv
369.758 145.574 370.137 145.172 370.43 144.629 cv
370.715 144.093 370.863 143.418 370.875 142.605 cv
370.855 141.57 370.582 140.742 370.055 140.125 cv
369.52 139.508 368.832 139.191 367.992 139.175 cv
367.438 139.179 366.961 139.293 366.559 139.515 cv
366.152 139.742 365.828 140.062 365.586 140.476 cv
365.559 140.476 li
365.488 139.316 li
364.398 139.316 li
364.406 139.636 364.418 139.976 364.434 140.336 cv
364.441 140.699 364.449 141.097 364.453 141.527 cv
cp
365.668 142.156 mo
365.668 142.082 365.676 142 365.695 141.914 cv
365.707 141.832 365.727 141.75 365.754 141.668 cv
365.875 141.203 366.109 140.836 366.453 140.562 cv
366.797 140.297 367.184 140.16 367.617 140.152 cv
368.27 140.175 368.77 140.425 369.113 140.902 cv
369.457 141.386 369.629 141.972 369.633 142.66 cv
369.625 143.453 369.445 144.082 369.09 144.554 cv
368.734 145.027 368.227 145.269 367.574 145.277 cv
367.121 145.273 366.73 145.14 366.402 144.879 cv
366.066 144.621 365.844 144.273 365.727 143.836 cv
365.703 143.761 365.688 143.679 365.68 143.593 cv
365.672 143.511 365.668 143.425 365.668 143.332 cv
cp
f
377.18 141.933 mo
377.184 141.48 377.113 141.043 376.969 140.621 cv
376.824 140.207 376.566 139.863 376.191 139.59 cv
375.816 139.324 375.285 139.183 374.605 139.175 cv
374.168 139.179 373.758 139.234 373.375 139.34 cv
372.984 139.445 372.648 139.586 372.363 139.761 cv
372.645 140.586 li
372.883 140.429 373.156 140.304 373.469 140.215 cv
373.773 140.133 374.094 140.09 374.422 140.082 cv
374.875 140.09 375.211 140.179 375.438 140.359 cv
375.656 140.539 375.801 140.75 375.871 140.992 cv
375.934 141.234 375.965 141.449 375.965 141.636 cv
375.965 141.777 li
374.645 141.777 373.637 141.992 372.941 142.418 cv
372.242 142.851 371.895 143.476 371.891 144.297 cv
371.891 144.808 372.063 145.258 372.41 145.64 cv
372.754 146.023 373.27 146.222 373.961 146.242 cv
374.441 146.234 374.859 146.136 375.215 145.941 cv
375.566 145.75 375.84 145.515 376.035 145.238 cv
376.074 145.238 li
376.172 146.09 li
377.277 146.09 li
377.238 145.855 377.215 145.601 377.203 145.324 cv
377.184 145.05 377.176 144.765 377.18 144.465 cv
cp
375.992 143.808 mo
375.992 143.867 375.984 143.925 375.977 143.992 cv
375.965 144.062 375.953 144.133 375.934 144.199 cv
375.832 144.5 375.641 144.761 375.363 144.984 cv
375.078 145.207 374.715 145.324 374.27 145.336 cv
373.949 145.34 373.68 145.246 373.461 145.05 cv
373.242 144.863 373.129 144.562 373.121 144.156 cv
373.129 143.726 373.277 143.398 373.566 143.172 cv
373.852 142.949 374.211 142.8 374.648 142.722 cv
375.082 142.648 375.531 142.617 375.992 142.633 cv
cp
f
379.168 146.09 mo
380.398 146.09 li
380.398 142.476 li
380.395 142.379 380.398 142.281 380.406 142.179 cv
380.414 142.086 380.426 141.992 380.441 141.902 cv
380.527 141.437 380.711 141.062 381 140.773 cv
381.285 140.492 381.648 140.343 382.09 140.336 cv
382.168 140.336 382.246 140.34 382.316 140.34 cv
382.383 140.347 382.445 140.355 382.512 140.363 cv
382.512 139.203 li
382.453 139.199 382.398 139.191 382.348 139.183 cv
382.293 139.179 382.238 139.175 382.176 139.175 cv
381.754 139.183 381.371 139.32 381.035 139.578 cv
380.691 139.843 380.441 140.203 380.285 140.656 cv
380.242 140.656 li
380.188 139.316 li
379.113 139.316 li
379.129 139.629 379.145 139.961 379.152 140.308 cv
379.16 140.66 379.164 141.035 379.168 141.429 cv
cp
f
388.434 141.933 mo
388.438 141.48 388.367 141.043 388.223 140.621 cv
388.078 140.207 387.82 139.863 387.445 139.59 cv
387.07 139.324 386.539 139.183 385.859 139.175 cv
385.422 139.179 385.012 139.234 384.629 139.34 cv
384.238 139.445 383.902 139.586 383.617 139.761 cv
383.898 140.586 li
384.137 140.429 384.41 140.304 384.723 140.215 cv
385.027 140.133 385.348 140.09 385.676 140.082 cv
386.129 140.09 386.465 140.179 386.691 140.359 cv
386.91 140.539 387.055 140.75 387.125 140.992 cv
387.188 141.234 387.219 141.449 387.219 141.636 cv
387.219 141.777 li
385.898 141.777 384.891 141.992 384.195 142.418 cv
383.496 142.851 383.148 143.476 383.145 144.297 cv
383.145 144.808 383.316 145.258 383.664 145.64 cv
384.008 146.023 384.523 146.222 385.215 146.242 cv
385.695 146.234 386.113 146.136 386.469 145.941 cv
386.82 145.75 387.094 145.515 387.289 145.238 cv
387.328 145.238 li
387.426 146.09 li
388.531 146.09 li
388.492 145.855 388.469 145.601 388.457 145.324 cv
388.438 145.05 388.43 144.765 388.434 144.465 cv
cp
387.246 143.808 mo
387.246 143.867 387.238 143.925 387.23 143.992 cv
387.219 144.062 387.207 144.133 387.188 144.199 cv
387.086 144.5 386.895 144.761 386.617 144.984 cv
386.332 145.207 385.969 145.324 385.523 145.336 cv
385.203 145.34 384.934 145.246 384.715 145.05 cv
384.496 144.863 384.383 144.562 384.375 144.156 cv
384.383 143.726 384.531 143.398 384.82 143.172 cv
385.105 142.949 385.465 142.8 385.902 142.722 cv
386.336 142.648 386.785 142.617 387.246 142.633 cv
cp
f
390.648 138.054 mo
390.648 139.316 li
389.598 139.316 li
389.598 140.25 li
390.648 140.25 li
390.648 143.957 li
390.645 144.355 390.68 144.703 390.758 144.996 cv
390.828 145.297 390.949 145.539 391.121 145.726 cv
391.266 145.89 391.453 146.015 391.68 146.105 cv
391.902 146.195 392.16 146.242 392.449 146.242 cv
392.688 146.242 392.898 146.222 393.086 146.191 cv
393.27 146.152 393.422 146.117 393.543 146.074 cv
393.488 145.14 li
393.395 145.168 393.297 145.191 393.188 145.203 cv
393.074 145.218 392.934 145.222 392.773 145.222 cv
392.43 145.222 392.191 145.109 392.055 144.879 cv
391.91 144.656 391.84 144.332 391.848 143.906 cv
391.848 140.25 li
393.613 140.25 li
393.613 139.316 li
391.848 139.316 li
391.848 137.691 li
cp
f
397.785 139.175 mo
397.156 139.179 396.59 139.324 396.086 139.605 cv
395.582 139.89 395.18 140.297 394.883 140.828 cv
394.582 141.359 394.43 142.004 394.426 142.758 cv
394.445 143.843 394.758 144.691 395.367 145.304 cv
395.969 145.918 396.738 146.23 397.676 146.242 cv
398.223 146.242 398.754 146.117 399.27 145.867 cv
399.777 145.617 400.199 145.226 400.535 144.691 cv
400.863 144.164 401.035 143.48 401.047 142.644 cv
401.031 141.601 400.73 140.769 400.148 140.14 cv
399.559 139.515 398.773 139.191 397.785 139.175 cv
cp
397.758 140.097 mo
398.238 140.109 398.633 140.25 398.934 140.515 cv
399.23 140.785 399.445 141.113 399.586 141.508 cv
399.719 141.902 399.789 142.297 399.789 142.687 cv
399.773 143.468 399.574 144.097 399.199 144.578 cv
398.816 145.062 398.328 145.312 397.73 145.32 cv
397.117 145.308 396.625 145.058 396.254 144.574 cv
395.883 144.093 395.695 143.472 395.688 142.715 cv
395.684 142.285 395.754 141.871 395.902 141.472 cv
396.047 141.074 396.273 140.75 396.578 140.492 cv
396.883 140.242 397.273 140.109 397.758 140.097 cv
cp
f
402.605 146.09 mo
403.836 146.09 li
403.836 142.476 li
403.832 142.379 403.836 142.281 403.844 142.179 cv
403.852 142.086 403.863 141.992 403.879 141.902 cv
403.965 141.437 404.148 141.062 404.438 140.773 cv
404.723 140.492 405.086 140.343 405.527 140.336 cv
405.605 140.336 405.684 140.34 405.754 140.34 cv
405.82 140.347 405.883 140.355 405.949 140.363 cv
405.949 139.203 li
405.891 139.199 405.836 139.191 405.785 139.183 cv
405.73 139.179 405.676 139.175 405.613 139.175 cv
405.191 139.183 404.809 139.32 404.473 139.578 cv
404.129 139.843 403.879 140.203 403.723 140.656 cv
403.68 140.656 li
403.625 139.316 li
402.551 139.316 li
402.566 139.629 402.582 139.961 402.59 140.308 cv
402.598 140.66 402.602 141.035 402.605 141.429 cv
cp
f
333.289 129.102 mo
409.957 129.102 li
409.957 155.207 li
333.289 155.207 li
cp
0.215686 0.207843 0.207843 rgb
@
470.125 115.582 mo
470.125 78.117 li
@
470.125 71.059 mo
474.191 81.008 li
470.125 78.645 li
466.059 81.008 li
cp
f
1 lc
470.125 224.555 mo
470.125 177.371 li
@
470.125 170.309 mo
474.191 180.258 li
470.125 177.898 li
466.059 180.258 li
cp
f
0 lc
371.77 201.09 mo
371.77 162.27 li
@
371.77 155.207 mo
375.836 165.156 li
371.77 162.797 li
367.703 165.156 li
cp
f
1 lc
372.102 70.316 mo
372.102 122.043 li
@
372.102 129.102 mo
368.035 119.152 li
372.102 121.516 li
376.164 119.152 li
cp
f
437.293 138.683 mo
438.523 138.683 li
438.523 130.281 li
441.41 130.281 li
441.41 129.25 li
434.426 129.25 li
434.426 130.281 li
437.293 130.281 li
cp
0 0 0 rgb
f
443.48 138.683 mo
443.48 131.91 li
442.25 131.91 li
442.25 138.683 li
cp
442.863 129.25 mo
442.625 129.258 442.441 129.336 442.305 129.476 cv
442.168 129.625 442.098 129.804 442.094 130.019 cv
442.098 130.234 442.164 130.414 442.297 130.554 cv
442.426 130.699 442.605 130.769 442.836 130.773 cv
443.082 130.769 443.273 130.699 443.41 130.554 cv
443.547 130.414 443.617 130.234 443.621 130.019 cv
443.613 129.797 443.543 129.613 443.41 129.472 cv
443.273 129.332 443.09 129.258 442.863 129.25 cv
cp
f
445.527 138.683 mo
446.73 138.683 li
446.73 134.609 li
446.73 134.508 446.734 134.402 446.75 134.293 cv
446.762 134.191 446.789 134.093 446.828 134.008 cv
446.926 133.687 447.109 133.406 447.379 133.16 cv
447.645 132.918 447.969 132.789 448.355 132.773 cv
448.82 132.785 449.176 132.961 449.414 133.297 cv
449.648 133.636 449.766 134.078 449.77 134.621 cv
449.77 138.683 li
450.973 138.683 li
450.973 134.496 li
450.973 134.386 450.98 134.281 451 134.175 cv
451.016 134.074 451.039 133.972 451.07 133.879 cv
451.184 133.578 451.367 133.324 451.621 133.109 cv
451.871 132.898 452.176 132.785 452.539 132.773 cv
453.023 132.781 453.391 132.965 453.641 133.324 cv
453.883 133.687 454.008 134.199 454.012 134.859 cv
454.012 138.683 li
455.215 138.683 li
455.215 134.707 li
455.199 133.933 455.07 133.332 454.832 132.902 cv
454.59 132.476 454.297 132.179 453.957 132.008 cv
453.613 131.843 453.285 131.761 452.973 131.769 cv
452.652 131.769 452.375 131.812 452.141 131.89 cv
451.902 131.976 451.688 132.093 451.488 132.242 cv
451.348 132.351 451.211 132.476 451.078 132.617 cv
450.945 132.765 450.824 132.933 450.719 133.125 cv
450.691 133.125 li
450.539 132.722 450.297 132.398 449.969 132.148 cv
449.637 131.906 449.242 131.777 448.789 131.769 cv
448.223 131.781 447.773 131.91 447.434 132.148 cv
447.09 132.394 446.824 132.679 446.645 133.011 cv
446.602 133.011 li
446.547 131.91 li
445.473 131.91 li
445.48 132.187 445.492 132.476 445.508 132.769 cv
445.516 133.066 445.523 133.39 445.527 133.742 cv
cp
f
458.434 138.683 mo
458.434 131.91 li
457.203 131.91 li
457.203 138.683 li
cp
457.816 129.25 mo
457.578 129.258 457.395 129.336 457.258 129.476 cv
457.121 129.625 457.051 129.804 457.047 130.019 cv
457.051 130.234 457.117 130.414 457.25 130.554 cv
457.379 130.699 457.559 130.769 457.789 130.773 cv
458.035 130.769 458.227 130.699 458.363 130.554 cv
458.5 130.414 458.57 130.234 458.574 130.019 cv
458.566 129.797 458.496 129.613 458.363 129.472 cv
458.227 129.332 458.043 129.258 457.816 129.25 cv
cp
f
460.48 138.683 mo
461.711 138.683 li
461.711 134.609 li
461.707 134.508 461.715 134.402 461.73 134.3 cv
461.746 134.203 461.766 134.117 461.793 134.035 cv
461.906 133.683 462.109 133.386 462.402 133.148 cv
462.691 132.91 463.039 132.785 463.445 132.773 cv
464.02 132.793 464.426 132.992 464.668 133.367 cv
464.902 133.75 465.02 134.218 465.016 134.777 cv
465.016 138.683 li
466.246 138.683 li
466.246 134.652 li
466.23 133.886 466.094 133.293 465.832 132.871 cv
465.57 132.453 465.254 132.164 464.891 132 cv
464.52 131.84 464.176 131.761 463.852 131.769 cv
463.289 131.785 462.816 131.918 462.438 132.164 cv
462.055 132.414 461.781 132.703 461.613 133.027 cv
461.586 133.027 li
461.516 131.91 li
460.426 131.91 li
460.441 132.187 460.457 132.476 460.465 132.769 cv
460.473 133.066 460.477 133.39 460.48 133.742 cv
cp
f
474.043 133.754 mo
474.039 133.355 474.043 133.004 474.055 132.707 cv
474.063 132.41 474.078 132.144 474.102 131.91 cv
473.008 131.91 li
472.969 132.929 li
472.938 132.929 li
472.785 132.636 472.543 132.375 472.207 132.14 cv
471.867 131.91 471.406 131.785 470.824 131.769 cv
470.293 131.769 469.793 131.91 469.332 132.187 cv
468.863 132.465 468.488 132.871 468.203 133.402 cv
467.914 133.937 467.766 134.586 467.758 135.351 cv
467.77 136.312 468.039 137.097 468.57 137.707 cv
469.094 138.32 469.785 138.636 470.641 138.656 cv
471.168 138.652 471.613 138.543 471.977 138.328 cv
472.34 138.117 472.613 137.847 472.801 137.523 cv
472.828 137.523 li
472.828 138.261 li
472.813 139.113 472.605 139.722 472.207 140.097 cv
471.805 140.465 471.281 140.648 470.641 140.644 cv
470.215 140.636 469.836 140.582 469.5 140.48 cv
469.16 140.375 468.875 140.246 468.652 140.097 cv
468.348 141.05 li
468.625 141.23 468.969 141.367 469.371 141.465 cv
469.773 141.558 470.184 141.605 470.602 141.609 cv
471.035 141.609 471.469 141.55 471.906 141.425 cv
472.34 141.3 472.73 141.09 473.078 140.797 cv
473.398 140.5 473.641 140.101 473.801 139.605 cv
473.961 139.101 474.039 138.468 474.043 137.691 cv
cp
472.813 135.8 mo
472.809 135.91 472.801 136.019 472.789 136.129 cv
472.77 136.242 472.746 136.351 472.715 136.457 cv
472.578 136.855 472.359 137.164 472.055 137.383 cv
471.746 137.605 471.395 137.718 471.008 137.718 cv
470.344 137.703 469.844 137.465 469.508 137 cv
469.168 136.543 469 135.968 469.004 135.281 cv
469.012 134.492 469.203 133.871 469.57 133.414 cv
469.938 132.961 470.418 132.726 471.02 132.718 cv
471.473 132.73 471.848 132.859 472.137 133.105 cv
472.426 133.355 472.625 133.668 472.742 134.035 cv
472.766 134.117 472.785 134.199 472.797 134.289 cv
472.805 134.379 472.809 134.476 472.813 134.582 cv
cp
f
478.609 138.222 mo
478.871 138.398 479.223 138.543 479.66 138.656 cv
480.098 138.769 480.547 138.828 481.016 138.836 cv
482.125 138.812 482.953 138.543 483.496 138.019 cv
484.035 137.5 484.305 136.863 484.305 136.109 cv
484.301 135.429 484.102 134.871 483.707 134.433 cv
483.305 134.004 482.707 133.636 481.91 133.336 cv
481.262 133.097 480.785 132.84 480.484 132.566 cv
480.18 132.297 480.031 131.949 480.035 131.515 cv
480.027 131.179 480.16 130.863 480.438 130.566 cv
480.715 130.277 481.172 130.121 481.813 130.101 cv
482.238 130.113 482.605 130.164 482.91 130.258 cv
483.211 130.355 483.438 130.453 483.59 130.547 cv
483.926 129.554 li
483.723 129.433 483.445 129.328 483.098 129.238 cv
482.746 129.148 482.332 129.101 481.855 129.093 cv
480.922 129.113 480.184 129.355 479.641 129.824 cv
479.094 130.297 478.816 130.91 478.805 131.656 cv
478.813 132.312 479.035 132.851 479.473 133.281 cv
479.91 133.715 480.516 134.07 481.297 134.343 cv
481.922 134.578 482.379 134.84 482.66 135.129 cv
482.941 135.422 483.078 135.781 483.074 136.207 cv
483.066 136.695 482.891 137.082 482.551 137.371 cv
482.207 137.66 481.723 137.808 481.098 137.816 cv
480.672 137.816 480.273 137.758 479.902 137.64 cv
479.527 137.527 479.203 137.383 478.93 137.199 cv
cp
f
484.934 131.91 mo
487.426 138.152 li
487.461 138.23 487.484 138.293 487.5 138.343 cv
487.512 138.398 487.52 138.441 487.523 138.472 cv
487.52 138.511 487.512 138.554 487.496 138.601 cv
487.477 138.648 487.453 138.703 487.426 138.765 cv
487.273 139.082 487.105 139.355 486.922 139.59 cv
486.738 139.82 486.563 140.004 486.391 140.14 cv
486.203 140.293 486.016 140.418 485.828 140.519 cv
485.641 140.613 485.469 140.687 485.313 140.742 cv
485.621 141.761 li
485.777 141.734 485.992 141.664 486.262 141.543 cv
486.527 141.422 486.816 141.234 487.133 140.98 cv
487.539 140.621 487.922 140.109 488.277 139.449 cv
488.633 138.789 489.023 137.886 489.457 136.738 cv
491.305 131.91 li
490.004 131.91 li
488.66 135.883 li
488.57 136.133 488.492 136.379 488.426 136.621 cv
488.352 136.867 488.285 137.093 488.223 137.297 cv
488.195 137.297 li
488.137 137.093 488.066 136.867 487.992 136.621 cv
487.91 136.379 487.832 136.144 487.75 135.91 cv
486.277 131.91 li
cp
f
492.43 138.683 mo
493.66 138.683 li
493.66 134.609 li
493.656 134.508 493.664 134.402 493.68 134.3 cv
493.695 134.203 493.715 134.117 493.742 134.035 cv
493.855 133.683 494.059 133.386 494.352 133.148 cv
494.641 132.91 494.988 132.785 495.395 132.773 cv
495.969 132.793 496.375 132.992 496.617 133.367 cv
496.852 133.75 496.969 134.218 496.965 134.777 cv
496.965 138.683 li
498.195 138.683 li
498.195 134.652 li
498.18 133.886 498.043 133.293 497.781 132.871 cv
497.52 132.453 497.203 132.164 496.84 132 cv
496.469 131.84 496.125 131.761 495.801 131.769 cv
495.238 131.785 494.766 131.918 494.387 132.164 cv
494.004 132.414 493.73 132.703 493.563 133.027 cv
493.535 133.027 li
493.465 131.91 li
492.375 131.91 li
492.391 132.187 492.406 132.476 492.414 132.769 cv
492.422 133.066 492.426 133.39 492.43 133.742 cv
cp
f
504.816 137.523 mo
504.641 137.605 504.434 137.679 504.191 137.742 cv
503.945 137.808 503.648 137.843 503.305 137.843 cv
502.617 137.84 502.059 137.613 501.625 137.164 cv
501.188 136.722 500.961 136.101 500.953 135.308 cv
500.953 134.59 501.16 133.988 501.566 133.504 cv
501.973 133.019 502.566 132.769 503.348 132.746 cv
503.68 132.754 503.961 132.789 504.199 132.851 cv
504.434 132.922 504.625 132.992 504.773 133.07 cv
505.055 132.133 li
504.879 132.039 504.645 131.957 504.348 131.883 cv
504.047 131.812 503.715 131.773 503.348 131.769 cv
502.227 131.789 501.344 132.133 500.699 132.793 cv
500.051 133.457 499.719 134.316 499.707 135.379 cv
499.719 136.433 500.023 137.269 500.625 137.886 cv
501.223 138.504 502.043 138.82 503.082 138.836 cv
503.539 138.828 503.938 138.781 504.273 138.699 cv
504.609 138.613 504.859 138.531 505.027 138.445 cv
cp
f
506.844 138.836 mo
507.105 138.828 507.313 138.746 507.465 138.586 cv
507.613 138.425 507.691 138.215 507.699 137.957 cv
507.691 137.695 507.613 137.484 507.469 137.324 cv
507.316 137.164 507.117 137.082 506.871 137.074 cv
506.621 137.082 506.422 137.168 506.27 137.328 cv
506.113 137.492 506.035 137.699 506.035 137.957 cv
506.035 138.215 506.109 138.425 506.258 138.586 cv
506.402 138.746 506.598 138.828 506.844 138.836 cv
cp
f
431.246 145.769 mo
430.785 146.351 430.371 147.109 430.004 148.043 cv
429.637 148.98 429.438 150.133 429.414 151.496 cv
429.43 152.855 429.625 154 429.996 154.925 cv
430.363 155.855 430.781 156.601 431.246 157.175 cv
432.195 157.175 li
431.695 156.48 431.281 155.675 430.953 154.754 cv
430.625 153.832 430.453 152.75 430.445 151.508 cv
430.453 150.246 430.617 149.144 430.938 148.203 cv
431.254 147.269 431.676 146.457 432.195 145.769 cv
cp
f
433.516 158.254 mo
434.73 158.254 li
434.73 154.574 li
434.758 154.574 li
434.965 154.918 435.25 155.179 435.617 155.359 cv
435.977 155.543 436.387 155.633 436.848 155.636 cv
437.383 155.636 437.887 155.504 438.355 155.234 cv
438.82 154.968 439.199 154.566 439.492 154.023 cv
439.777 153.488 439.926 152.812 439.938 152 cv
439.918 150.965 439.645 150.136 439.117 149.519 cv
438.582 148.902 437.895 148.586 437.055 148.57 cv
436.5 148.574 436.023 148.687 435.621 148.91 cv
435.215 149.136 434.891 149.457 434.648 149.871 cv
434.621 149.871 li
434.551 148.711 li
433.461 148.711 li
433.469 149.031 433.48 149.371 433.496 149.73 cv
433.504 150.093 433.512 150.492 433.516 150.922 cv
cp
434.73 151.55 mo
434.73 151.476 434.738 151.394 434.758 151.308 cv
434.77 151.226 434.789 151.144 434.816 151.062 cv
434.938 150.597 435.172 150.23 435.516 149.957 cv
435.859 149.691 436.246 149.554 436.68 149.547 cv
437.332 149.57 437.832 149.82 438.176 150.297 cv
438.52 150.781 438.691 151.367 438.695 152.054 cv
438.688 152.847 438.508 153.476 438.152 153.949 cv
437.797 154.422 437.289 154.664 436.637 154.672 cv
436.184 154.668 435.793 154.535 435.465 154.273 cv
435.129 154.015 434.906 153.668 434.789 153.23 cv
434.766 153.156 434.75 153.074 434.742 152.988 cv
434.734 152.906 434.73 152.82 434.73 152.726 cv
cp
f
446.926 152.32 mo
446.938 152.25 446.945 152.168 446.953 152.074 cv
446.957 151.98 446.961 151.871 446.965 151.746 cv
446.969 151.316 446.891 150.859 446.734 150.371 cv
446.57 149.886 446.285 149.468 445.879 149.117 cv
445.469 148.769 444.898 148.586 444.168 148.57 cv
443.504 148.578 442.938 148.742 442.465 149.058 cv
441.988 149.379 441.625 149.812 441.371 150.355 cv
441.117 150.906 440.988 151.523 440.988 152.207 cv
440.996 153.25 441.289 154.078 441.871 154.691 cv
442.449 155.308 443.266 155.621 444.32 155.636 cv
444.855 155.629 445.316 155.578 445.695 155.492 cv
446.074 155.402 446.371 155.308 446.59 155.203 cv
446.363 154.324 li
446.145 154.425 445.887 154.508 445.59 154.57 cv
445.293 154.636 444.926 154.672 444.488 154.672 cv
443.848 154.683 443.305 154.5 442.867 154.125 cv
442.426 153.75 442.191 153.148 442.164 152.32 cv
cp
442.18 151.437 mo
442.207 151.148 442.289 150.851 442.43 150.547 cv
442.566 150.246 442.77 149.988 443.039 149.777 cv
443.305 149.566 443.648 149.457 444.07 149.449 cv
444.527 149.461 444.883 149.578 445.133 149.797 cv
445.383 150.019 445.555 150.281 445.648 150.582 cv
445.742 150.89 445.785 151.175 445.777 151.437 cv
cp
f
453.254 151.328 mo
453.258 150.875 453.188 150.437 453.043 150.015 cv
452.898 149.601 452.641 149.258 452.266 148.984 cv
451.891 148.718 451.359 148.578 450.68 148.57 cv
450.242 148.574 449.832 148.629 449.449 148.734 cv
449.059 148.84 448.723 148.98 448.438 149.156 cv
448.719 149.98 li
448.957 149.824 449.23 149.699 449.543 149.609 cv
449.848 149.527 450.168 149.484 450.496 149.476 cv
450.949 149.484 451.285 149.574 451.512 149.754 cv
451.73 149.933 451.875 150.144 451.945 150.386 cv
452.008 150.629 452.039 150.843 452.039 151.031 cv
452.039 151.172 li
450.719 151.172 449.711 151.386 449.016 151.812 cv
448.316 152.246 447.969 152.871 447.965 153.691 cv
447.965 154.203 448.137 154.652 448.484 155.035 cv
448.828 155.418 449.344 155.617 450.035 155.636 cv
450.516 155.629 450.934 155.531 451.289 155.336 cv
451.641 155.144 451.914 154.91 452.109 154.633 cv
452.148 154.633 li
452.246 155.484 li
453.352 155.484 li
453.313 155.25 453.289 154.996 453.277 154.718 cv
453.258 154.445 453.25 154.16 453.254 153.859 cv
cp
452.066 153.203 mo
452.066 153.261 452.059 153.32 452.051 153.386 cv
452.039 153.457 452.027 153.527 452.008 153.593 cv
451.906 153.894 451.715 154.156 451.438 154.379 cv
451.152 154.601 450.789 154.718 450.344 154.73 cv
450.023 154.734 449.754 154.64 449.535 154.445 cv
449.316 154.258 449.203 153.957 449.195 153.55 cv
449.203 153.121 449.352 152.793 449.641 152.566 cv
449.926 152.343 450.285 152.195 450.723 152.117 cv
451.156 152.043 451.605 152.011 452.066 152.027 cv
cp
f
456.457 145.547 mo
455.242 145.547 li
455.242 155.484 li
456.457 155.484 li
456.457 152.937 li
457.086 152.238 li
459.41 155.484 li
460.926 155.484 li
457.941 151.496 li
460.547 148.711 li
459.074 148.711 li
457.074 151.047 li
456.973 151.172 456.871 151.3 456.77 151.433 cv
456.66 151.57 456.566 151.695 456.484 151.816 cv
456.457 151.816 li
cp
f
469.398 145.547 mo
469.398 149.59 li
469.367 149.59 li
469.211 149.316 468.961 149.082 468.625 148.879 cv
468.281 148.683 467.848 148.578 467.324 148.57 cv
466.766 148.574 466.262 148.722 465.805 149.008 cv
465.344 149.3 464.977 149.715 464.703 150.254 cv
464.426 150.797 464.285 151.445 464.285 152.195 cv
464.305 153.242 464.586 154.074 465.129 154.691 cv
465.668 155.308 466.359 155.621 467.199 155.636 cv
467.754 155.629 468.227 155.504 468.617 155.258 cv
469.008 155.011 469.293 154.695 469.48 154.308 cv
469.523 154.308 li
469.578 155.484 li
470.668 155.484 li
470.652 155.25 470.637 154.976 470.629 154.664 cv
470.613 154.351 470.609 154.043 470.613 153.734 cv
470.613 145.547 li
cp
469.398 152.64 mo
469.395 152.742 469.391 152.832 469.383 152.918 cv
469.371 153.004 469.355 153.09 469.34 153.172 cv
469.215 153.636 468.992 153.996 468.664 154.254 cv
468.332 154.511 467.953 154.644 467.535 154.644 cv
466.871 154.629 466.371 154.383 466.035 153.906 cv
465.695 153.437 465.527 152.847 465.531 152.136 cv
465.531 151.383 465.711 150.761 466.066 150.281 cv
466.418 149.8 466.918 149.554 467.563 149.535 cv
468.027 149.55 468.414 149.687 468.727 149.953 cv
469.035 150.222 469.238 150.554 469.34 150.949 cv
469.355 151.027 469.371 151.113 469.383 151.207 cv
469.391 151.3 469.395 151.386 469.398 151.465 cv
cp
f
478.121 152.32 mo
478.133 152.25 478.141 152.168 478.148 152.074 cv
478.152 151.98 478.156 151.871 478.16 151.746 cv
478.164 151.316 478.086 150.859 477.93 150.371 cv
477.766 149.886 477.48 149.468 477.074 149.117 cv
476.664 148.769 476.094 148.586 475.363 148.57 cv
474.699 148.578 474.133 148.742 473.66 149.058 cv
473.184 149.379 472.82 149.812 472.566 150.355 cv
472.313 150.906 472.184 151.523 472.184 152.207 cv
472.191 153.25 472.484 154.078 473.066 154.691 cv
473.645 155.308 474.461 155.621 475.516 155.636 cv
476.051 155.629 476.512 155.578 476.891 155.492 cv
477.27 155.402 477.566 155.308 477.785 155.203 cv
477.559 154.324 li
477.34 154.425 477.082 154.508 476.785 154.57 cv
476.488 154.636 476.121 154.672 475.684 154.672 cv
475.043 154.683 474.5 154.5 474.063 154.125 cv
473.621 153.75 473.387 153.148 473.359 152.32 cv
cp
473.375 151.437 mo
473.402 151.148 473.484 150.851 473.625 150.547 cv
473.762 150.246 473.965 149.988 474.234 149.777 cv
474.5 149.566 474.844 149.457 475.266 149.449 cv
475.723 149.461 476.078 149.578 476.328 149.797 cv
476.578 150.019 476.75 150.281 476.844 150.582 cv
476.938 150.89 476.98 151.175 476.973 151.437 cv
cp
f
484.305 154.324 mo
484.129 154.406 483.922 154.48 483.68 154.543 cv
483.434 154.609 483.137 154.644 482.793 154.644 cv
482.105 154.64 481.547 154.414 481.113 153.965 cv
480.676 153.523 480.449 152.902 480.441 152.109 cv
480.441 151.39 480.648 150.789 481.055 150.304 cv
481.461 149.82 482.055 149.57 482.836 149.547 cv
483.168 149.554 483.449 149.59 483.688 149.652 cv
483.922 149.722 484.113 149.793 484.262 149.871 cv
484.543 148.933 li
484.367 148.84 484.133 148.758 483.836 148.683 cv
483.535 148.613 483.203 148.574 482.836 148.57 cv
481.715 148.59 480.832 148.933 480.188 149.593 cv
479.539 150.258 479.207 151.117 479.195 152.179 cv
479.207 153.234 479.512 154.07 480.113 154.687 cv
480.711 155.304 481.531 155.621 482.57 155.636 cv
483.027 155.629 483.426 155.582 483.762 155.5 cv
484.098 155.414 484.348 155.332 484.516 155.246 cv
cp
f
486.422 147.449 mo
486.422 148.711 li
485.371 148.711 li
485.371 149.644 li
486.422 149.644 li
486.422 153.351 li
486.418 153.75 486.453 154.097 486.531 154.39 cv
486.602 154.691 486.723 154.933 486.895 155.121 cv
487.039 155.285 487.227 155.41 487.453 155.5 cv
487.676 155.59 487.934 155.636 488.223 155.636 cv
488.461 155.636 488.672 155.617 488.859 155.586 cv
489.043 155.547 489.195 155.511 489.316 155.468 cv
489.262 154.535 li
489.168 154.562 489.07 154.586 488.961 154.597 cv
488.848 154.613 488.707 154.617 488.547 154.617 cv
488.203 154.617 487.965 154.504 487.828 154.273 cv
487.684 154.05 487.613 153.726 487.621 153.3 cv
487.621 149.644 li
489.387 149.644 li
489.387 148.711 li
487.621 148.711 li
487.621 147.086 li
cp
f
496.137 152.32 mo
496.148 152.25 496.156 152.168 496.164 152.074 cv
496.168 151.98 496.172 151.871 496.176 151.746 cv
496.18 151.316 496.102 150.859 495.945 150.371 cv
495.781 149.886 495.496 149.468 495.09 149.117 cv
494.68 148.769 494.109 148.586 493.379 148.57 cv
492.715 148.578 492.148 148.742 491.676 149.058 cv
491.199 149.379 490.836 149.812 490.582 150.355 cv
490.328 150.906 490.199 151.523 490.199 152.207 cv
490.207 153.25 490.5 154.078 491.082 154.691 cv
491.66 155.308 492.477 155.621 493.531 155.636 cv
494.066 155.629 494.527 155.578 494.906 155.492 cv
495.285 155.402 495.582 155.308 495.801 155.203 cv
495.574 154.324 li
495.355 154.425 495.098 154.508 494.801 154.57 cv
494.504 154.636 494.137 154.672 493.699 154.672 cv
493.059 154.683 492.516 154.5 492.078 154.125 cv
491.637 153.75 491.402 153.148 491.375 152.32 cv
cp
491.391 151.437 mo
491.418 151.148 491.5 150.851 491.641 150.547 cv
491.777 150.246 491.98 149.988 492.25 149.777 cv
492.516 149.566 492.859 149.457 493.281 149.449 cv
493.738 149.461 494.094 149.578 494.344 149.797 cv
494.594 150.019 494.766 150.281 494.859 150.582 cv
494.953 150.89 494.996 151.175 494.988 151.437 cv
cp
f
502.324 154.324 mo
502.148 154.406 501.941 154.48 501.699 154.543 cv
501.453 154.609 501.156 154.644 500.813 154.644 cv
500.125 154.64 499.566 154.414 499.133 153.965 cv
498.695 153.523 498.469 152.902 498.461 152.109 cv
498.461 151.39 498.668 150.789 499.074 150.304 cv
499.48 149.82 500.074 149.57 500.855 149.547 cv
501.188 149.554 501.469 149.59 501.707 149.652 cv
501.941 149.722 502.133 149.793 502.281 149.871 cv
502.563 148.933 li
502.387 148.84 502.152 148.758 501.855 148.683 cv
501.555 148.613 501.223 148.574 500.855 148.57 cv
499.734 148.59 498.852 148.933 498.207 149.593 cv
497.559 150.258 497.227 151.117 497.215 152.179 cv
497.227 153.234 497.531 154.07 498.133 154.687 cv
498.73 155.304 499.551 155.621 500.59 155.636 cv
501.047 155.629 501.445 155.582 501.781 155.5 cv
502.117 155.414 502.367 155.332 502.535 155.246 cv
cp
f
504.441 147.449 mo
504.441 148.711 li
503.391 148.711 li
503.391 149.644 li
504.441 149.644 li
504.441 153.351 li
504.438 153.75 504.473 154.097 504.551 154.39 cv
504.621 154.691 504.742 154.933 504.914 155.121 cv
505.059 155.285 505.246 155.41 505.473 155.5 cv
505.695 155.59 505.953 155.636 506.242 155.636 cv
506.48 155.636 506.691 155.617 506.879 155.586 cv
507.063 155.547 507.215 155.511 507.336 155.468 cv
507.281 154.535 li
507.188 154.562 507.09 154.586 506.98 154.597 cv
506.867 154.613 506.727 154.617 506.566 154.617 cv
506.223 154.617 505.984 154.504 505.848 154.273 cv
505.703 154.05 505.633 153.726 505.641 153.3 cv
505.641 149.644 li
507.406 149.644 li
507.406 148.711 li
505.641 148.711 li
505.641 147.086 li
cp
f
509.004 157.175 mo
509.461 156.593 509.875 155.84 510.242 154.91 cv
510.609 153.98 510.805 152.832 510.836 151.465 cv
510.813 150.101 510.617 148.953 510.25 148.019 cv
509.875 147.09 509.461 146.34 509.004 145.769 cv
508.051 145.769 li
508.559 146.465 508.973 147.277 509.297 148.199 cv
509.621 149.129 509.789 150.215 509.801 151.465 cv
509.785 152.722 509.617 153.82 509.293 154.75 cv
508.965 155.683 508.551 156.488 508.051 157.175 cv
cp
f
0 lc
425.289 115.582 mo
514.957 115.582 li
514.957 170.309 li
425.289 170.309 li
cp
0.215686 0.207843 0.207843 rgb
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
